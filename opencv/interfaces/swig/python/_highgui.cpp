/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* define the PyAPI_FUNC macro if it doesn't exist, for example with Python
   version below 2.3... But not really tested... */
#ifndef PyAPI_FUNC
#       define PyAPI_FUNC(RTYPE) RTYPE
#endif

/* remove the PyInt_AS_LONG if defined, as this cause problems on RedHat */
#ifdef PyInt_AS_LONG
#undef PyInt_AS_LONG
#endif

/* wrapper to the better function PyInt_AsLong, removing problems
   with RedHat (I hope) */
static PyAPI_FUNC(long) PyInt_AS_LONG (PyObject *obj) {
    return PyInt_AsLong (obj);
}

/* remove the PyFloat_AS_DOUBLE if defined, to prevent errors */
#ifdef PyFloat_AS_DOUBLE
#undef PyFloat_AS_DOUBLE
#endif

/* wrapper to the better function PyFloat_AS_DOUBLE, to prevent errors */
static PyAPI_FUNC(double) PyFloat_AS_DOUBLE (PyObject *obj) {
    return PyFloat_AsDouble (obj);
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CvTreeNodeIterator swig_types[0] 
#define  SWIGTYPE_p_CvNArrayIterator swig_types[1] 
#define  SWIGTYPE_p_CvLineIterator swig_types[2] 
#define  SWIGTYPE_p_CvSparseMatIterator swig_types[3] 
#define  SWIGTYPE_p_f_int__void swig_types[4] 
#define  SWIGTYPE_p_f_int_int_int_int_p_void__void swig_types[5] 
#define  SWIGTYPE_p_CvFileNode swig_types[6] 
#define  SWIGTYPE_p_CvvImage swig_types[7] 
#define  SWIGTYPE_p_CvPoint3D64f swig_types[8] 
#define  SWIGTYPE_p_CvMat swig_types[9] 
#define  SWIGTYPE_p_CvModuleInfo swig_types[10] 
#define  SWIGTYPE_p__IplTileInfo swig_types[11] 
#define  SWIGTYPE_p_size_t swig_types[12] 
#define  SWIGTYPE_std__size_t swig_types[13] 
#define  SWIGTYPE_size_t swig_types[14] 
#define  SWIGTYPE_p_CvRect swig_types[15] 
#define  SWIGTYPE_p_CvPluginFuncInfo swig_types[16] 
#define  SWIGTYPE_p_CvMatND swig_types[17] 
#define  SWIGTYPE_p_unsigned_short swig_types[18] 
#define  SWIGTYPE_p__IplConvKernel swig_types[19] 
#define  SWIGTYPE_p_CvGraphVtx2D swig_types[20] 
#define  SWIGTYPE_p_CvSparseNode swig_types[21] 
#define  SWIGTYPE_p_CvConnectedComp swig_types[22] 
#define  SWIGTYPE_p_CvPoint2D32f swig_types[23] 
#define  SWIGTYPE_p_CvAttrList swig_types[24] 
#define  SWIGTYPE_p_CvScalar swig_types[25] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[26] 
#define  SWIGTYPE_ptrdiff_t swig_types[27] 
#define  SWIGTYPE_p_CvContourTree swig_types[28] 
#define  SWIGTYPE_p_void swig_types[29] 
#define  SWIGTYPE_p_CvFileStorage swig_types[30] 
#define  SWIGTYPE_p_CvMemStorage swig_types[31] 
#define  SWIGTYPE_p_CvPoint3D32f swig_types[32] 
#define  SWIGTYPE_p_int swig_types[33] 
#define  SWIGTYPE_p_CvTermCriteria swig_types[34] 
#define  SWIGTYPE_p_CvConDensation swig_types[35] 
#define  SWIGTYPE_p_CvBox2D swig_types[36] 
#define  SWIGTYPE_p_CvSubdiv2DPointLocation swig_types[37] 
#define  SWIGTYPE_p_unsigned_long_long swig_types[38] 
#define  SWIGTYPE_p_long_long swig_types[39] 
#define  SWIGTYPE_p_CvSeq swig_types[40] 
#define  SWIGTYPE_p_CvKalman swig_types[41] 
#define  SWIGTYPE_p_CvCapture swig_types[42] 
#define  SWIGTYPE_p_p_CvCapture swig_types[43] 
#define  SWIGTYPE_p_CvPoint swig_types[44] 
#define  SWIGTYPE_p_CvSeqReader swig_types[45] 
#define  SWIGTYPE_p_CvGenericHash swig_types[46] 
#define  SWIGTYPE_p_CvSet swig_types[47] 
#define  SWIGTYPE_p_Cv64suf swig_types[48] 
#define  SWIGTYPE_p_CvSeqBlock swig_types[49] 
#define  SWIGTYPE_p_CvGraphScanner swig_types[50] 
#define  SWIGTYPE_p_CvConvexityDefect swig_types[51] 
#define  SWIGTYPE_p_CvGraphEdge swig_types[52] 
#define  SWIGTYPE_p_CvFilter swig_types[53] 
#define  SWIGTYPE_p_CvHidHaarClassifierCascade swig_types[54] 
#define  SWIGTYPE_p_CvHaarClassifierCascade swig_types[55] 
#define  SWIGTYPE_p_CvSize2D32f swig_types[56] 
#define  SWIGTYPE_p_Cv32suf swig_types[57] 
#define  SWIGTYPE_p__IplImage swig_types[58] 
#define  SWIGTYPE_p_CvMatrix3 swig_types[59] 
#define  SWIGTYPE_p_CvHuMoments swig_types[60] 
#define  SWIGTYPE_p_CvMoments swig_types[61] 
#define  SWIGTYPE_p_char swig_types[62] 
#define  SWIGTYPE_p_p_char swig_types[63] 
#define  SWIGTYPE_p_CvHaarClassifier swig_types[64] 
#define  SWIGTYPE_p_CvHaarStageClassifier swig_types[65] 
#define  SWIGTYPE_p_CvNextEdgeType swig_types[66] 
#define  SWIGTYPE_p_CvTypeInfo swig_types[67] 
#define  SWIGTYPE_p_CvMemStoragePos swig_types[68] 
#define  SWIGTYPE_p__IplConvKernelFP swig_types[69] 
#define  SWIGTYPE_p_CvChain swig_types[70] 
#define  SWIGTYPE_p_CvSubdiv2D swig_types[71] 
#define  SWIGTYPE_p_CvHistogram swig_types[72] 
#define  SWIGTYPE_p_CvQuadEdge2D swig_types[73] 
#define  SWIGTYPE_p_CvGraph swig_types[74] 
#define  SWIGTYPE_p_CvPOSITObject swig_types[75] 
#define  SWIGTYPE_p_CvFont swig_types[76] 
#define  SWIGTYPE_p_CvSetElem swig_types[77] 
#define  SWIGTYPE_p__IplROI swig_types[78] 
#define  SWIGTYPE_p_CvSlice swig_types[79] 
#define  SWIGTYPE_p_CvChainPtReader swig_types[80] 
#define  SWIGTYPE_p_CvString swig_types[81] 
#define  SWIGTYPE_p_CvSparseMat swig_types[82] 
#define  SWIGTYPE_p_CvSubdiv2DPoint swig_types[83] 
#define  SWIGTYPE_p_CvSeqWriter swig_types[84] 
#define  SWIGTYPE_p_CvVideoWriter swig_types[85] 
#define  SWIGTYPE_p_p_CvVideoWriter swig_types[86] 
#define  SWIGTYPE_p_CvContour swig_types[87] 
#define  SWIGTYPE_p_CvAvgComp swig_types[88] 
#define  SWIGTYPE_p_CvSize swig_types[89] 
#define  SWIGTYPE_p_unsigned_char swig_types[90] 
#define  SWIGTYPE_p_CvStringHashNode swig_types[91] 
#define  SWIGTYPE_p_CvMemBlock swig_types[92] 
#define  SWIGTYPE_p_CvGraphVtx swig_types[93] 
#define  SWIGTYPE_p_CvPoint2D64f swig_types[94] 
#define  SWIGTYPE_p_CvHaarFeature swig_types[95] 
static swig_type_info *swig_types[97];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _highgui.so
  ------------------------------------------------*/
#define SWIG_init    init_highgui

#define SWIG_name    "_highgui"

	#include <cxtypes.h>
	#include "pyhelpers.h"


static CvArr * PyObject_to_CvArr(PyObject * obj, bool * freearg){
	CvArr * cvarr;
	*freearg = false;

	// check if OpenCV type
	if( PySwigObject_Check(obj) ){
		SWIG_ConvertPtr(obj, (void**)&cvarr, 0, SWIG_POINTER_EXCEPTION);
	}
	else if(PyList_Check(obj) || PyTuple_Check(obj)){
		cvarr = PySequence_to_CvArr( obj );
		*freearg = (cvarr != NULL);
	}
	else {
		SWIG_ConvertPtr(obj, (void**)&cvarr, 0, SWIG_POINTER_EXCEPTION);
	}
	return cvarr;
}


#include "highgui.h"

extern "C" int cvInitSystem(int,char **);

#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/

extern "C" int cvStartWindowThread();
extern "C" int cvNamedWindow(char const *,int);

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNSHORT int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}

extern "C" void cvShowImage(char const *,CvArr const *);
extern "C" void cvResizeWindow(char const *,int,int);
extern "C" void cvMoveWindow(char const *,int,int);
extern "C" void cvDestroyWindow(char const *);
extern "C" void cvDestroyAllWindows(void);
extern "C" void *cvGetWindowHandle(char const *);
extern "C" char const *cvGetWindowName(void *);

SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}

extern "C" int cvCreateTrackbar(char const *,char const *,int *,int,CvTrackbarCallback);
extern "C" int cvGetTrackbarPos(char const *,char const *);
extern "C" void cvSetTrackbarPos(char const *,char const *,int);
extern "C" void cvSetMouseCallback(char const *,CvMouseCallback,void *);
extern "C" IplImage *cvLoadImage(char const *,int);
extern "C" CvMat *cvLoadImageM(char const *,int);
extern "C" int cvSaveImage(char const *,CvArr const *);
extern "C" void cvConvertImage(CvArr const *,CvArr *,int);
extern "C" int cvWaitKey(int);
extern "C" CvCapture *cvCreateFileCapture(char const *);
extern "C" CvCapture *cvCreateCameraCapture(int);
extern "C" int cvGrabFrame(CvCapture *);
extern "C" IplImage *cvRetrieveFrame(CvCapture *);
extern "C" IplImage *cvQueryFrame(CvCapture *);
extern "C" void cvReleaseCapture(CvCapture **);
extern "C" double cvGetCaptureProperty(CvCapture *,int);

  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/

extern "C" int cvSetCaptureProperty(CvCapture *,int,double);

SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNSHORT double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}

extern "C" CvVideoWriter *cvCreateVideoWriter(char const *,int,double,CvSize,int);
extern "C" int cvWriteFrame(CvVideoWriter *,IplImage const *);
extern "C" void cvReleaseVideoWriter(CvVideoWriter **);

SWIGINTERNSHORT PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}

#ifdef __cplusplus
extern "C" {
#endif


    /* the wrapping code to enable the use of Python-based callbacks */

    /* global variables to store the callbacks... Very uggly */
    static PyObject *my_tb_cb_func = NULL;
    static PyObject *my_mouse_cb_func = NULL;

    /* the internal C callback function which is responsible to call
       the Python real trackbar callback function */
    static void _internal_tb_cb_func (int pos) {
	
	/* Must ensure this thread has a lock on the interpreter */
	PyGILState_STATE state = PyGILState_Ensure();

	PyObject *result;

	/* the argument of the callback ready to be passed to Python code */
	PyObject *arg1 = PyInt_FromLong (pos);

	/* build the tuple for calling the Python callback */
	PyObject *arglist = Py_BuildValue ("(O)", arg1);

	/* call the Python callback */
	result = PyEval_CallObject (my_tb_cb_func, arglist);

	/* cleanup */
	Py_XDECREF (result);

	/* Release Interpreter lock */
	PyGILState_Release(state);
    }

    /* the internal C callback function which is responsible to call
       the Python real trackbar callback function */
    static void _internal_mouse_cb_func (int event, int x, int y,
					 int flags, void* param) {
	
	/* Must ensure this thread has a lock on the interpreter */
	PyGILState_STATE state = PyGILState_Ensure();

	PyObject *result;

	/* the argument of the callback ready to be passed to Python code */
	PyObject *arg1 = PyInt_FromLong (event);
	PyObject *arg2 = PyInt_FromLong (x);
	PyObject *arg3 = PyInt_FromLong (y);
	PyObject *arg4 = PyInt_FromLong (flags);
	PyObject *arg5 = PyLong_FromVoidPtr (param);

	/* build the tuple for calling the Python callback */
	PyObject *arglist = Py_BuildValue ("(OOOOO)",
					   arg1, arg2, arg3, arg4, arg5);

	/* call the Python callback */
	result = PyEval_CallObject (my_mouse_cb_func, arglist);

	/* cleanup */
	Py_XDECREF (result);

	/* Release Interpreter lock */
	PyGILState_Release(state);
    }

static PyObject *_wrap_cvInitSystem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char **arg2 = (char **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvInitSystem",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg2=&buffer; 
    }
    {
        try {
            result = (int)cvInitSystem(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartWindowThread(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvStartWindowThread")) goto fail;
    {
        try {
            result = (int)cvStartWindowThread();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNamedWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 = (int) 1 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:cvNamedWindow",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvNamedWindow((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvShowImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    bool freearg2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvShowImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = PyObject_to_CvArr(obj1, &freearg2);
    }
    {
        try {
            cvShowImage((char const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return resultobj;
    fail:
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return NULL;
}


static PyObject *_wrap_cvResizeWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvResizeWindow",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvResizeWindow((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMoveWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMoveWindow",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvMoveWindow((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDestroyWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvDestroyWindow",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            cvDestroyWindow((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDestroyAllWindows(PyObject *, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":cvDestroyAllWindows")) goto fail;
    {
        try {
            cvDestroyAllWindows();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetWindowHandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetWindowHandle",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            result = (void *)cvGetWindowHandle((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetWindowName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetWindowName",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (char *)cvGetWindowName(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateTrackbar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    CvTrackbarCallback arg5 = (CvTrackbarCallback) 0 ;
    int result;
    int temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCreateTrackbar",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (!(SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_int,0) != -1)) {
            temp3 = SWIG_As_int(obj2);
            if (SWIG_arg_fail(3)) SWIG_fail;
            arg3 = &temp3;
            res3 = SWIG_NEWOBJ;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        /* memorize the Python address of the callback function */
        my_tb_cb_func = (PyObject *) obj4;
        
        /* prepare to call the C function who will register the callback */
        arg5 = (CvTrackbarCallback) _internal_tb_cb_func;
    }
    {
        try {
            result = (int)cvCreateTrackbar((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetTrackbarPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetTrackbarPos",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (int)cvGetTrackbarPos((char const *)arg1,(char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetTrackbarPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetTrackbarPos",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetTrackbarPos((char const *)arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetMouseCallback(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvMouseCallback arg2 = (CvMouseCallback) 0 ;
    void *arg3 = (void *) NULL ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:cvSetMouseCallback",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        /* memorize the Python address of the callback function */
        my_mouse_cb_func = (PyObject *) obj1;
        
        /* prepare to call the C function who will register the callback */
        arg2 = (CvMouseCallback) _internal_mouse_cb_func;
    }
    if (obj2) {
        {
            if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
                SWIG_arg_fail(3);SWIG_fail;
            }
        }
    }
    {
        try {
            cvSetMouseCallback((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLoadImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 = (int) 1 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:cvLoadImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        try {
            result = (IplImage *)cvLoadImage((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLoadImageM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 = (int) 1 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:cvLoadImageM",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (obj1) {
        {
            arg2 = (int)(SWIG_As_int(obj1)); 
            if (SWIG_arg_fail(2)) SWIG_fail;
        }
    }
    {
        try {
            result = (CvMat *)cvLoadImageM((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSaveImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int result;
    bool freearg2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSaveImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = PyObject_to_CvArr(obj1, &freearg2);
    }
    {
        try {
            result = (int)cvSaveImage((char const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return resultobj;
    fail:
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return NULL;
}


static PyObject *_wrap_cvConvertImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 = (int) 0 ;
    bool freearg1 = false ;
    bool freearg2 = false ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:cvConvertImage",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = PyObject_to_CvArr(obj0, &freearg1);
    }
    {
        arg2 = PyObject_to_CvArr(obj1, &freearg2);
    }
    if (obj2) {
        {
            arg3 = (int)(SWIG_As_int(obj2)); 
            if (SWIG_arg_fail(3)) SWIG_fail;
        }
    }
    {
        try {
            cvConvertImage((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if(arg1!=NULL && freearg1){
            cvReleaseData( arg1 );
            cvFree(&(arg1));
        }
    }
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return resultobj;
    fail:
    {
        if(arg1!=NULL && freearg1){
            cvReleaseData( arg1 );
            cvFree(&(arg1));
        }
    }
    {
        if(arg2!=NULL && freearg2){
            cvReleaseData( arg2 );
            cvFree(&(arg2));
        }
    }
    return NULL;
}


static PyObject *_wrap_cvWaitKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:cvWaitKey",&obj0)) goto fail;
    if (obj0) {
        {
            arg1 = (int)(SWIG_As_int(obj0)); 
            if (SWIG_arg_fail(1)) SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvWaitKey(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateFileCapture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvCapture *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateFileCapture",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            result = (CvCapture *)cvCreateFileCapture((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvCapture, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateCameraCapture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    CvCapture *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateCameraCapture",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (CvCapture *)cvCreateCameraCapture(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvCapture, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGrabFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGrabFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvGrabFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRetrieveFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRetrieveFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IplImage *)cvRetrieveFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvQueryFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvQueryFrame",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IplImage *)cvQueryFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseCapture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture **arg1 = (CvCapture **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseCapture",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvReleaseCapture(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetCaptureProperty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetCaptureProperty",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetCaptureProperty(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetCaptureProperty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetCaptureProperty",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvCapture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (int)cvSetCaptureProperty(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateVideoWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    int arg2 ;
    double arg3 ;
    CvSize arg4 ;
    int arg5 = (int) 1 ;
    CvVideoWriter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|O:cvCreateVideoWriter",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    if (obj4) {
        {
            arg5 = (int)(SWIG_As_int(obj4)); 
            if (SWIG_arg_fail(5)) SWIG_fail;
        }
    }
    {
        try {
            result = (CvVideoWriter *)cvCreateVideoWriter((char const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvVideoWriter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvVideoWriter *arg1 = (CvVideoWriter *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvWriteFrame",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvVideoWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvWriteFrame(arg1,(IplImage const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseVideoWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvVideoWriter **arg1 = (CvVideoWriter **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseVideoWriter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_p_CvVideoWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvReleaseVideoWriter(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvvImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvvImage")) goto fail;
    {
        try {
            result = (CvvImage *)new CvvImage();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvvImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvvImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvvImage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Create__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:CvvImage_Create",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Create(arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Create__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CvvImage_Create",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Create(arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Create(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_CvvImage_Create__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_CvvImage_Create__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'CvvImage_Create'");
    return NULL;
}


static PyObject *_wrap_CvvImage_Load__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CvvImage_Load",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Load((char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Load__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Load",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Load((char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Load(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                return _wrap_CvvImage_Load__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsCharPtr(argv[1], (char **)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_CvvImage_Load__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'CvvImage_Load'");
    return NULL;
}


static PyObject *_wrap_CvvImage_LoadRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    CvRect arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CvvImage_LoadRect",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        try {
            result = (bool)(arg1)->LoadRect((char const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 = (char *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Save",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Save((char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    CvvImage *arg2 = 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CvvImage_CopyOf",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("CvvImage");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->CopyOf(*arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    CvvImage *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_CopyOf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("CvvImage");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->CopyOf(*arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:CvvImage_CopyOf",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->CopyOf(arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_CopyOf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            (arg1)->CopyOf(arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_CvvImage_CopyOf__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p__IplImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_CvvImage_CopyOf__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p__IplImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_CvvImage_CopyOf__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_CvvImage_CopyOf__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'CvvImage_CopyOf'");
    return NULL;
}


static PyObject *_wrap_CvvImage_GetImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_GetImage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IplImage *)(arg1)->GetImage();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Destroy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Destroy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->Destroy();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Width(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Width",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Width();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Height(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Height",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Height();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Bpp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Bpp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Bpp();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Fill",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Fill(arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Show(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Show",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvvImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            (arg1)->Show((char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvvImage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvvImage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"cvInitSystem", _wrap_cvInitSystem, METH_VARARGS, NULL},
	 { (char *)"cvStartWindowThread", _wrap_cvStartWindowThread, METH_VARARGS, NULL},
	 { (char *)"cvNamedWindow", _wrap_cvNamedWindow, METH_VARARGS, NULL},
	 { (char *)"cvShowImage", _wrap_cvShowImage, METH_VARARGS, NULL},
	 { (char *)"cvResizeWindow", _wrap_cvResizeWindow, METH_VARARGS, NULL},
	 { (char *)"cvMoveWindow", _wrap_cvMoveWindow, METH_VARARGS, NULL},
	 { (char *)"cvDestroyWindow", _wrap_cvDestroyWindow, METH_VARARGS, NULL},
	 { (char *)"cvDestroyAllWindows", _wrap_cvDestroyAllWindows, METH_VARARGS, NULL},
	 { (char *)"cvGetWindowHandle", _wrap_cvGetWindowHandle, METH_VARARGS, NULL},
	 { (char *)"cvGetWindowName", _wrap_cvGetWindowName, METH_VARARGS, NULL},
	 { (char *)"cvCreateTrackbar", _wrap_cvCreateTrackbar, METH_VARARGS, NULL},
	 { (char *)"cvGetTrackbarPos", _wrap_cvGetTrackbarPos, METH_VARARGS, NULL},
	 { (char *)"cvSetTrackbarPos", _wrap_cvSetTrackbarPos, METH_VARARGS, NULL},
	 { (char *)"cvSetMouseCallback", _wrap_cvSetMouseCallback, METH_VARARGS, NULL},
	 { (char *)"cvLoadImage", _wrap_cvLoadImage, METH_VARARGS, NULL},
	 { (char *)"cvLoadImageM", _wrap_cvLoadImageM, METH_VARARGS, NULL},
	 { (char *)"cvSaveImage", _wrap_cvSaveImage, METH_VARARGS, NULL},
	 { (char *)"cvConvertImage", _wrap_cvConvertImage, METH_VARARGS, NULL},
	 { (char *)"cvWaitKey", _wrap_cvWaitKey, METH_VARARGS, NULL},
	 { (char *)"cvCreateFileCapture", _wrap_cvCreateFileCapture, METH_VARARGS, NULL},
	 { (char *)"cvCreateCameraCapture", _wrap_cvCreateCameraCapture, METH_VARARGS, NULL},
	 { (char *)"cvGrabFrame", _wrap_cvGrabFrame, METH_VARARGS, NULL},
	 { (char *)"cvRetrieveFrame", _wrap_cvRetrieveFrame, METH_VARARGS, NULL},
	 { (char *)"cvQueryFrame", _wrap_cvQueryFrame, METH_VARARGS, NULL},
	 { (char *)"cvReleaseCapture", _wrap_cvReleaseCapture, METH_VARARGS, NULL},
	 { (char *)"cvGetCaptureProperty", _wrap_cvGetCaptureProperty, METH_VARARGS, NULL},
	 { (char *)"cvSetCaptureProperty", _wrap_cvSetCaptureProperty, METH_VARARGS, NULL},
	 { (char *)"cvCreateVideoWriter", _wrap_cvCreateVideoWriter, METH_VARARGS, NULL},
	 { (char *)"cvWriteFrame", _wrap_cvWriteFrame, METH_VARARGS, NULL},
	 { (char *)"cvReleaseVideoWriter", _wrap_cvReleaseVideoWriter, METH_VARARGS, NULL},
	 { (char *)"new_CvvImage", _wrap_new_CvvImage, METH_VARARGS, NULL},
	 { (char *)"delete_CvvImage", _wrap_delete_CvvImage, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Create", _wrap_CvvImage_Create, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Load", _wrap_CvvImage_Load, METH_VARARGS, NULL},
	 { (char *)"CvvImage_LoadRect", _wrap_CvvImage_LoadRect, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Save", _wrap_CvvImage_Save, METH_VARARGS, NULL},
	 { (char *)"CvvImage_CopyOf", _wrap_CvvImage_CopyOf, METH_VARARGS, NULL},
	 { (char *)"CvvImage_GetImage", _wrap_CvvImage_GetImage, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Destroy", _wrap_CvvImage_Destroy, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Width", _wrap_CvvImage_Width, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Height", _wrap_CvvImage_Height, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Bpp", _wrap_CvvImage_Bpp, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Fill", _wrap_CvvImage_Fill, METH_VARARGS, NULL},
	 { (char *)"CvvImage_Show", _wrap_CvvImage_Show, METH_VARARGS, NULL},
	 { (char *)"CvvImage_swigregister", CvvImage_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CvTreeNodeIterator[] = {{"_p_CvTreeNodeIterator", 0, "CvTreeNodeIterator *", 0, 0, 0, 0},{"_p_CvTreeNodeIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvNArrayIterator[] = {{"_p_CvNArrayIterator", 0, "CvNArrayIterator *", 0, 0, 0, 0},{"_p_CvNArrayIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvLineIterator[] = {{"_p_CvLineIterator", 0, "CvLineIterator *", 0, 0, 0, 0},{"_p_CvLineIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSparseMatIterator[] = {{"_p_CvSparseMatIterator", 0, "CvSparseMatIterator *", 0, 0, 0, 0},{"_p_CvSparseMatIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_int__void[] = {{"_p_f_int__void", 0, "void (*)(int)|CvTrackbarCallback", 0, 0, 0, 0},{"_p_f_int__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_int_int_int_int_p_void__void[] = {{"_p_f_int_int_int_int_p_void__void", 0, "void (*)(int,int,int,int,void *)|CvMouseCallback", 0, 0, 0, 0},{"_p_f_int_int_int_int_p_void__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFileNode[] = {{"_p_CvFileNode", 0, "CvFileNode *", 0, 0, 0, 0},{"_p_CvFileNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvvImage[] = {{"_p_CvvImage", 0, "CvvImage *", 0, 0, 0, 0},{"_p_CvvImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint3D64f[] = {{"_p_CvPoint3D64f", 0, "CvPoint3D64f *", 0, 0, 0, 0},{"_p_CvPoint3D64f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMat[] = {{"_p_CvMat", 0, "CvMat *", 0, 0, 0, 0},{"_p_CvMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvModuleInfo[] = {{"_p_CvModuleInfo", 0, "CvModuleInfo *", 0, 0, 0, 0},{"_p_CvModuleInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplTileInfo[] = {{"_p__IplTileInfo", 0, "_IplTileInfo *|IplTileInfo *", 0, 0, 0, 0},{"_p__IplTileInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *|CvSubdiv2DEdge *", 0, 0, 0, 0},{"_p_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvRect[] = {{"_p_CvRect", 0, "CvRect *", 0, 0, 0, 0},{"_p_CvRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPluginFuncInfo[] = {{"_p_CvPluginFuncInfo", 0, "CvPluginFuncInfo *", 0, 0, 0, 0},{"_p_CvPluginFuncInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatND[] = {{"_p_CvMatND", 0, "CvMatND *", 0, 0, 0, 0},{"_p_CvMatND", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_short[] = {{"_p_unsigned_short", 0, "unsigned short *|ushort *", 0, 0, 0, 0},{"_p_unsigned_short", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplConvKernel[] = {{"_p__IplConvKernel", 0, "_IplConvKernel *|IplConvKernel *", 0, 0, 0, 0},{"_p__IplConvKernel", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphVtx2D[] = {{"_p_CvGraphVtx2D", 0, "CvGraphVtx2D *", 0, 0, 0, 0},{"_p_CvGraphVtx2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSparseNode[] = {{"_p_CvSparseNode", 0, "CvSparseNode *", 0, 0, 0, 0},{"_p_CvSparseNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConnectedComp[] = {{"_p_CvConnectedComp", 0, "CvConnectedComp *", 0, 0, 0, 0},{"_p_CvConnectedComp", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint2D32f[] = {{"_p_CvPoint2D32f", 0, "CvPoint2D32f *", 0, 0, 0, 0},{"_p_CvPoint2D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvAttrList[] = {{"_p_CvAttrList", 0, "CvAttrList *", 0, 0, 0, 0},{"_p_CvAttrList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvScalar[] = {{"_p_CvScalar", 0, "CvScalar *", 0, 0, 0, 0},{"_p_CvScalar", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvContourTree[] = {{"_p_CvContourTree", 0, "CvContourTree *", 0, 0, 0, 0},{"_p_CvContourTree", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFileStorage[] = {{"_p_CvFileStorage", 0, "CvFileStorage *", 0, 0, 0, 0},{"_p_CvFileStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemStorage[] = {{"_p_CvMemStorage", 0, "CvMemStorage *", 0, 0, 0, 0},{"_p_CvMemStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint3D32f[] = {{"_p_CvPoint3D32f", 0, "CvPoint3D32f *", 0, 0, 0, 0},{"_p_CvPoint3D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvTermCriteria[] = {{"_p_CvTermCriteria", 0, "CvTermCriteria *", 0, 0, 0, 0},{"_p_CvTermCriteria", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConDensation[] = {{"_p_CvConDensation", 0, "CvConDensation *", 0, 0, 0, 0},{"_p_CvConDensation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvBox2D[] = {{"_p_CvBox2D", 0, "CvBox2D *", 0, 0, 0, 0},{"_p_CvBox2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2DPointLocation[] = {{"_p_CvSubdiv2DPointLocation", 0, "enum CvSubdiv2DPointLocation *|CvSubdiv2DPointLocation *", 0, 0, 0, 0},{"_p_CvSubdiv2DPointLocation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long_long[] = {{"_p_unsigned_long_long", 0, "unsigned long long *|CvRNG *", 0, 0, 0, 0},{"_p_unsigned_long_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_long_long[] = {{"_p_long_long", 0, "long long *|int64 *", 0, 0, 0, 0},{"_p_long_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeq[] = {{"_p_CvSeq", 0, "CvSeq *", 0, 0, 0, 0},{"_p_CvSeq", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvKalman[] = {{"_p_CvKalman", 0, "CvKalman *", 0, 0, 0, 0},{"_p_CvKalman", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvCapture[] = {{"_p_CvCapture", 0, "CvCapture *", 0, 0, 0, 0},{"_p_CvCapture", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvCapture[] = {{"_p_p_CvCapture", 0, "CvCapture **", 0, 0, 0, 0},{"_p_p_CvCapture", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint[] = {{"_p_CvPoint", 0, "CvPoint *", 0, 0, 0, 0},{"_p_CvPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqReader[] = {{"_p_CvSeqReader", 0, "CvSeqReader *", 0, 0, 0, 0},{"_p_CvSeqReader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGenericHash[] = {{"_p_CvGenericHash", 0, "CvGenericHash *|CvFileNodeHash *", 0, 0, 0, 0},{"_p_CvGenericHash", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSet[] = {{"_p_CvSet", 0, "CvSet *", 0, 0, 0, 0},{"_p_CvSet", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Cv64suf[] = {{"_p_Cv64suf", 0, "Cv64suf *", 0, 0, 0, 0},{"_p_Cv64suf", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqBlock[] = {{"_p_CvSeqBlock", 0, "CvSeqBlock *", 0, 0, 0, 0},{"_p_CvSeqBlock", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphScanner[] = {{"_p_CvGraphScanner", 0, "CvGraphScanner *", 0, 0, 0, 0},{"_p_CvGraphScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConvexityDefect[] = {{"_p_CvConvexityDefect", 0, "CvConvexityDefect *", 0, 0, 0, 0},{"_p_CvConvexityDefect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphEdge[] = {{"_p_CvGraphEdge", 0, "CvGraphEdge *", 0, 0, 0, 0},{"_p_CvGraphEdge", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFilter[] = {{"_p_CvFilter", 0, "enum CvFilter *|CvFilter *", 0, 0, 0, 0},{"_p_CvFilter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHidHaarClassifierCascade[] = {{"_p_CvHidHaarClassifierCascade", 0, "CvHidHaarClassifierCascade *", 0, 0, 0, 0},{"_p_CvHidHaarClassifierCascade", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarClassifierCascade[] = {{"_p_CvHaarClassifierCascade", 0, "CvHaarClassifierCascade *", 0, 0, 0, 0},{"_p_CvHaarClassifierCascade", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSize2D32f[] = {{"_p_CvSize2D32f", 0, "CvSize2D32f *", 0, 0, 0, 0},{"_p_CvSize2D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Cv32suf[] = {{"_p_Cv32suf", 0, "Cv32suf *", 0, 0, 0, 0},{"_p_Cv32suf", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplImage[] = {{"_p__IplImage", 0, "_IplImage *|IplImage *", 0, 0, 0, 0},{"_p__IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatrix3[] = {{"_p_CvMatrix3", 0, "CvMatrix3 *", 0, 0, 0, 0},{"_p_CvMatrix3", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHuMoments[] = {{"_p_CvHuMoments", 0, "CvHuMoments *", 0, 0, 0, 0},{"_p_CvHuMoments", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMoments[] = {{"_p_CvMoments", 0, "CvMoments *", 0, 0, 0, 0},{"_p_CvMoments", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarClassifier[] = {{"_p_CvHaarClassifier", 0, "CvHaarClassifier *", 0, 0, 0, 0},{"_p_CvHaarClassifier", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarStageClassifier[] = {{"_p_CvHaarStageClassifier", 0, "CvHaarStageClassifier *", 0, 0, 0, 0},{"_p_CvHaarStageClassifier", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvNextEdgeType[] = {{"_p_CvNextEdgeType", 0, "enum CvNextEdgeType *|CvNextEdgeType *", 0, 0, 0, 0},{"_p_CvNextEdgeType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvTypeInfo[] = {{"_p_CvTypeInfo", 0, "CvTypeInfo *", 0, 0, 0, 0},{"_p_CvTypeInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemStoragePos[] = {{"_p_CvMemStoragePos", 0, "CvMemStoragePos *", 0, 0, 0, 0},{"_p_CvMemStoragePos", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplConvKernelFP[] = {{"_p__IplConvKernelFP", 0, "_IplConvKernelFP *|IplConvKernelFP *", 0, 0, 0, 0},{"_p__IplConvKernelFP", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvChain[] = {{"_p_CvChain", 0, "CvChain *", 0, 0, 0, 0},{"_p_CvChain", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2D[] = {{"_p_CvSubdiv2D", 0, "CvSubdiv2D *", 0, 0, 0, 0},{"_p_CvSubdiv2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHistogram[] = {{"_p_CvHistogram", 0, "CvHistogram *", 0, 0, 0, 0},{"_p_CvHistogram", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvQuadEdge2D[] = {{"_p_CvQuadEdge2D", 0, "CvQuadEdge2D *", 0, 0, 0, 0},{"_p_CvQuadEdge2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraph[] = {{"_p_CvGraph", 0, "CvGraph *", 0, 0, 0, 0},{"_p_CvGraph", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPOSITObject[] = {{"_p_CvPOSITObject", 0, "CvPOSITObject *", 0, 0, 0, 0},{"_p_CvPOSITObject", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFont[] = {{"_p_CvFont", 0, "CvFont *", 0, 0, 0, 0},{"_p_CvFont", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSetElem[] = {{"_p_CvSetElem", 0, "CvSetElem *", 0, 0, 0, 0},{"_p_CvSetElem", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplROI[] = {{"_p__IplROI", 0, "_IplROI *|IplROI *", 0, 0, 0, 0},{"_p__IplROI", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSlice[] = {{"_p_CvSlice", 0, "CvSlice *", 0, 0, 0, 0},{"_p_CvSlice", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvChainPtReader[] = {{"_p_CvChainPtReader", 0, "CvChainPtReader *", 0, 0, 0, 0},{"_p_CvChainPtReader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvString[] = {{"_p_CvString", 0, "CvString *", 0, 0, 0, 0},{"_p_CvString", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSparseMat[] = {{"_p_CvSparseMat", 0, "CvSparseMat *", 0, 0, 0, 0},{"_p_CvSparseMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2DPoint[] = {{"_p_CvSubdiv2DPoint", 0, "CvSubdiv2DPoint *", 0, 0, 0, 0},{"_p_CvSubdiv2DPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqWriter[] = {{"_p_CvSeqWriter", 0, "CvSeqWriter *", 0, 0, 0, 0},{"_p_CvSeqWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvVideoWriter[] = {{"_p_CvVideoWriter", 0, "CvVideoWriter *", 0, 0, 0, 0},{"_p_CvVideoWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvVideoWriter[] = {{"_p_p_CvVideoWriter", 0, "CvVideoWriter **", 0, 0, 0, 0},{"_p_p_CvVideoWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvContour[] = {{"_p_CvContour", 0, "CvContour *|CvPoint2DSeq *", 0, 0, 0, 0},{"_p_CvContour", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvAvgComp[] = {{"_p_CvAvgComp", 0, "CvAvgComp *", 0, 0, 0, 0},{"_p_CvAvgComp", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSize[] = {{"_p_CvSize", 0, "CvSize *", 0, 0, 0, 0},{"_p_CvSize", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *|uchar *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvStringHashNode[] = {{"_p_CvStringHashNode", 0, "CvStringHashNode *", 0, 0, 0, 0},{"_p_CvStringHashNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemBlock[] = {{"_p_CvMemBlock", 0, "CvMemBlock *", 0, 0, 0, 0},{"_p_CvMemBlock", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphVtx[] = {{"_p_CvGraphVtx", 0, "CvGraphVtx *", 0, 0, 0, 0},{"_p_CvGraphVtx", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint2D64f[] = {{"_p_CvPoint2D64f", 0, "CvPoint2D64f *", 0, 0, 0, 0},{"_p_CvPoint2D64f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarFeature[] = {{"_p_CvHaarFeature", 0, "CvHaarFeature *", 0, 0, 0, 0},{"_p_CvHaarFeature", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CvTreeNodeIterator, 
_swigt__p_CvNArrayIterator, 
_swigt__p_CvLineIterator, 
_swigt__p_CvSparseMatIterator, 
_swigt__p_f_int__void, 
_swigt__p_f_int_int_int_int_p_void__void, 
_swigt__p_CvFileNode, 
_swigt__p_CvvImage, 
_swigt__p_CvPoint3D64f, 
_swigt__p_CvMat, 
_swigt__p_CvModuleInfo, 
_swigt__p__IplTileInfo, 
_swigt__p_size_t, 
_swigt__std__size_t, 
_swigt__size_t, 
_swigt__p_CvRect, 
_swigt__p_CvPluginFuncInfo, 
_swigt__p_CvMatND, 
_swigt__p_unsigned_short, 
_swigt__p__IplConvKernel, 
_swigt__p_CvGraphVtx2D, 
_swigt__p_CvSparseNode, 
_swigt__p_CvConnectedComp, 
_swigt__p_CvPoint2D32f, 
_swigt__p_CvAttrList, 
_swigt__p_CvScalar, 
_swigt__std__ptrdiff_t, 
_swigt__ptrdiff_t, 
_swigt__p_CvContourTree, 
_swigt__p_void, 
_swigt__p_CvFileStorage, 
_swigt__p_CvMemStorage, 
_swigt__p_CvPoint3D32f, 
_swigt__p_int, 
_swigt__p_CvTermCriteria, 
_swigt__p_CvConDensation, 
_swigt__p_CvBox2D, 
_swigt__p_CvSubdiv2DPointLocation, 
_swigt__p_unsigned_long_long, 
_swigt__p_long_long, 
_swigt__p_CvSeq, 
_swigt__p_CvKalman, 
_swigt__p_CvCapture, 
_swigt__p_p_CvCapture, 
_swigt__p_CvPoint, 
_swigt__p_CvSeqReader, 
_swigt__p_CvGenericHash, 
_swigt__p_CvSet, 
_swigt__p_Cv64suf, 
_swigt__p_CvSeqBlock, 
_swigt__p_CvGraphScanner, 
_swigt__p_CvConvexityDefect, 
_swigt__p_CvGraphEdge, 
_swigt__p_CvFilter, 
_swigt__p_CvHidHaarClassifierCascade, 
_swigt__p_CvHaarClassifierCascade, 
_swigt__p_CvSize2D32f, 
_swigt__p_Cv32suf, 
_swigt__p__IplImage, 
_swigt__p_CvMatrix3, 
_swigt__p_CvHuMoments, 
_swigt__p_CvMoments, 
_swigt__p_char, 
_swigt__p_p_char, 
_swigt__p_CvHaarClassifier, 
_swigt__p_CvHaarStageClassifier, 
_swigt__p_CvNextEdgeType, 
_swigt__p_CvTypeInfo, 
_swigt__p_CvMemStoragePos, 
_swigt__p__IplConvKernelFP, 
_swigt__p_CvChain, 
_swigt__p_CvSubdiv2D, 
_swigt__p_CvHistogram, 
_swigt__p_CvQuadEdge2D, 
_swigt__p_CvGraph, 
_swigt__p_CvPOSITObject, 
_swigt__p_CvFont, 
_swigt__p_CvSetElem, 
_swigt__p__IplROI, 
_swigt__p_CvSlice, 
_swigt__p_CvChainPtReader, 
_swigt__p_CvString, 
_swigt__p_CvSparseMat, 
_swigt__p_CvSubdiv2DPoint, 
_swigt__p_CvSeqWriter, 
_swigt__p_CvVideoWriter, 
_swigt__p_p_CvVideoWriter, 
_swigt__p_CvContour, 
_swigt__p_CvAvgComp, 
_swigt__p_CvSize, 
_swigt__p_unsigned_char, 
_swigt__p_CvStringHashNode, 
_swigt__p_CvMemBlock, 
_swigt__p_CvGraphVtx, 
_swigt__p_CvPoint2D64f, 
_swigt__p_CvHaarFeature, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    
    PyEval_InitThreads();
    
    {
        PyDict_SetItemString(d,"CV_WINDOW_AUTOSIZE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_MOUSEMOVE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_LBUTTONDOWN", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_RBUTTONDOWN", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_MBUTTONDOWN", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_LBUTTONUP", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_RBUTTONUP", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_MBUTTONUP", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_LBUTTONDBLCLK", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_RBUTTONDBLCLK", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_MBUTTONDBLCLK", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_LBUTTON", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_RBUTTON", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_MBUTTON", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_CTRLKEY", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_SHIFTKEY", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_EVENT_FLAG_ALTKEY", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"CV_LOAD_IMAGE_COLOR", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_LOAD_IMAGE_GRAYSCALE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_LOAD_IMAGE_UNCHANGED", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CVTIMG_FLIP", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CVTIMG_SWAP_RB", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_ANY", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_MIL", SWIG_From_int((int)(100))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_VFW", SWIG_From_int((int)(200))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_V4L", SWIG_From_int((int)(200))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_V4L2", SWIG_From_int((int)(200))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_FIREWARE", SWIG_From_int((int)(300))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_IEEE1394", SWIG_From_int((int)(300))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_DC1394", SWIG_From_int((int)(300))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_CMU1394", SWIG_From_int((int)(300))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_STEREO", SWIG_From_int((int)(400))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_TYZX", SWIG_From_int((int)(400))); 
    }
    {
        PyDict_SetItemString(d,"CV_TYZX_LEFT", SWIG_From_int((int)(400))); 
    }
    {
        PyDict_SetItemString(d,"CV_TYZX_RIGHT", SWIG_From_int((int)(401))); 
    }
    {
        PyDict_SetItemString(d,"CV_TYZX_COLOR", SWIG_From_int((int)(402))); 
    }
    {
        PyDict_SetItemString(d,"CV_TYZX_Z", SWIG_From_int((int)(403))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_QT", SWIG_From_int((int)(500))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_POS_MSEC", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_POS_FRAMES", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_POS_AVI_RATIO", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_WIDTH", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_HEIGHT", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FPS", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FOURCC", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_COUNT", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_FORMAT", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_MODE", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_BRIGHTNESS", SWIG_From_int((int)(10))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_CONTRAST", SWIG_From_int((int)(11))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_SATURATION", SWIG_From_int((int)(12))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_HUE", SWIG_From_int((int)(13))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_GAIN", SWIG_From_int((int)(14))); 
    }
    {
        PyDict_SetItemString(d,"CV_CAP_PROP_CONVERT_RGB", SWIG_From_int((int)(15))); 
    }
    {
        PyDict_SetItemString(d,"HG_AUTOSIZE", SWIG_From_int((int)(1))); 
    }
}

