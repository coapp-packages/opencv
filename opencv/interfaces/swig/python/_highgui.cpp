/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_NOINCLUDE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypePrettyName  SWIG_Python_TypePrettyName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 
/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

typedef double (*py_objasdbl_conv)(PyObject *obj);

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);


#else


/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,                                  /* Number of items in variable part (ob_size) */
  (char *)"swigvarlink",              /* Type name (tp_name) */
  sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
  0,                                  /* Itemsize (tp_itemsize) */
  0,                                  /* Deallocator (tp_dealloc) */ 
  (printfunc) swig_varlink_print,     /* Print (tp_print) */
  (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
  (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
  0,                                  /* tp_compare */
  (reprfunc) swig_varlink_repr,       /* tp_repr */
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_sequence */
  0,                                  /* tp_as_mapping */
  0,                                  /* tp_hash */
  0,                                  /* tp_call */
  0,                                  /* tp_str */
  0,                                  /* tp_getattro */
  0,                                  /* tp_setattro */
  0,                                  /* tp_as_buffer */
  0,                                  /* tp_flags */
  0,                                  /* tp_doc */
  0,                                  /* tp_traverse */
  0,                                  /* tp_clear */
  0,                                  /* tp_richcompare */
  0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
  0,                                  /* tp_iter */
  0,                                  /* tp_iternext */
  0,                                  /* tp_methods */
  0,                                  /* tp_members */
  0,                                  /* tp_getset */
  0,                                  /* tp_base */
  0,                                  /* tp_dict */
  0,                                  /* tp_descr_get */
  0,                                  /* tp_descr_set */
  0,                                  /* tp_dictoffset */
  0,                                  /* tp_init */
  0,                                  /* tp_alloc */
  0,                                  /* tp_new */
  0,                                  /* tp_free */
  0,                                  /* tp_is_gc */
  0,                                  /* tp_bases */
  0,                                  /* tp_mro */
  0,                                  /* tp_cache */
  0,                                  /* tp_subclasses */
  0,                                  /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030200
  0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
  /* these must be last */
  0,                                  /* tp_alloc */
  0,                                  /* tp_free */
  0,                                  /* tp_maxalloc */
  0,                                  /*  tp_next */
#endif
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      PyErr_Format(PyExc_TypeError, 
		   "Type error. Got %s, expected %s",
		   c, ty->name);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      if (constants[i].pvalue) {
	obj = PyString_FromString((char *) constants[i].pvalue);
      } else {
	Py_INCREF(Py_None);
	obj = Py_None;
      }
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_p_CvCapture swig_types[0] 
#define  SWIGTYPE_p_CvCapture swig_types[1] 
#define  SWIGTYPE_p_IplImage swig_types[2] 
#define  SWIGTYPE_p_CvvImage swig_types[3] 
#define  SWIGTYPE_CvMouseCallback swig_types[4] 
#define  SWIGTYPE_CvTrackbarCallback swig_types[5] 
#define  SWIGTYPE_p_void swig_types[6] 
#define  SWIGTYPE_p_CvSize swig_types[7] 
#define  SWIGTYPE_p_p_char swig_types[8] 
#define  SWIGTYPE_p_char swig_types[9] 
#define  SWIGTYPE_p_p_CvVideoWriter swig_types[10] 
#define  SWIGTYPE_p_CvVideoWriter swig_types[11] 
#define  SWIGTYPE_p_CvRect swig_types[12] 
#define  SWIGTYPE_p_CvArr swig_types[13] 
#define  SWIGTYPE_p_int swig_types[14] 
static swig_type_info *swig_types[16];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _highgui.so
  ------------------------------------------------*/
#define SWIG_init    init_highgui

#define SWIG_name    "_highgui"

/* Auxiliar swig  macros that appear in the header */

#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
#define SWIGSTATICINLINE(a) static inline a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) (new Type[(size)])
#define swig_delete(cptr) delete cptr
#define swig_delete_array(cptr) delete[] cptr
#define swig_const_cast(a,Type) const_cast<Type >(a)
#define swig_static_cast(a,Type) static_cast<Type >(a)
#define swig_reinterpret_cast(a,Type) reinterpret_cast<Type >(a)
#define swig_new_copy(ptr,Type) (new Type(*ptr))
#define swig_numeric_cast(a,Type) static_cast<Type >(a)

#else /* C case */

#define SWIGSTATICINLINE(a) static a
#define SWIGSTATIC(a) static a
#define swig_new_array(size,Type) ((Type*) malloc((size)*sizeof(Type)))
#define swig_delete(cptr) free((char*)cptr)
#define swig_delete_array(cptr) free((char*)cptr)
#define swig_const_cast(a,Type) (Type)(a)
#define swig_static_cast(a,Type) (Type)(a)
#define swig_reinterpret_cast(a,Type) (Type)(a)
#define swig_numeric_cast(a,Type) (Type)(a)
#define swig_new_copy(ptr,Type)  ((Type*)memcpy(malloc(sizeof(Type)),ptr,sizeof(Type)))

#endif /* __cplusplus */


/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_signed_SS_char PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/
/*@/usr/share/swig1.3/python/pymacros.swg,63,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


#include "highgui.h"

extern "C" int cvInitSystem(int,char **);

#include <limits.h>


SWIGSTATICINLINE(int)
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGSTATICINLINE(int)
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a long is expected");
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : 0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = swig_numeric_cast(v, int);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "an int is expected");
  }
  return 0;    
}
#else
SWIGSTATICINLINE(int)
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGSTATICINLINE(int)
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

extern "C" int cvNamedWindow(char const *,int);

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGSTATIC(int)
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    PyErr_SetString(PyExc_TypeError, "a string is expected");
  }
  return 0;
}


SWIGSTATICINLINE(int)
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  char* cptr = 0;
  if (SWIG_AsCharPtrAndSize(obj, &cptr, (size_t*)(0))) {
    if (val) *val = cptr;
    return 1;
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a char* is expected");
  }
  return 0;
}

extern "C" void cvShowImage(char const *,CvArr const *);
extern "C" void cvResizeWindow(char const *,int,int);
extern "C" void cvMoveWindow(char const *,int,int);
extern "C" void cvDestroyWindow(char const *);
extern "C" void cvDestroyAllWindows(void);
extern "C" void *cvGetWindowHandle(char const *);
extern "C" char const *cvGetWindowName(void *);

SWIGSTATICINLINE(PyObject *)
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj(swig_const_cast(cptr,char*), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}

extern "C" int cvCreateTrackbar(char const *,char const *,int *,int,CvTrackbarCallback);
extern "C" int cvGetTrackbarPos(char const *,char const *);
extern "C" void cvSetTrackbarPos(char const *,char const *,int);
extern "C" void cvSetMouseCallback(char const *,CvMouseCallback,void *);
extern "C" IplImage *cvLoadImage(char const *,int);
extern "C" int cvSaveImage(char const *,CvArr const *);
extern "C" void cvConvertImage(CvArr const *,CvArr *,int);
extern "C" int cvWaitKey(int);
extern "C" CvCapture *cvCaptureFromFile(char const *);
extern "C" CvCapture *cvCaptureFromCAM(int);
extern "C" int cvGrabFrame(CvCapture *);
extern "C" IplImage *cvRetrieveFrame(CvCapture *);
extern "C" IplImage *cvQueryFrame(CvCapture *);
extern "C" void cvReleaseCapture(CvCapture **);
extern "C" double cvGetCaptureProperty(CvCapture *,int);
extern "C" int cvSetCaptureProperty(CvCapture *,int,double);

SWIGSTATICINLINE(int)
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    PyErr_SetString(PyExc_TypeError, "a double is expected");
  }
  return 0;
}


SWIGSTATICINLINE(double)
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier.  the other
      solution is throw an exception, but since this code should work
      with plain C ....
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGSTATICINLINE(int)
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}

extern "C" CvVideoWriter *cvCreateVideoWriter(char const *,int,double,CvSize);
extern "C" int cvWriteFrame(CvVideoWriter *,IplImage const *);
extern "C" void cvReleaseVideoWriter(CvVideoWriter **);

SWIGSTATICINLINE(PyObject*)
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_cvInitSystem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char **arg2 = (char **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvInitSystem",&obj0,&obj1)) goto fail;
    arg1 = (int)SWIG_As_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_p_char,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)cvInitSystem(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNamedWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvNamedWindow",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            result = (int)cvNamedWindow((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvShowImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvShowImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    {
        int err = SWIG_ConvertPtr
        (
        obj1,
        (void **) &arg2, 
        SWIGTYPE_p_IplImage, 
        SWIG_POINTER_EXCEPTION
        );
        if (err == -1)
        return 0; 
    }
    {
        try {
            cvShowImage((char const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvResizeWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvResizeWindow",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            cvResizeWindow((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMoveWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMoveWindow",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            cvMoveWindow((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDestroyWindow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvDestroyWindow",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    {
        try {
            cvDestroyWindow((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDestroyAllWindows(PyObject *, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":cvDestroyAllWindows")) goto fail;
    {
        try {
            cvDestroyAllWindows();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetWindowHandle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetWindowHandle",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    {
        try {
            result = (void *)cvGetWindowHandle((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetWindowName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetWindowName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,&arg1,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (char *)cvGetWindowName(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateTrackbar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    CvTrackbarCallback arg5 = (CvTrackbarCallback) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCreateTrackbar",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),SWIGTYPE_p_int,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),SWIGTYPE_CvTrackbarCallback,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)cvCreateTrackbar((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetTrackbarPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetTrackbarPos",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    {
        try {
            result = (int)cvGetTrackbarPos((char const *)arg1,(char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetTrackbarPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetTrackbarPos",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            cvSetTrackbarPos((char const *)arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetMouseCallback(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    CvMouseCallback arg2 = (CvMouseCallback) 0 ;
    void *arg3 = (void *) NULL ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:cvSetMouseCallback",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_CvMouseCallback,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,&arg3,0,SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    }
    {
        try {
            cvSetMouseCallback((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLoadImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 = (int) 1 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:cvLoadImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    if (obj1) {
        arg2 = (int)SWIG_As_int(obj1); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            result = (IplImage *)cvLoadImage((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IplImage, 1);
    {
        cvReleaseImage(& result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSaveImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSaveImage",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    {
        int err = SWIG_ConvertPtr
        (
        obj1,
        (void **) &arg2, 
        SWIGTYPE_p_IplImage, 
        SWIG_POINTER_EXCEPTION
        );
        if (err == -1)
        return 0; 
    }
    {
        try {
            result = (int)cvSaveImage((char const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvertImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 = (int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:cvConvertImage",&obj0,&obj1,&obj2)) goto fail;
    {
        int err = SWIG_ConvertPtr
        (
        obj0,
        (void **) &arg1, 
        SWIGTYPE_p_IplImage, 
        SWIG_POINTER_EXCEPTION
        );
        if (err == -1)
        return 0; 
    }
    {
        int err = SWIG_ConvertPtr
        (
        obj1,
        (void **) &arg2, 
        SWIGTYPE_p_IplImage, 
        SWIG_POINTER_EXCEPTION
        );
        if (err == -1)
        return 0; 
    }
    if (obj2) {
        arg3 = (int)SWIG_As_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            cvConvertImage((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWaitKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:cvWaitKey",&obj0)) goto fail;
    if (obj0) {
        arg1 = (int)SWIG_As_int(obj0); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            result = (int)cvWaitKey(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCaptureFromFile(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    CvCapture *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCaptureFromFile",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    {
        try {
            result = (CvCapture *)cvCaptureFromFile((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvCapture, 1);
    {
        cvReleaseCapture(& result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCaptureFromCAM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    CvCapture *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCaptureFromCAM",&obj0)) goto fail;
    arg1 = (int)SWIG_As_int(obj0); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            result = (CvCapture *)cvCaptureFromCAM(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvCapture, 1);
    {
        cvReleaseCapture(& result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGrabFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGrabFrame",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)cvGrabFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRetrieveFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRetrieveFrame",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (IplImage *)cvRetrieveFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvQueryFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvQueryFrame",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (IplImage *)cvQueryFrame(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseCapture(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture **arg1 = (CvCapture **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseCapture",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            cvReleaseCapture(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetCaptureProperty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetCaptureProperty",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            result = (double)cvGetCaptureProperty(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_double((double)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetCaptureProperty(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvCapture *arg1 = (CvCapture *) 0 ;
    int arg2 ;
    double arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetCaptureProperty",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvCapture,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            result = (int)cvSetCaptureProperty(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateVideoWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    double arg3 ;
    CvSize arg4 ;
    CvVideoWriter *result;
    CvSize *argp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCreateVideoWriter",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (double)SWIG_As_double(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&argp4),SWIGTYPE_p_CvSize,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg4 = *argp4;
    {
        try {
            result = (CvVideoWriter *)cvCreateVideoWriter((char const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvVideoWriter, 1);
    {
        cvReleaseVideoWriter(& result);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteFrame(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvVideoWriter *arg1 = (CvVideoWriter *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvWriteFrame",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvVideoWriter,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_IplImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)cvWriteFrame(arg1,(IplImage const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseVideoWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvVideoWriter **arg1 = (CvVideoWriter **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseVideoWriter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_p_CvVideoWriter,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            cvReleaseVideoWriter(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvvImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvvImage")) goto fail;
    {
        try {
            result = (CvvImage *)new CvvImage();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvvImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvvImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvvImage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Create(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 = (int) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO|O:CvvImage_Create",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    arg4 = (int)SWIG_As_int(obj3); 
    if (PyErr_Occurred()) SWIG_fail;
    if (obj4) {
        arg5 = (int)SWIG_As_int(obj4); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Create(arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Load(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 ;
    int arg3 = (int) 1 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:CvvImage_Load",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    if (obj2) {
        arg3 = (int)SWIG_As_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->Load((char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_LoadRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 ;
    int arg3 ;
    CvRect arg4 ;
    bool result;
    CvRect *argp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:CvvImage_LoadRect",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    arg3 = (int)SWIG_As_int(obj2); 
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **)(&argp4),SWIGTYPE_p_CvRect,
    SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg4 = *argp4;
    {
        try {
            result = (bool)(arg1)->LoadRect((char const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Save(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Save",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->Save((char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_bool((bool)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    CvvImage *arg2 = 0 ;
    int arg3 = (int) -1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:CvvImage_CopyOf",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1)
    SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference");
        SWIG_fail;
    }
    if (obj2) {
        arg3 = (int)SWIG_As_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            (arg1)->CopyOf(*arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    int arg3 = (int) -1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:CvvImage_CopyOf",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),SWIGTYPE_p_IplImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (int)SWIG_As_int(obj2); 
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        try {
            (arg1)->CopyOf(arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_CopyOf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_CvvImage_CopyOf__SWIG_0(self,args);
                }
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_CvvImage_CopyOf__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_CvvImage, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_IplImage, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_CvvImage_CopyOf__SWIG_1(self,args);
                }
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_CvvImage_CopyOf__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'CvvImage_CopyOf'");
    return NULL;
}


static PyObject *_wrap_CvvImage_GetImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_GetImage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (IplImage *)(arg1)->GetImage();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Destroy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Destroy",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            (arg1)->Destroy();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Width(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Width",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Width();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Height(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Height",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Height();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Bpp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvvImage_Bpp",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->Bpp();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((int)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Fill(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Fill",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    arg2 = (int)SWIG_As_int(obj1); 
    if (PyErr_Occurred()) SWIG_fail;
    {
        try {
            (arg1)->Fill(arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvvImage_Show(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvvImage *arg1 = (CvvImage *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvvImage_Show",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),SWIGTYPE_p_CvvImage,
    SWIG_POINTER_EXCEPTION | 0)) == -1) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) SWIG_fail;
    {
        try {
            (arg1)->Show((char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvvImage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvvImage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"cvInitSystem", _wrap_cvInitSystem, METH_VARARGS, NULL },
	 { (char *)"cvNamedWindow", _wrap_cvNamedWindow, METH_VARARGS, NULL },
	 { (char *)"cvShowImage", _wrap_cvShowImage, METH_VARARGS, NULL },
	 { (char *)"cvResizeWindow", _wrap_cvResizeWindow, METH_VARARGS, NULL },
	 { (char *)"cvMoveWindow", _wrap_cvMoveWindow, METH_VARARGS, NULL },
	 { (char *)"cvDestroyWindow", _wrap_cvDestroyWindow, METH_VARARGS, NULL },
	 { (char *)"cvDestroyAllWindows", _wrap_cvDestroyAllWindows, METH_VARARGS, NULL },
	 { (char *)"cvGetWindowHandle", _wrap_cvGetWindowHandle, METH_VARARGS, NULL },
	 { (char *)"cvGetWindowName", _wrap_cvGetWindowName, METH_VARARGS, NULL },
	 { (char *)"cvCreateTrackbar", _wrap_cvCreateTrackbar, METH_VARARGS, NULL },
	 { (char *)"cvGetTrackbarPos", _wrap_cvGetTrackbarPos, METH_VARARGS, NULL },
	 { (char *)"cvSetTrackbarPos", _wrap_cvSetTrackbarPos, METH_VARARGS, NULL },
	 { (char *)"cvSetMouseCallback", _wrap_cvSetMouseCallback, METH_VARARGS, NULL },
	 { (char *)"cvLoadImage", _wrap_cvLoadImage, METH_VARARGS, NULL },
	 { (char *)"cvSaveImage", _wrap_cvSaveImage, METH_VARARGS, NULL },
	 { (char *)"cvConvertImage", _wrap_cvConvertImage, METH_VARARGS, NULL },
	 { (char *)"cvWaitKey", _wrap_cvWaitKey, METH_VARARGS, NULL },
	 { (char *)"cvCaptureFromFile", _wrap_cvCaptureFromFile, METH_VARARGS, NULL },
	 { (char *)"cvCaptureFromCAM", _wrap_cvCaptureFromCAM, METH_VARARGS, NULL },
	 { (char *)"cvGrabFrame", _wrap_cvGrabFrame, METH_VARARGS, NULL },
	 { (char *)"cvRetrieveFrame", _wrap_cvRetrieveFrame, METH_VARARGS, NULL },
	 { (char *)"cvQueryFrame", _wrap_cvQueryFrame, METH_VARARGS, NULL },
	 { (char *)"cvReleaseCapture", _wrap_cvReleaseCapture, METH_VARARGS, NULL },
	 { (char *)"cvGetCaptureProperty", _wrap_cvGetCaptureProperty, METH_VARARGS, NULL },
	 { (char *)"cvSetCaptureProperty", _wrap_cvSetCaptureProperty, METH_VARARGS, NULL },
	 { (char *)"cvCreateVideoWriter", _wrap_cvCreateVideoWriter, METH_VARARGS, NULL },
	 { (char *)"cvWriteFrame", _wrap_cvWriteFrame, METH_VARARGS, NULL },
	 { (char *)"cvReleaseVideoWriter", _wrap_cvReleaseVideoWriter, METH_VARARGS, NULL },
	 { (char *)"new_CvvImage", _wrap_new_CvvImage, METH_VARARGS, NULL },
	 { (char *)"delete_CvvImage", _wrap_delete_CvvImage, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Create", _wrap_CvvImage_Create, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Load", _wrap_CvvImage_Load, METH_VARARGS, NULL },
	 { (char *)"CvvImage_LoadRect", _wrap_CvvImage_LoadRect, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Save", _wrap_CvvImage_Save, METH_VARARGS, NULL },
	 { (char *)"CvvImage_CopyOf", _wrap_CvvImage_CopyOf, METH_VARARGS, NULL },
	 { (char *)"CvvImage_GetImage", _wrap_CvvImage_GetImage, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Destroy", _wrap_CvvImage_Destroy, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Width", _wrap_CvvImage_Width, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Height", _wrap_CvvImage_Height, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Bpp", _wrap_CvvImage_Bpp, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Fill", _wrap_CvvImage_Fill, METH_VARARGS, NULL },
	 { (char *)"CvvImage_Show", _wrap_CvvImage_Show, METH_VARARGS, NULL },
	 { (char *)"CvvImage_swigregister", CvvImage_swigregister, METH_VARARGS, NULL },
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_p_CvCapture[] = {{"_p_p_CvCapture", 0, "CvCapture **", 0, 0, 0, 0},{"_p_p_CvCapture", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvCapture[] = {{"_p_CvCapture", 0, "CvCapture *", 0, 0, 0, 0},{"_p_CvCapture", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_IplImage[] = {{"_p_IplImage", 0, "IplImage *", 0, 0, 0, 0},{"_p_IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvvImage[] = {{"_p_CvvImage", 0, "CvvImage *", 0, 0, 0, 0},{"_p_CvvImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__CvMouseCallback[] = {{"_CvMouseCallback", 0, "void (*)(int,int,int,int,void *)|CvMouseCallback", 0, 0, 0, 0},{"_CvMouseCallback", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__CvTrackbarCallback[] = {{"_CvTrackbarCallback", 0, "void (*)(int)|CvTrackbarCallback", 0, 0, 0, 0},{"_CvTrackbarCallback", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSize[] = {{"_p_CvSize", 0, "CvSize *", 0, 0, 0, 0},{"_p_CvSize", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvVideoWriter[] = {{"_p_p_CvVideoWriter", 0, "CvVideoWriter **", 0, 0, 0, 0},{"_p_p_CvVideoWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvVideoWriter[] = {{"_p_CvVideoWriter", 0, "CvVideoWriter *", 0, 0, 0, 0},{"_p_CvVideoWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvRect[] = {{"_p_CvRect", 0, "CvRect *", 0, 0, 0, 0},{"_p_CvRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvArr[] = {{"_p_CvArr", 0, "CvArr *", 0, 0, 0, 0},{"_p_CvArr", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_p_CvCapture, 
_swigt__p_CvCapture, 
_swigt__p_IplImage, 
_swigt__p_CvvImage, 
_swigt__CvMouseCallback, 
_swigt__CvTrackbarCallback, 
_swigt__p_void, 
_swigt__p_CvSize, 
_swigt__p_p_char, 
_swigt__p_char, 
_swigt__p_p_CvVideoWriter, 
_swigt__p_CvVideoWriter, 
_swigt__p_CvRect, 
_swigt__p_CvArr, 
_swigt__p_int, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,"CV_WINDOW_AUTOSIZE", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CV_EVENT_MOUSEMOVE", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CV_EVENT_LBUTTONDOWN", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CV_EVENT_RBUTTONDOWN", SWIG_From_int((int)2));
    PyDict_SetItemString(d,"CV_EVENT_MBUTTONDOWN", SWIG_From_int((int)3));
    PyDict_SetItemString(d,"CV_EVENT_LBUTTONUP", SWIG_From_int((int)4));
    PyDict_SetItemString(d,"CV_EVENT_RBUTTONUP", SWIG_From_int((int)5));
    PyDict_SetItemString(d,"CV_EVENT_MBUTTONUP", SWIG_From_int((int)6));
    PyDict_SetItemString(d,"CV_EVENT_LBUTTONDBLCLK", SWIG_From_int((int)7));
    PyDict_SetItemString(d,"CV_EVENT_RBUTTONDBLCLK", SWIG_From_int((int)8));
    PyDict_SetItemString(d,"CV_EVENT_MBUTTONDBLCLK", SWIG_From_int((int)9));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_LBUTTON", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_RBUTTON", SWIG_From_int((int)2));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_MBUTTON", SWIG_From_int((int)4));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_CTRLKEY", SWIG_From_int((int)8));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_SHIFTKEY", SWIG_From_int((int)16));
    PyDict_SetItemString(d,"CV_EVENT_FLAG_ALTKEY", SWIG_From_int((int)32));
    PyDict_SetItemString(d,"CV_CVTIMG_FLIP", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CV_CVTIMG_SWAP_RB", SWIG_From_int((int)2));
    PyDict_SetItemString(d,"CV_CAP_ANY", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CV_CAP_MIL", SWIG_From_int((int)100));
    PyDict_SetItemString(d,"CV_CAP_VFW", SWIG_From_int((int)200));
    PyDict_SetItemString(d,"CV_CAP_V4L", SWIG_From_int((int)200));
    PyDict_SetItemString(d,"CV_CAP_V4L2", SWIG_From_int((int)200));
    PyDict_SetItemString(d,"CV_CAP_FIREWARE", SWIG_From_int((int)300));
    PyDict_SetItemString(d,"CV_CAP_IEEE1394", SWIG_From_int((int)300));
    PyDict_SetItemString(d,"CV_CAP_DC1394", SWIG_From_int((int)300));
    PyDict_SetItemString(d,"CV_CAP_CMU1394", SWIG_From_int((int)300));
    PyDict_SetItemString(d,"CV_CAP_PROP_POS_MSEC", SWIG_From_int((int)0));
    PyDict_SetItemString(d,"CV_CAP_PROP_POS_FRAMES", SWIG_From_int((int)1));
    PyDict_SetItemString(d,"CV_CAP_PROP_POS_AVI_RATIO", SWIG_From_int((int)2));
    PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_WIDTH", SWIG_From_int((int)3));
    PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_HEIGHT", SWIG_From_int((int)4));
    PyDict_SetItemString(d,"CV_CAP_PROP_FPS", SWIG_From_int((int)5));
    PyDict_SetItemString(d,"CV_CAP_PROP_FOURCC", SWIG_From_int((int)6));
    PyDict_SetItemString(d,"CV_CAP_PROP_FRAME_COUNT", SWIG_From_int((int)7));
    PyDict_SetItemString(d,"HG_AUTOSIZE", SWIG_From_int((int)1));
}

