/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#define SWIGINTERN static 
#endif

#ifndef SWIGINTERNSHORT
#ifdef __cplusplus
#define SWIGINTERNSHORT static inline 
#else /* C case */
#define SWIGINTERNSHORT static 
#endif /* __cplusplus */
#endif


/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)


/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromUnsignedLong((unsigned long) v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  char buf[100];
  unsigned long x = (unsigned long)v->ptr;
  if (x == 0)
    strcpy(buf, "0");
  else
    PyOS_snprintf(buf, sizeof(buf), "0%lo", x);
  return PyString_FromString(buf);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  char buf[100];
  PyOS_snprintf(buf, sizeof(buf), "0x%lx", (unsigned long)v->ptr);
  return PyString_FromString(buf);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : (i > j) ? 1 : 0;
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_GetType() {
  static char PySwigObject_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static int type_init = 0;  
  static PyTypeObject PySwigObject_Type;

  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigObject",			/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigObject_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigObject_Type = tmp;
    type_init = 1;
  }

  return &PySwigObject_Type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_GetType());
  if (self == NULL) return NULL;
  self->ptr = ptr;
  self->desc = desc;
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return c;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : (i > j) ? 1 : 0;
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_GetType() {
  static char PySwigPacked_Type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static int type_init = 0;
  
  static PyTypeObject PySwigPacked_Type;
  if (!type_init) {
    PyTypeObject tmp = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    "PySwigPacked",			/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0L,0L,0L,0L,
    PySwigPacked_Type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };

    PySwigPacked_Type = tmp;
    type_init = 1;
  }
  
      

  return &PySwigPacked_Type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_GetType());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    memcpy(pack, ptr, size);
    self->pack = pack;
    self->desc = desc;
    self->size = size;
    return (PyObject *) self;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_GetType()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_DECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    sprintf(mesg, "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name);
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_type_info **
SWIG_Python_GetTypeListHandle() {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_type_info **) type_pointer;
}

/*
  Search for a swig_type_info structure
 */
SWIGRUNTIMEINLINE swig_type_info *
SWIG_Python_GetTypeList() {
  swig_type_info **tlh = SWIG_Python_GetTypeListHandle();
  return tlh ? *tlh : (swig_type_info*)0;
}

#define SWIG_Runtime_GetTypeList SWIG_Python_GetTypeList 

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_CvSparseMatIterator swig_types[0] 
#define  SWIGTYPE_p_f_p_q_const__void__int swig_types[1] 
#define  SWIGTYPE_p_CvNArrayIterator swig_types[2] 
#define  SWIGTYPE_p_f_p_q_const__void_p_q_const__void_p_void__int swig_types[3] 
#define  SWIGTYPE_p_CvTreeNodeIterator swig_types[4] 
#define  SWIGTYPE_p_f_p_void_p_void__int swig_types[5] 
#define  SWIGTYPE_p_CvLineIterator swig_types[6] 
#define  SWIGTYPE_p_f_p_p_void__void swig_types[7] 
#define  SWIGTYPE_p_f_p__IplImage_int_int__void swig_types[8] 
#define  SWIGTYPE_p_f_p__IplImage_int__void swig_types[9] 
#define  SWIGTYPE_p_CvFileNode swig_types[10] 
#define  SWIGTYPE_p_CvPoint3D64f swig_types[11] 
#define  SWIGTYPE_p_CvMat swig_types[12] 
#define  SWIGTYPE_p__IplTileInfo swig_types[13] 
#define  SWIGTYPE_std__size_t swig_types[14] 
#define  SWIGTYPE_size_t swig_types[15] 
#define  SWIGTYPE_p_CvModuleInfo swig_types[16] 
#define  SWIGTYPE_p_p_CvMat swig_types[17] 
#define  SWIGTYPE_p_size_t swig_types[18] 
#define  SWIGTYPE_p_CvRect swig_types[19] 
#define  SWIGTYPE_p_CvMatND swig_types[20] 
#define  SWIGTYPE_p_CvPluginFuncInfo swig_types[21] 
#define  SWIGTYPE_p_p_CvMatND swig_types[22] 
#define  SWIGTYPE_p_unsigned_short swig_types[23] 
#define  SWIGTYPE_p_short swig_types[24] 
#define  SWIGTYPE_p__IplConvKernel swig_types[25] 
#define  SWIGTYPE_p_p__IplConvKernel swig_types[26] 
#define  SWIGTYPE_p_CvGraphVtx2D swig_types[27] 
#define  SWIGTYPE_p_CvSparseNode swig_types[28] 
#define  SWIGTYPE_p_CvConnectedComp swig_types[29] 
#define  SWIGTYPE_p_CvPoint2D32f swig_types[30] 
#define  SWIGTYPE_p_f_p_q_const__float_p_q_const__float_p_void__float swig_types[31] 
#define  SWIGTYPE_p_CvAttrList swig_types[32] 
#define  SWIGTYPE_p_a_2__float swig_types[33] 
#define  SWIGTYPE_p_a_3__float swig_types[34] 
#define  SWIGTYPE_p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void swig_types[35] 
#define  SWIGTYPE_p_CvScalar swig_types[36] 
#define  SWIGTYPE_p_a_2__char swig_types[37] 
#define  SWIGTYPE_p_CvRandState swig_types[38] 
#define  SWIGTYPE_std__ptrdiff_t swig_types[39] 
#define  SWIGTYPE_ptrdiff_t swig_types[40] 
#define  SWIGTYPE_p_CvContourTree swig_types[41] 
#define  SWIGTYPE_p_f_p_q_const__void__p_void swig_types[42] 
#define  SWIGTYPE_p_f_p_CvFileStorage_p_CvFileNode__p_void swig_types[43] 
#define  SWIGTYPE_p_void swig_types[44] 
#define  SWIGTYPE_p_p_void swig_types[45] 
#define  SWIGTYPE_p_CvFileStorage swig_types[46] 
#define  SWIGTYPE_p_CvMemStorage swig_types[47] 
#define  SWIGTYPE_p_p_CvMemStorage swig_types[48] 
#define  SWIGTYPE_p_f_size_t_p_void__p_void swig_types[49] 
#define  SWIGTYPE_p_p_CvFileStorage swig_types[50] 
#define  SWIGTYPE_p_CvPoint3D32f swig_types[51] 
#define  SWIGTYPE_p_double swig_types[52] 
#define  SWIGTYPE_p_int swig_types[53] 
#define  SWIGTYPE_p_CvTermCriteria swig_types[54] 
#define  SWIGTYPE_p_CvConDensation swig_types[55] 
#define  SWIGTYPE_p_p_CvConDensation swig_types[56] 
#define  SWIGTYPE_p_CvBox2D swig_types[57] 
#define  SWIGTYPE_p_CvSubdiv2DPointLocation swig_types[58] 
#define  SWIGTYPE_p_unsigned_long_long swig_types[59] 
#define  SWIGTYPE_p_long_long swig_types[60] 
#define  SWIGTYPE_p_CvMatND_data swig_types[61] 
#define  SWIGTYPE_p_CvSeq swig_types[62] 
#define  SWIGTYPE_p_p_CvSeq swig_types[63] 
#define  SWIGTYPE_p_CvMatND_dim swig_types[64] 
#define  SWIGTYPE_p_CvKalman swig_types[65] 
#define  SWIGTYPE_p_p_CvKalman swig_types[66] 
#define  SWIGTYPE_p_CvPoint swig_types[67] 
#define  SWIGTYPE_p_CvSeqReader swig_types[68] 
#define  SWIGTYPE_p_CvGenericHash swig_types[69] 
#define  SWIGTYPE_p_p_CvPoint swig_types[70] 
#define  SWIGTYPE_p_CvSet swig_types[71] 
#define  SWIGTYPE_p_CvSeqBlock swig_types[72] 
#define  SWIGTYPE_p_p_CvSeqBlock swig_types[73] 
#define  SWIGTYPE_p_CvGraphScanner swig_types[74] 
#define  SWIGTYPE_p_p_CvGraphScanner swig_types[75] 
#define  SWIGTYPE_p__CvContourScanner swig_types[76] 
#define  SWIGTYPE_p_p__CvContourScanner swig_types[77] 
#define  SWIGTYPE_p_p_CvGraphEdge swig_types[78] 
#define  SWIGTYPE_p_CvGraphEdge swig_types[79] 
#define  SWIGTYPE_p_CvConvexityDefect swig_types[80] 
#define  SWIGTYPE_p_CvFilter swig_types[81] 
#define  SWIGTYPE_p_CvHidHaarClassifierCascade swig_types[82] 
#define  SWIGTYPE_p_CvHaarClassifierCascade swig_types[83] 
#define  SWIGTYPE_p_p_CvHaarClassifierCascade swig_types[84] 
#define  SWIGTYPE_p_CvSize2D32f swig_types[85] 
#define  SWIGTYPE_p__IplImage swig_types[86] 
#define  SWIGTYPE_p_p__IplImage swig_types[87] 
#define  SWIGTYPE_p_f_p_q_const__IplImage__p__IplImage swig_types[88] 
#define  SWIGTYPE_p_CvMatrix3 swig_types[89] 
#define  SWIGTYPE_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int swig_types[90] 
#define  SWIGTYPE_p_p_char swig_types[91] 
#define  SWIGTYPE_p_char swig_types[92] 
#define  SWIGTYPE_p_CvMoments swig_types[93] 
#define  SWIGTYPE_p_CvHuMoments swig_types[94] 
#define  SWIGTYPE_p_CvHaarClassifier swig_types[95] 
#define  SWIGTYPE_p_CvHaarStageClassifier swig_types[96] 
#define  SWIGTYPE_p_CvNextEdgeType swig_types[97] 
#define  SWIGTYPE_p_CvTypeInfo swig_types[98] 
#define  SWIGTYPE_p_CvMemStoragePos swig_types[99] 
#define  SWIGTYPE_p__IplConvKernelFP swig_types[100] 
#define  SWIGTYPE_p_CvChain swig_types[101] 
#define  SWIGTYPE_p_CvFileNode_data swig_types[102] 
#define  SWIGTYPE_p_CvSubdiv2D swig_types[103] 
#define  SWIGTYPE_p_CvHistogram swig_types[104] 
#define  SWIGTYPE_p_CvQuadEdge2D swig_types[105] 
#define  SWIGTYPE_p_p_CvHistogram swig_types[106] 
#define  SWIGTYPE_p_CvMat_data swig_types[107] 
#define  SWIGTYPE_p_CvGraph swig_types[108] 
#define  SWIGTYPE_p_CvPOSITObject swig_types[109] 
#define  SWIGTYPE_p_p_CvPOSITObject swig_types[110] 
#define  SWIGTYPE_p_CvSetElem swig_types[111] 
#define  SWIGTYPE_p_p_CvSetElem swig_types[112] 
#define  SWIGTYPE_p_CvFont swig_types[113] 
#define  SWIGTYPE_p__IplROI swig_types[114] 
#define  SWIGTYPE_p_f_int_int_int_int_int__p__IplROI swig_types[115] 
#define  SWIGTYPE_p_CvSlice swig_types[116] 
#define  SWIGTYPE_p_CvChainPtReader swig_types[117] 
#define  SWIGTYPE_p_CvString swig_types[118] 
#define  SWIGTYPE_p_CvSparseMat swig_types[119] 
#define  SWIGTYPE_p_p_CvSparseMat swig_types[120] 
#define  SWIGTYPE_p_CvSeqWriter swig_types[121] 
#define  SWIGTYPE_p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage swig_types[122] 
#define  SWIGTYPE_p_p_CvSubdiv2DPoint swig_types[123] 
#define  SWIGTYPE_p_CvSubdiv2DPoint swig_types[124] 
#define  SWIGTYPE_p_CvContour swig_types[125] 
#define  SWIGTYPE_p_unsigned_int swig_types[126] 
#define  SWIGTYPE_p_CvAvgComp swig_types[127] 
#define  SWIGTYPE_p_CvSize swig_types[128] 
#define  SWIGTYPE_p_unsigned_char swig_types[129] 
#define  SWIGTYPE_p_p_unsigned_char swig_types[130] 
#define  SWIGTYPE_p_CvStringHashNode swig_types[131] 
#define  SWIGTYPE_p_CvMemBlock swig_types[132] 
#define  SWIGTYPE_p_CvHaarFeature_rect swig_types[133] 
#define  SWIGTYPE_p_CvGraphVtx swig_types[134] 
#define  SWIGTYPE_p_p_CvGraphVtx swig_types[135] 
#define  SWIGTYPE_p_float swig_types[136] 
#define  SWIGTYPE_p_p_float swig_types[137] 
#define  SWIGTYPE_p_CvPoint2D64f swig_types[138] 
#define  SWIGTYPE_p_CvHaarFeature swig_types[139] 
static swig_type_info *swig_types[141];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _cv.so
  ------------------------------------------------*/
#define SWIG_init    init_cv

#define SWIG_name    "_cv"

#include "cv.h"


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERNSHORT double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


SWIGINTERN int
  SWIG_AsVal_long_SS_long(PyObject *obj, long long *val)
{
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (val) {
    SWIG_type_error("long long", obj);
  }
  return 0;
}


SWIGINTERNSHORT long long
SWIG_As_long_SS_long(PyObject* obj)
{
  long long v;
  if (!SWIG_AsVal_long_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_long_SS_long(PyObject* obj)
{
  return SWIG_AsVal_long_SS_long(obj, (long long*)0);
}


#include <limits.h>


SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long_SS_long(unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : 
    PyInt_FromLong((long)(value)); 
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNSHORT PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNSHORT int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}

static void delete_IplImage(IplImage *self){ IplImage       * dummy = self; cvReleaseImage              (& dummy); }
static void IplImage_imageData_set(IplImage *self,PyObject *object){
        char* py_string = PyString_AsString(object);
        
        if ((self->nChannels == 3) && ((self->depth & 0xff) == 8))
            {
            // RGB case
            // The data is reordered beause OpenCV uses BGR instead of RGB
            
            for (long line = 0; line < self->height; ++line)
                for (long pixel = 0; pixel < self->width; ++pixel)
                    {
                    // In OpenCV the beginning of the lines are aligned
                    // to 4 Bytes. So use widthStep instead of width.
                    long position = line*self->widthStep + pixel*3;
                    long sourcepos = line*self->width*3 + pixel*3;
                    self->imageData[position  ] = py_string[sourcepos+2];
                    self->imageData[position+1] = py_string[sourcepos+1];
                    self->imageData[position+2] = py_string[sourcepos  ];
                    }
            }
        else if ((self->nChannels == 1) && ((self->depth & 0xff) == 8))
            {
            // Grayscale 8bit case
            
            for (long line = 0; line < self->height; ++line)
                {
                // In OpenCV the beginning of the lines are aligned
                // to 4 Bytes. So use widthStep instead of width.
                memcpy
                    (
                    self->imageData + line*self->widthStep,
                    py_string + line*self->width,
                    self->widthStep
                    );
                }
            }
        else if ((self->nChannels == 1) && ((self->depth & 0xff) == 32))
            {
            // Float 32bit case
            
            for (long line = 0; line < self->height; ++line)
                {
                // here we don not have to care about alignment as the Floats are
                // as long as the alignment
                memcpy
                    (
                    self->imageData + line*self->widthStep,
                    py_string + line*self->width*4,
                    self->widthStep
                    );
                }
            }
        }
static PyObject *IplImage_imageData_get(IplImage *self){
        if (self->depth % 8 != 0)
            return 0;
        if (!self->imageData)
            return 0;
        return PyString_FromStringAndSize(self->imageData, self->imageSize);
    }
static void delete_IplConvKernel(IplConvKernel *self){ IplConvKernel  * dummy = self; cvReleaseStructuringElement (& dummy); }

typedef union {
        uchar* ptr;
        short* s;
        int* i;
        float* fl;
        double* db;
    } CvMat_data;


static void delete_CvMat(CvMat *self){ CvMat          * dummy = self; cvReleaseMat                (& dummy); }

typedef struct {
        int size;
        int step;
    } CvMatND_dim;



typedef union {
        uchar* ptr;
        float* fl;
        double* db;
        int* i;
        short* s;
    } CvMatND_data;


static void delete_CvMatND(CvMatND *self){ CvMatND        * dummy = self; cvReleaseMatND              (& dummy); }
static void delete_CvSparseMat(CvSparseMat *self){ CvSparseMat    * dummy = self; cvReleaseSparseMat          (& dummy); }

SWIGINTERNSHORT int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNSHORT unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNSHORT unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}

static void delete_CvHistogram(CvHistogram *self){ CvHistogram    * dummy = self; cvReleaseHist               (& dummy); }

#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNSHORT float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/


SWIGINTERNSHORT unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}

static void delete_CvMemStorage(CvMemStorage *self){ CvMemStorage   * dummy = self; cvReleaseMemStorage         (& dummy); }

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNSHORT int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


typedef union {
        double f;
        int i;
        CvString str;
        CvSeq* seq;
        CvFileNodeHash* map;
    } CvFileNode_data;


static void delete_CvGraphScanner(CvGraphScanner *self){ CvGraphScanner * dummy = self; cvReleaseGraphScanner       (& dummy); }

SWIGINTERNSHORT PyObject* 
  SWIG_From_long_SS_long(long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value)
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
SWIG_AsCharArray(PyObject *obj, char *val, size_t size)
{ 
  char* cptr; size_t csize;  
  if (SWIG_AsCharPtrAndSize(obj, &cptr, &csize)) {
    /* in C you can do:        

         char x[5] = "hello"; 

        ie, assing the array using an extra '0' char.
    */
    if ((csize == size + 1) && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize);
	if (csize < size) memset(val + csize, 0, size - csize);
      }
      return 1;
    }
  }
  if (val) {
    PyErr_Format(PyExc_TypeError,
		 "a char array of maximum size %lu is expected", 
		 (unsigned long) size);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_char(PyObject *obj, char *val)
{
  const char* errmsg = val ? "char" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, CHAR_MIN,CHAR_MAX, errmsg)) {
      if (val) *val = (char)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
    return SWIG_AsCharArray(obj, val, 1);
  }
 }


SWIGINTERNSHORT char
SWIG_As_char(PyObject* obj)
{
  char v;
  if (!SWIG_AsVal_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(char));
  }
  return v;
}

  
SWIGINTERNSHORT int
SWIG_Check_char(PyObject* obj)
{
  return SWIG_AsVal_char(obj, (char*)0);
}


SWIGINTERNSHORT PyObject*
  SWIG_From_char(char c) 
{ 
  return PyString_FromStringAndSize(&c,1);
}

static void delete_CvConDensation(CvConDensation *self){ CvConDensation * dummy = self; cvReleaseConDensation       (& dummy); }
static void delete_CvKalman(CvKalman *self){ CvKalman       * dummy = self; cvReleaseKalman             (& dummy); }

typedef struct {
        CvRect r;
        float weight;
    } CvHaarFeature_rect;


static void delete_CvHaarClassifierCascade(CvHaarClassifierCascade *self){ CvHaarClassifierCascade * dummy = self; cvReleaseHaarClassifierCascade  (& dummy); }

SWIGINTERN PyObject*
t_output_helper(PyObject* target, PyObject* o) {
  if (!target) {
    target = o;
  } else if (target == Py_None) {  
    Py_DECREF(target);
    target = o;
  } else {
    if (!PyList_Check(target)) {
      PyObject *o2 = target;
      target = PyList_New(1);
      PyList_SetItem(target, 0, o2);
    }
    PyList_Append(target,o);
    }
  return target;
}



#include "error.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_cvRound(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRound",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvRound(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFloor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFloor",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvFloor(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCeil(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCeil",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvCeil(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvIsNaN(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvIsNaN",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvIsNaN(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvIsInf(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvIsInf",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvIsInf(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRNG(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int64 arg1 ;
    CvRNG result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRNG",&obj0)) goto fail;
    {
        arg1 = (int64)(SWIG_As_long_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (CvRNG)cvRNG(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRandInt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRNG *arg1 = (CvRNG *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRandInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (unsigned int)cvRandInt(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRandReal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRNG *arg1 = (CvRNG *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRandReal",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (double)cvRandReal(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_ID_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_ID_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->ID = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_ID_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_ID_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->ID);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_nChannels_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_nChannels_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nChannels = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_nChannels_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_nChannels_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nChannels);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_depth_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_depth_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->depth = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_depth_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_depth_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->depth);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_dataOrder_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_dataOrder_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dataOrder = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_dataOrder_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_dataOrder_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->dataOrder);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_origin_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_origin_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->origin = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_origin_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_origin_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->origin);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_align_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_align_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->align = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_align_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_align_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->align);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_width_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_width_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_width_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->width);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->height);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_roi_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    _IplROI *arg2 = (_IplROI *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_roi_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->roi = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_roi_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    _IplROI *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_roi_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (_IplROI *) ((arg1)->roi);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplROI, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_imageSize_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_imageSize_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->imageSize = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_imageSize_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_imageSize_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->imageSize);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_widthStep_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_widthStep_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->widthStep = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_widthStep_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_widthStep_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->widthStep);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IplImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IplImage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_IplImage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_imageData_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplImage_imageData_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    arg2 = obj1;
    {
        try {
            IplImage_imageData_set(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplImage_imageData_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplImage_imageData_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)IplImage_imageData_get(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IplImage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p__IplImage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_IplROI_coi_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplROI_coi_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->coi = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_coi_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplROI_coi_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->coi);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_xOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplROI_xOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->xOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_xOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplROI_xOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->xOffset);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_yOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplROI_yOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->yOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_yOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplROI_yOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->yOffset);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_width_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplROI_width_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplROI_width_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->width);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplROI_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplROI_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplROI_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->height);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IplROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IplROI")) goto fail;
    {
        try {
            result = (IplROI *)new IplROI();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplROI, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IplROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI *arg1 = (IplROI *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IplROI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IplROI_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p__IplROI, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_IplConvKernel_nCols_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_nCols_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nCols = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_nCols_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_nCols_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nCols);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_nRows_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_nRows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nRows = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_nRows_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_nRows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nRows);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_anchorX_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_anchorX_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->anchorX = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_anchorX_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_anchorX_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->anchorX);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_anchorY_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_anchorY_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->anchorY = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_anchorY_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_anchorY_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->anchorY);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_values_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_values_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->values = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_values_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_values_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->values);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_nShiftR_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernel_nShiftR_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nShiftR = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernel_nShiftR_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernel_nShiftR_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nShiftR);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IplConvKernel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel *arg1 = (IplConvKernel *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IplConvKernel",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_IplConvKernel(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IplConvKernel_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p__IplConvKernel, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_IplConvKernelFP_nCols_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernelFP_nCols_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nCols = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_nCols_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernelFP_nCols_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nCols);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_nRows_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernelFP_nRows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->nRows = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_nRows_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernelFP_nRows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->nRows);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_anchorX_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernelFP_anchorX_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->anchorX = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_anchorX_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernelFP_anchorX_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->anchorX);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_anchorY_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernelFP_anchorY_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->anchorY = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_anchorY_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernelFP_anchorY_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->anchorY);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_values_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IplConvKernelFP_values_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->values = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IplConvKernelFP_values_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IplConvKernelFP_values_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->values);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IplConvKernelFP(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IplConvKernelFP")) goto fail;
    {
        try {
            result = (IplConvKernelFP *)new IplConvKernelFP();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplConvKernelFP, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IplConvKernelFP(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernelFP *arg1 = (IplConvKernelFP *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IplConvKernelFP",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplConvKernelFP, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IplConvKernelFP_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p__IplConvKernelFP, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMat_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_step_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_step_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->step = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_step_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_step_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->step);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_refcount_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_refcount_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->refcount = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_refcount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_refcount_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->refcount);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_rows_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_rows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->rows = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_rows_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_rows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->rows);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_cols_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_cols_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->cols = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_cols_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_cols_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->cols);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat_data *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvMat(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMat_data_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    uchar *arg2 = (uchar *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_data_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (uchar *) ((arg1)->ptr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_s_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    short *arg2 = (short *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_data_s_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->s = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_s_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    short *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_s_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short *) ((arg1)->s);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_short, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_i_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_data_i_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->i = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_i_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_i_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->i);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_fl_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_data_fl_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fl = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_fl_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_fl_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->fl);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_db_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    double *arg2 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMat_data_db_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->db = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMat_data_db_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMat_data_db_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *) ((arg1)->db);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMat_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMat_data")) goto fail;
    {
        try {
            result = (CvMat_data *)new CvMat_data();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat_data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMat_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat_data *arg1 = (CvMat_data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMat_data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMat_data_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMat_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    void *arg4 = (void *) 0 ;
    CvMat result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            result = cvMat(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvMat * resultptr;
        resultptr = new CvMat((CvMat &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvMat, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvmGet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvmGet",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvmGet((CvMat const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvmSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvmSet",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvmSet(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCvToIplDepth(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCvToIplDepth",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvCvToIplDepth(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dims_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_dims_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dims = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dims_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_dims_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->dims);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_refcount_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_refcount_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->refcount = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_refcount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_refcount_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->refcount);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dim_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    CvMatND_dim *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_dim_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMatND_dim *)(CvMatND_dim *) ((arg1)->dim);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND_dim, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    CvMatND_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMatND_data *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMatND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMatND",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvMatND(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMatND_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMatND, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMatND_dim_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *arg1 = (CvMatND_dim *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_dim_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_dim, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dim_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *arg1 = (CvMatND_dim *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_dim_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_dim, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dim_step_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *arg1 = (CvMatND_dim *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_dim_step_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_dim, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->step = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_dim_step_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *arg1 = (CvMatND_dim *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_dim_step_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_dim, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->step);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMatND_dim(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMatND_dim")) goto fail;
    {
        try {
            result = (CvMatND_dim *)new CvMatND_dim();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND_dim, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMatND_dim(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_dim *arg1 = (CvMatND_dim *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMatND_dim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_dim, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMatND_dim_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMatND_dim, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMatND_data_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    uchar *arg2 = (uchar *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_data_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (uchar *) ((arg1)->ptr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_fl_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_data_fl_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fl = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_fl_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_fl_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->fl);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_db_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    double *arg2 = (double *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_data_db_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->db = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_db_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_db_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *) ((arg1)->db);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_i_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_data_i_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->i = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_i_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_i_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->i);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_s_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    short *arg2 = (short *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatND_data_s_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_short, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->s = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatND_data_s_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    short *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatND_data_s_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short *) ((arg1)->s);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_short, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMatND_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMatND_data")) goto fail;
    {
        try {
            result = (CvMatND_data *)new CvMatND_data();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND_data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMatND_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND_data *arg1 = (CvMatND_data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMatND_data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMatND_data_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMatND_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSparseMat_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_dims_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_dims_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dims = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_dims_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_dims_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->dims);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_refcount_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_refcount_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->refcount = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_refcount_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_refcount_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->refcount);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_heap_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    CvSet *arg2 = (CvSet *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_heap_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->heap = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_heap_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    CvSet *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_heap_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSet *) ((arg1)->heap);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSet, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_hashtable_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    void **arg2 = (void **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_hashtable_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        void * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->hashtable = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_hashtable_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    void **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_hashtable_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (void **) ((arg1)->hashtable);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_hashsize_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_hashsize_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hashsize = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_hashsize_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_hashsize_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->hashsize);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_valoffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_valoffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->valoffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_valoffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_valoffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->valoffset);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_idxoffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_idxoffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->idxoffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_idxoffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_idxoffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->idxoffset);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMat_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->size);
            size_t ii = 0;
            for (; ii < 32; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMat_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMat_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->size);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSparseMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSparseMat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvSparseMat(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSparseMat_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSparseMat, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSparseNode_hashval_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *arg1 = (CvSparseNode *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseNode_hashval_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hashval = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseNode_hashval_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *arg1 = (CvSparseNode *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseNode_hashval_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->hashval);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseNode_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *arg1 = (CvSparseNode *) 0 ;
    CvSparseNode *arg2 = (CvSparseNode *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseNode_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseNode_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *arg1 = (CvSparseNode *) 0 ;
    CvSparseNode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseNode_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSparseNode *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSparseNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSparseNode")) goto fail;
    {
        try {
            result = (CvSparseNode *)new CvSparseNode();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseNode, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSparseNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseNode *arg1 = (CvSparseNode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSparseNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSparseNode_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSparseNode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSparseMatIterator_mat_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    CvSparseMat *arg2 = (CvSparseMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMatIterator_mat_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->mat = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMatIterator_mat_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    CvSparseMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMatIterator_mat_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSparseMat *) ((arg1)->mat);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMatIterator_node_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    CvSparseNode *arg2 = (CvSparseNode *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMatIterator_node_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSparseNode, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->node = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMatIterator_node_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    CvSparseNode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMatIterator_node_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSparseNode *) ((arg1)->node);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMatIterator_curidx_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSparseMatIterator_curidx_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->curidx = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSparseMatIterator_curidx_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSparseMatIterator_curidx_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->curidx);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSparseMatIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSparseMatIterator")) goto fail;
    {
        try {
            result = (CvSparseMatIterator *)new CvSparseMatIterator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseMatIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSparseMatIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSparseMatIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSparseMatIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSparseMatIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHistogram_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHistogram_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHistogram_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_bins_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHistogram_bins_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|SWIG_POINTER_DISOWN))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    if (arg1) (arg1)->bins = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_bins_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvArr *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHistogram_bins_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvArr *) ((arg1)->bins);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_thresh_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float (*arg2)[2] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHistogram_thresh_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_2__float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float (*inp)[2] = (float (*)[2])(arg2);
        if (inp) {
            float (*dest)[2] = (float (*)[2])(arg1->thresh);
            size_t ii = 0;
            for (; ii < 32; ++ii) {
                float *ip = inp[ii];
                if (ip) {
                    float *dp = dest[ii];
                    size_t jj = 0;
                    for (; jj < 2; ++jj) dp[jj] = ip[jj];
                } else {
                    SWIG_null_ref("float");
                }
            }
        } else {
            SWIG_null_ref("float[2]");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_thresh_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float (*result)[2];
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHistogram_thresh_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float (*)[2])(float (*)[2]) ((arg1)->thresh);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_a_2__float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_thresh2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float **arg2 = (float **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHistogram_thresh2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        float * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_float, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->thresh2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_thresh2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHistogram_thresh2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float **) ((arg1)->thresh2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_mat_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvMatND *arg2 = (CvMatND *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHistogram_mat_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->mat = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHistogram_mat_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvMatND *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHistogram_mat_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMatND *)& ((arg1)->mat);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHistogram(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHistogram",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvHistogram(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHistogram_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHistogram, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvRect_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvRect_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvRect_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->x);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvRect_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvRect_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->y);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_width_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvRect_width_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvRect_width_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->width);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvRect_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvRect_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvRect_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->height);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvRect")) goto fail;
    {
        try {
            result = (CvRect *)new CvRect();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRect, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvRect",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvRect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvRect, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CvRect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvRect",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = cvRect(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvRect * resultptr;
        resultptr = new CvRect((CvRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRectToROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect arg1 ;
    int arg2 ;
    IplROI result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvRectToROI",&obj0,&obj1)) goto fail;
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvRectToROI(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        IplROI * resultptr;
        resultptr = new IplROI((IplROI &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p__IplROI, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvROIToRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplROI arg1 ;
    CvRect result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvROIToRect",&obj0)) goto fail;
    {
        IplROI * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p__IplROI, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("IplROI");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        try {
            result = cvROIToRect(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvRect * resultptr;
        resultptr = new CvRect((CvRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTermCriteria_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTermCriteria_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_max_iter_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTermCriteria_max_iter_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->max_iter = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_max_iter_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTermCriteria_max_iter_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->max_iter);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_epsilon_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTermCriteria_epsilon_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->epsilon = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTermCriteria_epsilon_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTermCriteria_epsilon_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->epsilon);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvTermCriteria(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvTermCriteria")) goto fail;
    {
        try {
            result = (CvTermCriteria *)new CvTermCriteria();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTermCriteria, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvTermCriteria(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria *arg1 = (CvTermCriteria *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvTermCriteria",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvTermCriteria_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvTermCriteria, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvTermCriteria(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    double arg3 ;
    CvTermCriteria result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvTermCriteria",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvTermCriteria(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvTermCriteria * resultptr;
        resultptr = new CvTermCriteria((CvTermCriteria &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvTermCriteria, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *arg1 = (CvPoint *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *arg1 = (CvPoint *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->x);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *arg1 = (CvPoint *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *arg1 = (CvPoint *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->y);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPoint")) goto fail;
    {
        try {
            result = (CvPoint *)new CvPoint();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint *arg1 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPoint_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPoint, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    CvPoint result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvPoint",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvPoint(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint * resultptr;
        resultptr = new CvPoint((CvPoint &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D32f_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint2D32f_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D32f_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint2D32f_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D32f_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint2D32f_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D32f_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint2D32f_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPoint2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPoint2D32f")) goto fail;
    {
        try {
            result = (CvPoint2D32f *)new CvPoint2D32f();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPoint2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPoint2D32f",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPoint2D32f_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPoint2D32f, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvPoint2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    CvPoint2D32f result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvPoint2D32f",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvPoint2D32f(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint2D32f * resultptr;
        resultptr = new CvPoint2D32f((CvPoint2D32f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint2D32f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPointTo32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint arg1 ;
    CvPoint2D32f result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvPointTo32f",&obj0)) goto fail;
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        try {
            result = cvPointTo32f(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint2D32f * resultptr;
        resultptr = new CvPoint2D32f((CvPoint2D32f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint2D32f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPointFrom32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f arg1 ;
    CvPoint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvPointFrom32f",&obj0)) goto fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        try {
            result = cvPointFrom32f(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint * resultptr;
        resultptr = new CvPoint((CvPoint &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D32f_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D32f_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D32f_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D32f_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D32f_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D32f_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D32f_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->z);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPoint3D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPoint3D32f")) goto fail;
    {
        try {
            result = (CvPoint3D32f *)new CvPoint3D32f();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint3D32f, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPoint3D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPoint3D32f",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPoint3D32f_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPoint3D32f, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvPoint3D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    CvPoint3D32f result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPoint3D32f",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvPoint3D32f(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint3D32f * resultptr;
        resultptr = new CvPoint3D32f((CvPoint3D32f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint3D32f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D64f_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *arg1 = (CvPoint2D64f *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint2D64f_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D64f_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *arg1 = (CvPoint2D64f *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint2D64f_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D64f_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *arg1 = (CvPoint2D64f *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint2D64f_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint2D64f_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *arg1 = (CvPoint2D64f *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint2D64f_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPoint2D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPoint2D64f")) goto fail;
    {
        try {
            result = (CvPoint2D64f *)new CvPoint2D64f();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D64f, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPoint2D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D64f *arg1 = (CvPoint2D64f *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPoint2D64f",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPoint2D64f_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPoint2D64f, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvPoint2D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    CvPoint2D64f result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvPoint2D64f",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvPoint2D64f(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint2D64f * resultptr;
        resultptr = new CvPoint2D64f((CvPoint2D64f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint2D64f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D64f_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D64f_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->x);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D64f_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D64f_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->y);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPoint3D64f_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPoint3D64f_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPoint3D64f_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->z);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPoint3D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPoint3D64f")) goto fail;
    {
        try {
            result = (CvPoint3D64f *)new CvPoint3D64f();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint3D64f, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPoint3D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D64f *arg1 = (CvPoint3D64f *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPoint3D64f",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D64f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPoint3D64f_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPoint3D64f, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvPoint3D64f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    CvPoint3D64f result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPoint3D64f",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvPoint3D64f(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint3D64f * resultptr;
        resultptr = new CvPoint3D64f((CvPoint3D64f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint3D64f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize_width_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *arg1 = (CvSize *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSize_width_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *arg1 = (CvSize *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSize_width_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->width);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *arg1 = (CvSize *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSize_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *arg1 = (CvSize *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSize_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->height);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSize")) goto fail;
    {
        try {
            result = (CvSize *)new CvSize();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize *arg1 = (CvSize *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSize_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSize, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    CvSize result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSize",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvSize(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvSize * resultptr;
        resultptr = new CvSize((CvSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize2D32f_width_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *arg1 = (CvSize2D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSize2D32f_width_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->width = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize2D32f_width_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *arg1 = (CvSize2D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSize2D32f_width_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->width);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize2D32f_height_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *arg1 = (CvSize2D32f *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSize2D32f_height_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->height = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSize2D32f_height_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *arg1 = (CvSize2D32f *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSize2D32f_height_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->height);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSize2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSize2D32f")) goto fail;
    {
        try {
            result = (CvSize2D32f *)new CvSize2D32f();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize2D32f, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSize2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize2D32f *arg1 = (CvSize2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSize2D32f",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSize2D32f_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSize2D32f, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvSize2D32f(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    CvSize2D32f result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSize2D32f",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvSize2D32f(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvSize2D32f * resultptr;
        resultptr = new CvSize2D32f((CvSize2D32f &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvSize2D32f, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_center_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvBox2D_center_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->center = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_center_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    CvPoint2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvBox2D_center_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint2D32f *)& ((arg1)->center);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    CvSize2D32f *arg2 = (CvSize2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvBox2D_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSize2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->size = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    CvSize2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvBox2D_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSize2D32f *)& ((arg1)->size);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_angle_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvBox2D_angle_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->angle = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvBox2D_angle_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvBox2D_angle_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->angle);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvBox2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvBox2D")) goto fail;
    {
        try {
            result = (CvBox2D *)new CvBox2D();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvBox2D, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvBox2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D *arg1 = (CvBox2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvBox2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvBox2D_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvBox2D, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSlice_start_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *arg1 = (CvSlice *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSlice_start_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->start_index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSlice_start_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *arg1 = (CvSlice *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSlice_start_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->start_index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSlice_end_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *arg1 = (CvSlice *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSlice_end_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->end_index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSlice_end_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *arg1 = (CvSlice *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSlice_end_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->end_index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSlice")) goto fail;
    {
        try {
            result = (CvSlice *)new CvSlice();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSlice, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice *arg1 = (CvSlice *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSlice",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSlice_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSlice, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    CvSlice result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSlice",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvSlice(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvSlice * resultptr;
        resultptr = new CvSlice((CvSlice &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvSlice, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvScalar_val_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvScalar *arg1 = (CvScalar *) 0 ;
    double *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvScalar_val_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        double *inp = (double *)(arg2);
        if (inp) {
            double *dest = (double *)(arg1->val);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("double");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvScalar_val_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvScalar *arg1 = (CvScalar *) 0 ;
    double *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvScalar_val_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double *)(double *) ((arg1)->val);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_double, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvScalar *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvScalar")) goto fail;
    {
        try {
            result = (CvScalar *)new CvScalar();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvScalar, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvScalar *arg1 = (CvScalar *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvScalar",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvScalar_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvScalar, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvScalar",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = cvScalar(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRealScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRealScalar",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = cvRealScalar(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvScalarAll(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvScalarAll",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = cvScalarAll(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemBlock_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *arg1 = (CvMemBlock *) 0 ;
    CvMemBlock *arg2 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemBlock_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemBlock_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *arg1 = (CvMemBlock *) 0 ;
    CvMemBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemBlock_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemBlock *) ((arg1)->prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemBlock_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *arg1 = (CvMemBlock *) 0 ;
    CvMemBlock *arg2 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemBlock_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemBlock_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *arg1 = (CvMemBlock *) 0 ;
    CvMemBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemBlock_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemBlock *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMemBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMemBlock")) goto fail;
    {
        try {
            result = (CvMemBlock *)new CvMemBlock();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMemBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemBlock *arg1 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMemBlock",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMemBlock_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMemBlock, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMemStorage_signature_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_signature_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->signature = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_signature_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_signature_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->signature);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_bottom_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemBlock *arg2 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_bottom_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->bottom = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_bottom_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_bottom_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemBlock *) ((arg1)->bottom);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_top_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemBlock *arg2 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_top_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->top = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_top_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_top_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemBlock *) ((arg1)->top);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_parent_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_parent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->parent = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_parent_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_parent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->parent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_block_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    size_t arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_block_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->block_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_block_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_block_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->block_size);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_free_space_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    size_t arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStorage_free_space_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->free_space = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStorage_free_space_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStorage_free_space_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->free_space);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMemStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMemStorage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvMemStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMemStorage_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMemStorage, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMemStoragePos_top_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *arg1 = (CvMemStoragePos *) 0 ;
    CvMemBlock *arg2 = (CvMemBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStoragePos_top_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->top = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStoragePos_top_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *arg1 = (CvMemStoragePos *) 0 ;
    CvMemBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStoragePos_top_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemBlock *) ((arg1)->top);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStoragePos_free_space_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *arg1 = (CvMemStoragePos *) 0 ;
    size_t arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMemStoragePos_free_space_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->free_space = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMemStoragePos_free_space_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *arg1 = (CvMemStoragePos *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMemStoragePos_free_space_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->free_space);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMemStoragePos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMemStoragePos")) goto fail;
    {
        try {
            result = (CvMemStoragePos *)new CvMemStoragePos();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStoragePos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMemStoragePos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStoragePos *arg1 = (CvMemStoragePos *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMemStoragePos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMemStoragePos_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMemStoragePos, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSeqBlock_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqBlock_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqBlock_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqBlock_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqBlock_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_start_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqBlock_start_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->start_index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_start_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqBlock_start_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->start_index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqBlock_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqBlock_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqBlock_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->data) delete [] arg1->data;
        if (arg2) {
            arg1->data = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->data,arg2);
        } else {
            arg1->data = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqBlock_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqBlock_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->data);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSeqBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSeqBlock")) goto fail;
    {
        try {
            result = (CvSeqBlock *)new CvSeqBlock();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSeqBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqBlock *arg1 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSeqBlock",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSeqBlock_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSeqBlock, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSeq_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeq_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeq_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeq_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSeq")) goto fail;
    {
        try {
            result = (CvSeq *)new CvSeq();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSeq",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSeq_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSeq, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSetElem_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *arg1 = (CvSetElem *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSetElem_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSetElem_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *arg1 = (CvSetElem *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSetElem_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSetElem_next_free_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *arg1 = (CvSetElem *) 0 ;
    CvSetElem *arg2 = (CvSetElem *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSetElem_next_free_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next_free = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSetElem_next_free_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *arg1 = (CvSetElem *) 0 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSetElem_next_free_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSetElem *) ((arg1)->next_free);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSetElem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSetElem")) goto fail;
    {
        try {
            result = (CvSetElem *)new CvSetElem();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSetElem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSetElem *arg1 = (CvSetElem *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSetElem",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSetElem_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSetElem, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSet_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_free_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSetElem *arg2 = (CvSetElem *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_free_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_free_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_free_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSetElem *) ((arg1)->free_elems);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_active_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSet_active_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->active_count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSet_active_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSet_active_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->active_count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSet")) goto fail;
    {
        try {
            result = (CvSet *)new CvSet();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSet, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSet",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSet_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSet, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvGraphEdge_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphEdge_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphEdge_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_weight_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphEdge_weight_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->weight = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_weight_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphEdge_weight_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->weight);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    CvGraphEdge **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphEdge_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvGraphEdge * *inp = (CvGraphEdge * *)(arg2);
        if (inp) {
            CvGraphEdge * *dest = (CvGraphEdge * *)(arg1->next);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("CvGraphEdge *");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    CvGraphEdge **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphEdge_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphEdge **)(CvGraphEdge **) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_vtx_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    CvGraphVtx **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphEdge_vtx_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvGraphVtx * *inp = (CvGraphVtx * *)(arg2);
        if (inp) {
            CvGraphVtx * *dest = (CvGraphVtx * *)(arg1->vtx);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("CvGraphVtx *");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphEdge_vtx_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    CvGraphVtx **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphEdge_vtx_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphVtx **)(CvGraphVtx **) ((arg1)->vtx);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_CvGraphVtx, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvGraphEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvGraphEdge")) goto fail;
    {
        try {
            result = (CvGraphEdge *)new CvGraphEdge();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvGraphEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphEdge *arg1 = (CvGraphEdge *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvGraphEdge",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvGraphEdge_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvGraphEdge, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvGraphVtx_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *arg1 = (CvGraphVtx *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphVtx_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *arg1 = (CvGraphVtx *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphVtx_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *arg1 = (CvGraphVtx *) 0 ;
    CvGraphEdge *arg2 = (CvGraphEdge *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphVtx_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *arg1 = (CvGraphVtx *) 0 ;
    CvGraphEdge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphVtx_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphEdge *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvGraphVtx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvGraphVtx")) goto fail;
    {
        try {
            result = (CvGraphVtx *)new CvGraphVtx();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphVtx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvGraphVtx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx *arg1 = (CvGraphVtx *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvGraphVtx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvGraphVtx_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvGraphVtx, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvGraphVtx2D_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphVtx2D_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx2D_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphVtx2D_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx2D_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    CvGraphEdge *arg2 = (CvGraphEdge *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphVtx2D_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx2D_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    CvGraphEdge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphVtx2D_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphEdge *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx2D_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphVtx2D_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphVtx2D_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    CvPoint2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphVtx2D_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint2D32f *) ((arg1)->ptr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvGraphVtx2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvGraphVtx2D")) goto fail;
    {
        try {
            result = (CvGraphVtx2D *)new CvGraphVtx2D();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphVtx2D, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvGraphVtx2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphVtx2D *arg1 = (CvGraphVtx2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvGraphVtx2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphVtx2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvGraphVtx2D_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvGraphVtx2D, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvGraph_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_free_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSetElem *arg2 = (CvSetElem *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_free_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_free_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_free_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSetElem *) ((arg1)->free_elems);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_active_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_active_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->active_count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_active_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_active_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->active_count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_edges_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSet *arg2 = (CvSet *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraph_edges_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->edges = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraph_edges_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvSet *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraph_edges_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSet *) ((arg1)->edges);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSet, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvGraph(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvGraph")) goto fail;
    {
        try {
            result = (CvGraph *)new CvGraph();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraph, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvGraph(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvGraph",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvGraph_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvGraph, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvChain_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_origin_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChain_origin_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->origin = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChain_origin_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChain_origin_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *)& ((arg1)->origin);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvChain")) goto fail;
    {
        try {
            result = (CvChain *)new CvChain();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvChain, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvChain(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvChain",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvChain_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvChain, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvContour_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_rect_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvRect *arg2 = (CvRect *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_rect_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->rect = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_rect_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    CvRect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_rect_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvRect *)& ((arg1)->rect);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_color_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_color_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->color = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_color_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_color_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->color);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_reserved_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContour_reserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->reserved);
            size_t ii = 0;
            for (; ii < 3; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContour_reserved_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContour_reserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->reserved);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvContour(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvContour")) goto fail;
    {
        try {
            result = (CvContour *)new CvContour();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvContour, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvContour(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContour *arg1 = (CvContour *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvContour",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContour, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvContour_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvContour, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSeqWriter_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_seq_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_seq_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->seq = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_seq_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_seq_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->seq);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_block_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->block = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_block_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->block);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_min_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_block_min_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_min) delete [] arg1->block_min;
        if (arg2) {
            arg1->block_min = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_min,arg2);
        } else {
            arg1->block_min = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_min_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_block_min_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_min);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_reserved_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqWriter_reserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->reserved);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqWriter_reserved_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqWriter_reserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->reserved);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSeqWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSeqWriter")) goto fail;
    {
        try {
            result = (CvSeqWriter *)new CvSeqWriter();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqWriter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSeqWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSeqWriter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSeqWriter_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSeqWriter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSeqReader_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_seq_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_seq_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->seq = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_seq_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_seq_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->seq);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_block_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->block = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_block_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->block);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_min_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_block_min_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_min) delete [] arg1->block_min;
        if (arg2) {
            arg1->block_min = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_min,arg2);
        } else {
            arg1->block_min = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_min_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_block_min_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_min);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_delta_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_delta_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_delta_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_delta_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_prev_elem_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_prev_elem_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->prev_elem) delete [] arg1->prev_elem;
        if (arg2) {
            arg1->prev_elem = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->prev_elem,arg2);
        } else {
            arg1->prev_elem = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_prev_elem_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_prev_elem_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->prev_elem);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_reserved_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSeqReader_reserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->reserved);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSeqReader_reserved_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSeqReader_reserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->reserved);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSeqReader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSeqReader")) goto fail;
    {
        try {
            result = (CvSeqReader *)new CvSeqReader();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqReader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSeqReader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSeqReader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSeqReader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSeqReader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvAttrList_attr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    char **arg2 = (char **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvAttrList_attr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        char * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->attr = (char const **)arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAttrList_attr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    char **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvAttrList_attr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char **) ((arg1)->attr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAttrList_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    CvAttrList *arg2 = (CvAttrList *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvAttrList_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAttrList_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    CvAttrList *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvAttrList_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvAttrList *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvAttrList, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvAttrList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvAttrList")) goto fail;
    {
        try {
            result = (CvAttrList *)new CvAttrList();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvAttrList, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvAttrList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvAttrList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvAttrList_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvAttrList, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvAttrList(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char **arg1 = (char **) 0 ;
    CvAttrList *arg2 = (CvAttrList *) 0 ;
    CvAttrList result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvAttrList",&obj0,&obj1)) goto fail;
    {
        char * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg1=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = cvAttrList((char const **)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvAttrList * resultptr;
        resultptr = new CvAttrList((CvAttrList &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvAttrList, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvString_len_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *arg1 = (CvString *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvString_len_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->len = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvString_len_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *arg1 = (CvString *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvString_len_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->len);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvString_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *arg1 = (CvString *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvString_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvString_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *arg1 = (CvString *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvString_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvString")) goto fail;
    {
        try {
            result = (CvString *)new CvString();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvString, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvString *arg1 = (CvString *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvString_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvString, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvStringHashNode_hashval_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvStringHashNode_hashval_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hashval = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvStringHashNode_hashval_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvStringHashNode_hashval_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int) ((arg1)->hashval);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvStringHashNode_str_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    CvString *arg2 = (CvString *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvStringHashNode_str_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->str = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvStringHashNode_str_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    CvString *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvStringHashNode_str_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvString *)& ((arg1)->str);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvString, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvStringHashNode_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    CvStringHashNode *arg2 = (CvStringHashNode *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvStringHashNode_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvStringHashNode_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    CvStringHashNode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvStringHashNode_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvStringHashNode *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvStringHashNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvStringHashNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvStringHashNode")) goto fail;
    {
        try {
            result = (CvStringHashNode *)new CvStringHashNode();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvStringHashNode, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvStringHashNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvStringHashNode *arg1 = (CvStringHashNode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvStringHashNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvStringHashNode_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvStringHashNode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvFileNode_tag_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_tag_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tag = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_tag_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_tag_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->tag);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_info_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    CvTypeInfo *arg2 = (CvTypeInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_info_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->info = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_info_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    CvTypeInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_info_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvTypeInfo *) ((arg1)->info);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    CvFileNode_data *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvFileNode_data *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode_data, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvFileNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvFileNode")) goto fail;
    {
        try {
            result = (CvFileNode *)new CvFileNode();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvFileNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvFileNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvFileNode_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvFileNode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvFileNode_data_f_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_data_f_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->f = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_f_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_f_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->f);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_i_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_data_i_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->i = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_i_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_i_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->i);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_str_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvString *arg2 = (CvString *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_data_str_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvString, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->str = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_str_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvString *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_str_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvString *)& ((arg1)->str);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvString, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_seq_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_data_seq_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->seq = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_seq_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_seq_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->seq);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_map_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvFileNodeHash *arg2 = (CvFileNodeHash *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFileNode_data_map_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGenericHash, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->map = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFileNode_data_map_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    CvFileNodeHash *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFileNode_data_map_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvFileNodeHash *) ((arg1)->map);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGenericHash, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvFileNode_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvFileNode_data")) goto fail;
    {
        try {
            result = (CvFileNode_data *)new CvFileNode_data();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode_data, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvFileNode_data(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode_data *arg1 = (CvFileNode_data *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvFileNode_data",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode_data, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvFileNode_data_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvFileNode_data, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvTypeInfo_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvTypeInfo *arg2 = (CvTypeInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvTypeInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvTypeInfo *) ((arg1)->prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvTypeInfo *arg2 = (CvTypeInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvTypeInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvTypeInfo *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_type_name_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_type_name_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg2) {
            arg1->type_name = (char const *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->type_name,arg2);
        } else {
            arg1->type_name = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_type_name_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_type_name_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->type_name);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_is_instance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvIsInstanceFunc arg2 = (CvIsInstanceFunc) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_is_instance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_q_const__void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->is_instance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_is_instance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvIsInstanceFunc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_is_instance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvIsInstanceFunc) ((arg1)->is_instance);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_q_const__void__int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_release_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvReleaseFunc arg2 = (CvReleaseFunc) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_release_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_p_void__void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->release = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_release_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvReleaseFunc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_release_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvReleaseFunc) ((arg1)->release);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_p_void__void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_read_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvReadFunc arg2 = (CvReadFunc) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_read_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_CvFileStorage_p_CvFileNode__p_void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->read = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_read_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvReadFunc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_read_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvReadFunc) ((arg1)->read);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_CvFileStorage_p_CvFileNode__p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_write_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvWriteFunc arg2 = (CvWriteFunc) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_write_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->write = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_write_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvWriteFunc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_write_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvWriteFunc) ((arg1)->write);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_clone_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvCloneFunc arg2 = (CvCloneFunc) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTypeInfo_clone_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_q_const__void__p_void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->clone = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTypeInfo_clone_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    CvCloneFunc result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTypeInfo_clone_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvCloneFunc) ((arg1)->clone);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_p_q_const__void__p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvTypeInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvTypeInfo")) goto fail;
    {
        try {
            result = (CvTypeInfo *)new CvTypeInfo();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvTypeInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvTypeInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvTypeInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvTypeInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvPluginFuncInfo_func_addr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    void **arg2 = (void **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPluginFuncInfo_func_addr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        void * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->func_addr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_func_addr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    void **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPluginFuncInfo_func_addr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (void **) ((arg1)->func_addr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_default_func_addr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPluginFuncInfo_default_func_addr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|SWIG_POINTER_DISOWN))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    if (arg1) (arg1)->default_func_addr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_default_func_addr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPluginFuncInfo_default_func_addr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (void *) ((arg1)->default_func_addr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_func_names_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPluginFuncInfo_func_names_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg2) {
            arg1->func_names = (char const *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->func_names,arg2);
        } else {
            arg1->func_names = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_func_names_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPluginFuncInfo_func_names_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->func_names);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_search_modules_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPluginFuncInfo_search_modules_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->search_modules = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_search_modules_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPluginFuncInfo_search_modules_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->search_modules);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_loaded_from_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvPluginFuncInfo_loaded_from_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->loaded_from = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvPluginFuncInfo_loaded_from_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvPluginFuncInfo_loaded_from_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->loaded_from);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvPluginFuncInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvPluginFuncInfo")) goto fail;
    {
        try {
            result = (CvPluginFuncInfo *)new CvPluginFuncInfo();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPluginFuncInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvPluginFuncInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPluginFuncInfo *arg1 = (CvPluginFuncInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvPluginFuncInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvPluginFuncInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvPluginFuncInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvModuleInfo_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    CvModuleInfo *arg2 = (CvModuleInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvModuleInfo_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    CvModuleInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvModuleInfo_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvModuleInfo *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvModuleInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_name_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvModuleInfo_name_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg2) {
            arg1->name = (char const *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->name,arg2);
        } else {
            arg1->name = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_name_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvModuleInfo_name_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->name);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_version_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvModuleInfo_version_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg2) {
            arg1->version = (char const *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->version,arg2);
        } else {
            arg1->version = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_version_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvModuleInfo_version_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->version);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_func_tab_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    CvPluginFuncInfo *arg2 = (CvPluginFuncInfo *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvModuleInfo_func_tab_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPluginFuncInfo, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->func_tab = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvModuleInfo_func_tab_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    CvPluginFuncInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvModuleInfo_func_tab_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPluginFuncInfo *) ((arg1)->func_tab);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPluginFuncInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvModuleInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvModuleInfo")) goto fail;
    {
        try {
            result = (CvModuleInfo *)new CvModuleInfo();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvModuleInfo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvModuleInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvModuleInfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvModuleInfo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvModuleInfo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvAlloc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    size_t arg1 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvAlloc",&obj0)) goto fail;
    {
        arg1 = (size_t)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (void *)cvAlloc(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void **arg1 = (void **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFree",&obj0)) goto fail;
    {
        void * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvFree(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateImageHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize arg1 ;
    int arg2 ;
    int arg3 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateImageHeader",&obj0,&obj1,&obj2)) goto fail;
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (IplImage *)cvCreateImageHeader(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitImageHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    CvSize arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvInitImageHeader",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (IplImage *)cvInitImageHeader(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSize arg1 ;
    int arg2 ;
    int arg3 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateImage",&obj0,&obj1,&obj2)) goto fail;
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (IplImage *)cvCreateImage(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseImageHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage **arg1 = (IplImage **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseImageHeader",&obj0)) goto fail;
    {
        IplImage * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p__IplImage, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseImageHeader(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage **arg1 = (IplImage **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseImage",&obj0)) goto fail;
    {
        IplImage * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p__IplImage, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseImage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCloneImage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IplImage *)cvCloneImage((IplImage const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetImageCOI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetImageCOI",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvSetImageCOI(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetImageCOI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetImageCOI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvGetImageCOI((IplImage const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetImageROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    CvRect arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetImageROI",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            cvSetImageROI(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvResetImageROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvResetImageROI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvResetImageROI(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetImageROI(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    CvRect result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetImageROI",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = cvGetImageROI((IplImage const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvRect * resultptr;
        resultptr = new CvRect((CvRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateMatHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateMatHeader",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvCreateMatHeader(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitMatHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    void *arg5 = (void *) 0 ;
    int arg6 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvInitMatHeader",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvInitMatHeader(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateMat",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvCreateMat(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat **arg1 = (CvMat **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseMat",&obj0)) goto fail;
    {
        CvMat * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvMat, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseMat(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDecRefData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvDecRefData",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            cvDecRefData(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvIncRefData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvIncRefData",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvIncRefData(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCloneMat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvMat *)cvCloneMat((CvMat const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSubRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvRect arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetSubRect",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            result = (CvMat *)cvGetSubRect((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRows(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvGetRows",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetRows((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetRow",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetRow((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetCols(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    int arg4 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetCols",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetCols((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetCol(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetCol",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetCol((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetDiag(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetDiag",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetDiag((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvScalarToRawData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvScalar *arg1 = (CvScalar *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvScalarToRawData",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvScalarToRawData((CvScalar const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRawDataToScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    int arg2 ;
    CvScalar *arg3 = (CvScalar *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvRawDataToScalar",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvRawDataToScalar((void const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateMatNDHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int *arg2 = (int *) 0 ;
    int arg3 ;
    CvMatND *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCreateMatNDHeader",&obj0,&obj1)) goto fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg1 = PyList_Size (obj0);
        
        /* allocate the needed memory */
        arg2 = (int *)malloc (arg1 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg1; i++) {
            PyObject *item = PyList_GetItem (obj0, i);
            arg2 [i] = (int)PyInt_AsLong (item);
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMatND *)cvCreateMatNDHeader(arg1,(int const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateMatND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int *arg2 = (int *) 0 ;
    int arg3 ;
    CvMatND *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCreateMatND",&obj0,&obj1)) goto fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg1 = PyList_Size (obj0);
        
        /* allocate the needed memory */
        arg2 = (int *)malloc (arg1 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg1; i++) {
            PyObject *item = PyList_GetItem (obj0, i);
            arg2 [i] = (int)PyInt_AsLong (item);
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvMatND *)cvCreateMatND(arg1,(int const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitMatNDHeader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    void *arg5 = (void *) 0 ;
    CvMatND *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvInitMatNDHeader",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg2 = PyList_Size (obj1);
        
        /* allocate the needed memory */
        arg3 = (int *)malloc (arg2 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg2; i++) {
            PyObject *item = PyList_GetItem (obj1, i);
            arg3 [i] = (int)PyInt_AsLong (item);
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        try {
            result = (CvMatND *)cvInitMatNDHeader(arg1,arg2,(int const *)arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseMatND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND **arg1 = (CvMatND **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseMatND",&obj0)) goto fail;
    {
        CvMatND * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvMatND, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseMatND(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneMatND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatND *arg1 = (CvMatND *) 0 ;
    CvMatND *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCloneMatND",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvMatND *)cvCloneMatND((CvMatND const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatND, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSparseMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int *arg2 = (int *) 0 ;
    int arg3 ;
    CvSparseMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCreateSparseMat",&obj0,&obj1)) goto fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg1 = PyList_Size (obj0);
        
        /* allocate the needed memory */
        arg2 = (int *)malloc (arg1 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg1; i++) {
            PyObject *item = PyList_GetItem (obj0, i);
            arg2 [i] = (int)PyInt_AsLong (item);
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvSparseMat *)cvCreateSparseMat(arg1,(int const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseSparseMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat **arg1 = (CvSparseMat **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseSparseMat",&obj0)) goto fail;
    {
        CvSparseMat * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvSparseMat, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseSparseMat(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneSparseMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    CvSparseMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCloneSparseMat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSparseMat *)cvCloneSparseMat((CvSparseMat const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseMat, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitSparseMatIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMat *arg1 = (CvSparseMat *) 0 ;
    CvSparseMatIterator *arg2 = (CvSparseMatIterator *) 0 ;
    CvSparseNode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvInitSparseMatIterator",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvSparseNode *)cvInitSparseMatIterator((CvSparseMat const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetNextSparseNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSparseMatIterator *arg1 = (CvSparseMatIterator *) 0 ;
    CvSparseNode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetNextSparseNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSparseMatIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSparseNode *)cvGetNextSparseNode(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSparseNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_dims_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_dims_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dims = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_dims_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_dims_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->dims);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    CvSize *arg2 = (CvSize *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->size = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    CvSize *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSize *)& ((arg1)->size);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    uchar **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_unsigned_char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        uchar * *inp = (uchar * *)(arg2);
        if (inp) {
            uchar * *dest = (uchar * *)(arg1->ptr);
            size_t ii = 0;
            for (; ii < 10; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("uchar *");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    uchar **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (uchar **)(uchar **) ((arg1)->ptr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_stack_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_stack_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->stack);
            size_t ii = 0;
            for (; ii < 32; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_stack_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_stack_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->stack);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_hdr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    CvMatND **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvNArrayIterator_hdr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvMatND * *inp = (CvMatND * *)(arg2);
        if (inp) {
            CvMatND * *dest = (CvMatND * *)(arg1->hdr);
            size_t ii = 0;
            for (; ii < 10; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("CvMatND *");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvNArrayIterator_hdr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    CvMatND **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvNArrayIterator_hdr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMatND **)(CvMatND **) ((arg1)->hdr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_CvMatND, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvNArrayIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvNArrayIterator")) goto fail;
    {
        try {
            result = (CvNArrayIterator *)new CvNArrayIterator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvNArrayIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvNArrayIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvNArrayIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvNArrayIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvNArrayIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvInitNArrayIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    CvArr **arg2 = (CvArr **) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvMatND *arg4 = (CvMatND *) 0 ;
    CvNArrayIterator *arg5 = (CvNArrayIterator *) 0 ;
    int arg6 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvInitNArrayIterator",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        CvArr * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg2=&buffer; 
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMatND, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (int)cvInitNArrayIterator(arg1,arg2,(CvArr const *)arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNextNArraySlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvNArrayIterator *arg1 = (CvNArrayIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvNextNArraySlice",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvNArrayIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvNextNArraySlice(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetElemType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetElemType",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvGetElemType((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetDims(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetDims",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvGetDims((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetDimSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetDimSize",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (int)cvGetDimSize((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPtr1D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int *arg3 = (int *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPtr1D",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (uchar *)cvPtr1D((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPtr2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int *arg4 = (int *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvPtr2D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (uchar *)cvPtr2D((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPtr3D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int *arg5 = (int *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvPtr3D",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            result = (uchar *)cvPtr3D((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPtrND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    unsigned int *arg5 = (unsigned int *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvPtrND",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_unsigned_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            result = (uchar *)cvPtrND((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGet1D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGet1D",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvGet1D((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGet2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGet2D",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvGet2D((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGet3D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGet3D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = cvGet3D((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetND",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = cvGetND((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetReal1D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetReal1D",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetReal1D((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetReal2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetReal2D",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetReal2D((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetReal3D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetReal3D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetReal3D((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRealND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetRealND",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (double)cvGetRealND((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSet1D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    CvScalar arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSet1D",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            cvSet1D(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSet2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    CvScalar arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSet2D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        try {
            cvSet2D(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSet3D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSet3D",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvSet3D(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    CvScalar arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetND",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            cvSetND(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetReal1D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetReal1D",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetReal1D(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetReal2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSetReal2D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvSetReal2D(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetReal3D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSetReal3D",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvSetReal3D(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetRealND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetRealND",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetRealND(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvClearND",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvClearND(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetMat",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvGetMat((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    IplImage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetImage",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (IplImage *)cvGetImage((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplImage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReshapeMatND(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    int arg5 ;
    int *arg6 = (int *) 0 ;
    CvArr *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvReshapeMatND",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            result = (CvArr *)cvReshapeMatND((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReshape(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int arg3 ;
    int arg4 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReshape",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvMat *)cvReshape((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRepeat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvRepeat",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvRepeat((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateData",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            cvCreateData(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseData",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            cvReleaseData(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetData",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetData(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRawData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    uchar **arg2 = (uchar **) 0 ;
    int *arg3 = (int *) 0 ;
    CvSize *arg4 = (CvSize *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetRawData",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        uchar * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_unsigned_char, 1)) == -1) return 0; arg2=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvGetRawData((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvSize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetSize",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = cvGetSize((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvSize * resultptr;
        resultptr = new CvSize((CvSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCopy(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCopy",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvCopy((CvArr const *)arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSet",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvSet(arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetZero(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSetZero",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            cvSetZero(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSplit(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSplit",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        try {
            cvSplit((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMerge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvMerge",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        try {
            cvMerge((CvArr const *)arg1,(CvArr const *)arg2,(CvArr const *)arg3,(CvArr const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvertScale(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvConvertScale",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvConvertScale((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvertScaleAbs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvConvertScaleAbs",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvConvertScaleAbs((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCheckTermCriteria(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTermCriteria arg1 ;
    double arg2 ;
    int arg3 ;
    CvTermCriteria result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCheckTermCriteria",&obj0,&obj1,&obj2)) goto fail;
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvCheckTermCriteria(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvTermCriteria * resultptr;
        resultptr = new CvTermCriteria((CvTermCriteria &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvTermCriteria, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAdd(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvAdd",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvAdd((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAddS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvAddS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvAddS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSub(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSub",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvSub((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSubS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvSubS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubRS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSubRS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvSubRS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMul(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMul",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvMul((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDiv(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvDiv",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvDiv((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvScaleAdd(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvScaleAdd",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvScaleAdd((CvArr const *)arg1,arg2,(CvArr const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAddWeighted(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    double arg5 ;
    CvArr *arg6 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvAddWeighted",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            cvAddWeighted((CvArr const *)arg1,arg2,(CvArr const *)arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDotProduct(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvDotProduct",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            result = (double)cvDotProduct((CvArr const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAnd(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvAnd",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvAnd((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAndS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvAndS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvAndS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvOr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvOr",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvOr((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvOrS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvOrS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvOrS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvXor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvXor",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvXor((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvXorS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvXorS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvXorS((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNot(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvNot",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvNot((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInRange(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvInRange",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvInRange((CvArr const *)arg1,(CvArr const *)arg2,(CvArr const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInRangeS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    CvScalar arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvInRangeS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvInRangeS((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCmp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCmp",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvCmp((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCmpS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCmpS",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvCmpS((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMin(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMin",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvMin((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMax(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMax",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvMax((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMinS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMinS",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvMinS((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMaxS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMaxS",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvMaxS((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAbsDiff(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvAbsDiff",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvAbsDiff((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAbsDiffS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvScalar arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvAbsDiffS",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            cvAbsDiffS((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCartToPolar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCartToPolar",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvCartToPolar((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPolarToCart(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvPolarToCart",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvPolarToCart((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPow(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPow",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvPow((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvExp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvExp",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvExp((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLog(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvLog",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvLog((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFastArctan(PyObject *, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    float arg2 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvFastArctan",&obj0,&obj1)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (float)cvFastArctan(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCbrt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCbrt",&obj0)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (float)cvCbrt(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCheckArr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCheckArr",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (int)cvCheckArr((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRandArr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRNG *arg1 = (CvRNG *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    CvScalar arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvRandArr",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_unsigned_long_long, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvRandArr(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSolveCubic(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSolveCubic",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvSolveCubic((CvMat const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCrossProduct(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCrossProduct",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvCrossProduct((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGEMM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    double arg5 ;
    CvArr *arg6 = (CvArr *) 0 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvGEMM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvGEMM((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTransform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *arg4 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvTransform",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvTransform((CvArr const *)arg1,arg2,(CvMat const *)arg3,(CvMat const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPerspectiveTransform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPerspectiveTransform",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvPerspectiveTransform((CvArr const *)arg1,arg2,(CvMat const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMulTransposed(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMulTransposed",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvMulTransposed((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTranspose(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvTranspose",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvTranspose((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFlip(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvFlip",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvFlip((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSVD(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSVD",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvSVD(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSVBkSb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvSVBkSb",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvSVBkSb((CvArr const *)arg1,(CvArr const *)arg2,(CvArr const *)arg3,(CvArr const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInvert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvInvert",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvInvert((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSolve(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSolve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (int)cvSolve((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvDet",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (double)cvDet((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTrace(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvTrace",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = cvTrace((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEigenVV(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvEigenVV",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvEigenVV(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetIdentity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetIdentity",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            cvSetIdentity(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcCovarMatrix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr **arg1 = (CvArr **) 0 ;
    int arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCalcCovarMatrix",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        CvArr * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvCalcCovarMatrix((CvArr const **)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMahalanobis(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMahalanobis",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            result = (double)cvMahalanobis((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSum(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSum",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = cvSum((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCountNonZero(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCountNonZero",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvCountNonZero((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAvg(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvAvg",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            result = cvAvg((CvArr const *)arg1,(CvArr const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAvgSdv(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvScalar *arg2 = (CvScalar *) 0 ;
    CvScalar *arg3 = (CvScalar *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvAvgSdv",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvAvgSdv((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMinMaxLoc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    double *arg2 = (double *) 0 ;
    double *arg3 = (double *) 0 ;
    CvPoint *arg4 = (CvPoint *) 0 ;
    CvPoint *arg5 = (CvPoint *) 0 ;
    CvArr *arg6 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvMinMaxLoc",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_double, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            cvMinMaxLoc((CvArr const *)arg1,arg2,arg3,arg4,arg5,(CvArr const *)arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNorm(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvNorm",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            result = (double)cvNorm((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDFT(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvDFT",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvDFT((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMulSpectrums(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMulSpectrums",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvMulSpectrums((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetOptimalDFTSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetOptimalDFTSize",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvGetOptimalDFTSize(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDCT(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvDCT",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvDCT((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSliceLength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSlice arg1 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSliceLength",&obj0,&obj1)) goto fail;
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvSliceLength(arg1,(CvSeq const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateMemStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateMemStorage",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (CvMemStorage *)cvCreateMemStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateChildMemStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateChildMemStorage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvMemStorage *)cvCreateChildMemStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseMemStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage **arg1 = (CvMemStorage **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseMemStorage",&obj0)) goto fail;
    {
        CvMemStorage * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvMemStorage, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseMemStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearMemStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearMemStorage",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearMemStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSaveMemStoragePos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemStoragePos *arg2 = (CvMemStoragePos *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSaveMemStoragePos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvSaveMemStoragePos((CvMemStorage const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRestoreMemStoragePos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    CvMemStoragePos *arg2 = (CvMemStoragePos *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvRestoreMemStoragePos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStoragePos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvRestoreMemStoragePos(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMemStorageAlloc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    size_t arg2 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvMemStorageAlloc",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (void *)cvMemStorageAlloc(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMemStorageAllocString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMemStorage *arg1 = (CvMemStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    CvString result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMemStorageAllocString",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = cvMemStorageAllocString(arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvString * resultptr;
        resultptr = new CvString((CvString &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvString, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvMemStorage *arg4 = (CvMemStorage *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCreateSeq",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvCreateSeq(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetSeqBlockSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetSeqBlockSize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvSetSeqBlockSize(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPush(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqPush",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            result = (char *)cvSeqPush(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPushFront(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqPushFront",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            result = (char *)cvSeqPushFront(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPop(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqPop",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvSeqPop(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPopFront(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqPopFront",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvSeqPopFront(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPushMulti(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSeqPushMulti",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvSeqPushMulti(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPopMulti(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSeqPopMulti",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvSeqPopMulti(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqInsert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    void *arg3 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSeqInsert",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            result = (char *)cvSeqInsert(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqRemove(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqRemove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvSeqRemove(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearSeq",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearSeq(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSeqElem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetSeqElem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (char *)cvGetSeqElem((CvSeq const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqElemIdx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    CvSeqBlock **arg3 = (CvSeqBlock **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSeqElemIdx",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvSeqBlock * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvSeqBlock, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            result = (int)cvSeqElemIdx((CvSeq const *)arg1,(void const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartAppendToSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqWriter *arg2 = (CvSeqWriter *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvStartAppendToSeq",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvStartAppendToSeq(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartWriteSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvMemStorage *arg4 = (CvMemStorage *) 0 ;
    CvSeqWriter *arg5 = (CvSeqWriter *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvStartWriteSeq",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            cvStartWriteSeq(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEndWriteSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvEndWriteSeq",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvEndWriteSeq(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFlushSeqWriter(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFlushSeqWriter",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvFlushSeqWriter(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartReadSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSeqReader *arg2 = (CvSeqReader *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvStartReadSeq",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvStartReadSeq((CvSeq const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSeqReaderPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetSeqReaderPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvGetSeqReaderPos(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetSeqReaderPos(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetSeqReaderPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetSeqReaderPos(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCvtSeqToArray(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    CvSlice arg3 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCvtSeqToArray",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            result = (void *)cvCvtSeqToArray((CvSeq const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMakeSeqHeaderForArray(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    void *arg4 = (void *) 0 ;
    int arg5 ;
    CvSeq *arg6 = (CvSeq *) 0 ;
    CvSeqBlock *arg7 = (CvSeqBlock *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvMakeSeqHeaderForArray",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(7)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvMakeSeqHeaderForArray(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSlice arg2 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    int arg4 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSeqSlice",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvSeqSlice((CvSeq const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCloneSeq",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvCloneSeq((CvSeq const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqRemoveSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvSlice arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSeqRemoveSlice",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            cvSeqRemoveSlice(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqInsertSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    int arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSeqInsertSlice",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvSeqInsertSlice(arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqSort(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvCmpFunc arg2 = (CvCmpFunc) 0 ;
    void *arg3 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSeqSort",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_q_const__void_p_q_const__void_p_void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvSeqSort(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqSearch(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    void *arg2 = (void *) 0 ;
    CvCmpFunc arg3 = (CvCmpFunc) 0 ;
    int arg4 ;
    int *arg5 = (int *) 0 ;
    void *arg6 = (void *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvSeqSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_f_p_q_const__void_p_q_const__void_p_void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            result = (char *)cvSeqSearch(arg1,(void const *)arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqInvert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSeqInvert",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvSeqInvert(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSeqPartition(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvSeq **arg3 = (CvSeq **) 0 ;
    CvCmpFunc arg4 = (CvCmpFunc) 0 ;
    void *arg5 = (void *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSeqPartition",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvSeq * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvSeq, 1)) == -1) return 0; arg3=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_f_p_q_const__void_p_q_const__void_p_void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvSeqPartition((CvSeq const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvChangeSeqBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqReader *arg1 = (CvSeqReader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvChangeSeqBlock",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvChangeSeqBlock(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSeqBlock(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeqWriter *arg1 = (CvSeqWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCreateSeqBlock",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeqWriter, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvCreateSeqBlock(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvMemStorage *arg4 = (CvMemStorage *) 0 ;
    CvSet *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCreateSet",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (CvSet *)cvCreateSet(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSet, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetAdd(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSetElem *arg2 = (CvSetElem *) 0 ;
    CvSetElem **arg3 = (CvSetElem **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetAdd",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvSetElem * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvSetElem, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            result = (int)cvSetAdd(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetNew(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSetNew",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSetElem *)cvSetNew(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetRemoveByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetRemoveByPtr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvSetRemoveByPtr(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetRemove(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSetRemove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvSetRemove(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSetElem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    int arg2 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetSetElem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (CvSetElem *)cvGetSetElem((CvSet const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSet *arg1 = (CvSet *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearSet",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearSet(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateGraph(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CvMemStorage *arg5 = (CvMemStorage *) 0 ;
    CvGraph *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCreateGraph",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            result = (CvGraph *)cvCreateGraph(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraph, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphAddVtx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    CvGraphVtx **arg3 = (CvGraphVtx **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGraphAddVtx",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvGraphVtx * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvGraphVtx, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            result = (int)cvGraphAddVtx(arg1,(CvGraphVtx const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphRemoveVtx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGraphRemoveVtx",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (int)cvGraphRemoveVtx(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphRemoveVtxByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGraphRemoveVtxByPtr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvGraphRemoveVtxByPtr(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphAddEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    int arg3 ;
    CvGraphEdge *arg4 = (CvGraphEdge *) 0 ;
    CvGraphEdge **arg5 = (CvGraphEdge **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvGraphAddEdge",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        CvGraphEdge * buffer; if ((SWIG_ConvertPtr(obj4, (void **) &buffer, SWIGTYPE_p_CvGraphEdge, 1)) == -1) return 0; arg5=&buffer; 
    }
    {
        try {
            result = (int)cvGraphAddEdge(arg1,arg2,arg3,(CvGraphEdge const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphAddEdgeByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    CvGraphVtx *arg3 = (CvGraphVtx *) 0 ;
    CvGraphEdge *arg4 = (CvGraphEdge *) 0 ;
    CvGraphEdge **arg5 = (CvGraphEdge **) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvGraphAddEdgeByPtr",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        CvGraphEdge * buffer; if ((SWIG_ConvertPtr(obj4, (void **) &buffer, SWIGTYPE_p_CvGraphEdge, 1)) == -1) return 0; arg5=&buffer; 
    }
    {
        try {
            result = (int)cvGraphAddEdgeByPtr(arg1,arg2,arg3,(CvGraphEdge const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphRemoveEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGraphRemoveEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvGraphRemoveEdge(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphRemoveEdgeByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    CvGraphVtx *arg3 = (CvGraphVtx *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGraphRemoveEdgeByPtr",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvGraphRemoveEdgeByPtr(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindGraphEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    int arg3 ;
    CvGraphEdge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvFindGraphEdge",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvGraphEdge *)cvFindGraphEdge((CvGraph const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindGraphEdgeByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    CvGraphVtx *arg3 = (CvGraphVtx *) 0 ;
    CvGraphEdge *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvFindGraphEdgeByPtr",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (CvGraphEdge *)cvFindGraphEdgeByPtr((CvGraph const *)arg1,(CvGraphVtx const *)arg2,(CvGraphVtx const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearGraph(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearGraph",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearGraph(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphVtxDegree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGraphVtxDegree",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (int)cvGraphVtxDegree((CvGraph const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGraphVtxDegreeByPtr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGraphVtxDegreeByPtr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (int)cvGraphVtxDegreeByPtr((CvGraph const *)arg1,(CvGraphVtx const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_vtx_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_vtx_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->vtx = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_vtx_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphVtx *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_vtx_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphVtx *) ((arg1)->vtx);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphVtx, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_dst_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_dst_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->dst = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_dst_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphVtx *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_dst_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphVtx *) ((arg1)->dst);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphVtx, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_edge_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphEdge *arg2 = (CvGraphEdge *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_edge_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphEdge, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->edge = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_edge_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraphEdge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_edge_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraphEdge *) ((arg1)->edge);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphEdge, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_graph_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraph *arg2 = (CvGraph *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_graph_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->graph = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_graph_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvGraph *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_graph_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvGraph *) ((arg1)->graph);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraph, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_stack_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_stack_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->stack = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_stack_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_stack_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->stack);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_mask_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvGraphScanner_mask_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mask = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvGraphScanner_mask_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvGraphScanner_mask_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->mask);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvGraphScanner(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvGraphScanner",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvGraphScanner(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvGraphScanner_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvGraphScanner, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvCreateGraphScanner(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvGraphVtx *arg2 = (CvGraphVtx *) 0 ;
    int arg3 ;
    CvGraphScanner *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateGraphScanner",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvGraphVtx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvGraphScanner *)cvCreateGraphScanner(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraphScanner, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseGraphScanner(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner **arg1 = (CvGraphScanner **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseGraphScanner",&obj0)) goto fail;
    {
        CvGraphScanner * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvGraphScanner, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseGraphScanner(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNextGraphItem(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraphScanner *arg1 = (CvGraphScanner *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvNextGraphItem",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraphScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvNextGraphItem(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCloneGraph(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvGraph *arg1 = (CvGraph *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvGraph *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCloneGraph",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvGraph, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvGraph *)cvCloneGraph((CvGraph const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvGraph, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvPoint arg3 ;
    CvScalar arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvLine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvLine(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRectangle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvPoint arg3 ;
    CvScalar arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvRectangle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvRectangle(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCircle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    int arg3 ;
    CvScalar arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvCircle",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvCircle(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEllipse(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvSize arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    CvScalar arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:cvEllipse",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj6, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
        arg7 = *argp;
    }
    {
        arg8 = (int)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (int)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (int)(SWIG_As_int(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        try {
            cvEllipse(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEllipseBox(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvBox2D arg2 ;
    CvScalar arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvEllipseBox",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvBox2D * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvBox2D");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvEllipseBox(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFillConvexPoly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    int arg3 ;
    CvScalar arg4 ;
    int arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvFillConvexPoly",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvFillConvexPoly(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFillPoly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint **arg2 = (CvPoint **) 0 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    CvScalar arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvFillPoly",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_CvPoint, 1)) == -1) return 0; arg2=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvFillPoly(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPolyLine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint **arg2 = (CvPoint **) 0 ;
    int *arg3 = (int *) 0 ;
    int arg4 ;
    int arg5 ;
    CvScalar arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:cvPolyLine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_CvPoint, 1)) == -1) return 0; arg2=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
        arg6 = *argp;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (int)(SWIG_As_int(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (int)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        try {
            cvPolyLine(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_font_face_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_font_face_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->font_face = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_font_face_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_font_face_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->font_face);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_ascii_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_ascii_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ascii = (int const *)arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_ascii_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_ascii_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->ascii);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_greek_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_greek_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->greek = (int const *)arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_greek_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_greek_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->greek);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_cyrillic_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_cyrillic_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->cyrillic = (int const *)arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_cyrillic_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_cyrillic_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->cyrillic);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_hscale_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_hscale_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hscale = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_hscale_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_hscale_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->hscale);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_vscale_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_vscale_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vscale = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_vscale_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_vscale_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->vscale);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_shear_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_shear_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->shear = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_shear_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_shear_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->shear);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_thickness_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_thickness_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->thickness = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_thickness_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_thickness_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->thickness);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_dx_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_dx_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->dx = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_dx_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_dx_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->dx);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_line_type_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvFont_line_type_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->line_type = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvFont_line_type_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvFont_line_type_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->line_type);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvFont(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvFont")) goto fail;
    {
        try {
            result = (CvFont *)new CvFont();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFont, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvFont(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvFont",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvFont_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvFont, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvInitFont(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFont *arg1 = (CvFont *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    int arg6 ;
    int arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvInitFont",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvInitFont(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPutText(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    char *arg2 = (char *) 0 ;
    CvPoint arg3 ;
    CvFont *arg4 = (CvFont *) 0 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvPutText",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvPutText(arg1,(char const *)arg2,arg3,(CvFont const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetTextSize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvFont *arg2 = (CvFont *) 0 ;
    CvSize *arg3 = (CvSize *) 0 ;
    int *arg4 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetTextSize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFont, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvGetTextSize((char const *)arg1,(CvFont const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvColorToScalar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    int arg2 ;
    CvScalar result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvColorToScalar",&obj0,&obj1)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvColorToScalar(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvScalar * resultptr;
        resultptr = new CvScalar((CvScalar &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvScalar, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDrawContours(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    CvScalar arg3 ;
    CvScalar arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    CvPoint arg8 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cvDrawContours",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj7, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
        arg8 = *argp;
    }
    {
        try {
            cvDrawContours(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLUT(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvLUT",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvLUT((CvArr const *)arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_node_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTreeNodeIterator_node_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|SWIG_POINTER_DISOWN))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    if (arg1) (arg1)->node = (void const *)arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_node_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTreeNodeIterator_node_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (void *) ((arg1)->node);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_level_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTreeNodeIterator_level_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->level = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_level_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTreeNodeIterator_level_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->level);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_max_level_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvTreeNodeIterator_max_level_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->max_level = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvTreeNodeIterator_max_level_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvTreeNodeIterator_max_level_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->max_level);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvTreeNodeIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvTreeNodeIterator")) goto fail;
    {
        try {
            result = (CvTreeNodeIterator *)new CvTreeNodeIterator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTreeNodeIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvTreeNodeIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvTreeNodeIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvTreeNodeIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvTreeNodeIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvInitTreeNodeIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvInitTreeNodeIterator",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvInitTreeNodeIterator(arg1,(void const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNextTreeNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvNextTreeNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (void *)cvNextTreeNode(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPrevTreeNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTreeNodeIterator *arg1 = (CvTreeNodeIterator *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvPrevTreeNode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTreeNodeIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (void *)cvPrevTreeNode(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInsertNodeIntoTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    void *arg2 = (void *) 0 ;
    void *arg3 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvInsertNodeIntoTree",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvInsertNodeIntoTree(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRemoveNodeFromTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    void *arg2 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvRemoveNodeFromTree",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        try {
            cvRemoveNodeFromTree(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTreeToNodeSeq(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    int arg2 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvTreeToNodeSeq",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvTreeToNodeSeq((void const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvKMeans2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvTermCriteria arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvKMeans2",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        try {
            cvKMeans2((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRegisterModule(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvModuleInfo *arg1 = (CvModuleInfo *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRegisterModule",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvModuleInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)cvRegisterModule((CvModuleInfo const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvUseOptimized(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvUseOptimized",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvUseOptimized(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetModuleInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    char **arg2 = (char **) 0 ;
    char **arg3 = (char **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetModuleInfo",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg2=&buffer; 
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            cvGetModuleInfo((char const *)arg1,(char const **)arg2,(char const **)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetErrStatus(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvGetErrStatus")) goto fail;
    {
        try {
            result = (int)cvGetErrStatus();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetErrStatus(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSetErrStatus",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            cvSetErrStatus(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetErrMode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvGetErrMode")) goto fail;
    {
        try {
            result = (int)cvGetErrMode();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetErrMode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSetErrMode",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvSetErrMode(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvError(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvError",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvError(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvErrorStr(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvErrorStr",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (char *)cvErrorStr(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetErrInfo(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char **arg1 = (char **) 0 ;
    char **arg2 = (char **) 0 ;
    char **arg3 = (char **) 0 ;
    int *arg4 = (int *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetErrInfo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        char * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg2=&buffer; 
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg3=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (int)cvGetErrInfo((char const **)arg1,(char const **)arg2,(char const **)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvErrorFromIppStatus(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvErrorFromIppStatus",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (int)cvErrorFromIppStatus(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRedirectError(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvErrorCallback arg1 = (CvErrorCallback) 0 ;
    void *arg2 = (void *) 0 ;
    void **arg3 = (void **) 0 ;
    CvErrorCallback result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvRedirectError",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        void * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            result = (CvErrorCallback)cvRedirectError(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNulDevReport(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    void *arg6 = (void *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvNulDevReport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvNulDevReport(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStdErrReport(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    void *arg6 = (void *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvStdErrReport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvStdErrReport(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGuiBoxReport(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    void *arg6 = (void *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvGuiBoxReport",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvGuiBoxReport(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetMemoryManager(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAllocFunc arg1 = (CvAllocFunc) 0 ;
    CvFreeFunc arg2 = (CvFreeFunc) 0 ;
    void *arg3 = (void *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetMemoryManager",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_f_size_t_p_void__p_void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p_void_p_void__int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvSetMemoryManager(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetIPLAllocators(PyObject *, PyObject *args) {
    PyObject *resultobj;
    Cv_iplCreateImageHeader arg1 = (Cv_iplCreateImageHeader) 0 ;
    Cv_iplAllocateImageData arg2 = (Cv_iplAllocateImageData) 0 ;
    Cv_iplDeallocate arg3 = (Cv_iplDeallocate) 0 ;
    Cv_iplCreateROI arg4 = (Cv_iplCreateROI) 0 ;
    Cv_iplCloneImage arg5 = (Cv_iplCloneImage) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSetIPLAllocators",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_f_p__IplImage_int_int__void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_f_p__IplImage_int__void, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_f_int_int_int_int_int__p__IplROI, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_f_p_q_const__IplImage__p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            cvSetIPLAllocators(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvOpenFileStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    int arg3 ;
    CvFileStorage *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvOpenFileStorage",&obj0,&obj1,&obj2)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvFileStorage *)cvOpenFileStorage((char const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileStorage, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseFileStorage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage **arg1 = (CvFileStorage **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseFileStorage",&obj0)) goto fail;
    {
        CvFileStorage * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvFileStorage, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseFileStorage(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAttrValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAttrList *arg1 = (CvAttrList *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvAttrValue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (char *)cvAttrValue((CvAttrList const *)arg1,(char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartWriteStruct(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    char *arg4 = (char *) 0 ;
    CvAttrList arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvStartWriteStruct",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        CvAttrList * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvAttrList");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvStartWriteStruct(arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEndWriteStruct(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvEndWriteStruct",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvEndWriteStruct(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteInt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvWriteInt",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvWriteInt(arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteReal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    double arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvWriteReal",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvWriteReal(arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvWriteString",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvWriteString(arg1,(char const *)arg2,(char const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteComment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvWriteComment",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvWriteComment(arg1,(char const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWrite(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    void *arg3 = (void *) 0 ;
    CvAttrList arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvWrite",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        CvAttrList * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvAttrList");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        try {
            cvWrite(arg1,(char const *)arg2,(void const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartNextStream(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvStartNextStream",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvStartNextStream(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteRawData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    char *arg4 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvWriteRawData",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        try {
            cvWriteRawData(arg1,(void const *)arg2,arg3,(char const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetHashedKey(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int arg4 ;
    CvStringHashNode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetHashedKey",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvStringHashNode *)cvGetHashedKey(arg1,(char const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvStringHashNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRootFileNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    int arg2 ;
    CvFileNode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetRootFileNode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (CvFileNode *)cvGetRootFileNode((CvFileStorage const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetFileNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    CvStringHashNode *arg3 = (CvStringHashNode *) 0 ;
    int arg4 ;
    CvFileNode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvGetFileNode",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvStringHashNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvFileNode *)cvGetFileNode(arg1,arg2,(CvStringHashNode const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetFileNodeByName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    char *arg3 = (char *) 0 ;
    CvFileNode *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetFileNodeByName",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        try {
            result = (CvFileNode *)cvGetFileNodeByName((CvFileStorage const *)arg1,(CvFileNode const *)arg2,(char const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvFileNode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadInt(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvReadInt",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (int)cvReadInt((CvFileNode const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadIntByName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReadIntByName",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (int)cvReadIntByName((CvFileStorage const *)arg1,(CvFileNode const *)arg2,(char const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadReal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    double arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvReadReal",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (double)cvReadReal((CvFileNode const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadRealByName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    char *arg3 = (char *) 0 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReadRealByName",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (double)cvReadRealByName((CvFileStorage const *)arg1,(CvFileNode const *)arg2,(char const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadString(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvReadString",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        try {
            result = (char *)cvReadString((CvFileNode const *)arg1,(char const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadStringByName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReadStringByName",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        try {
            result = (char *)cvReadStringByName((CvFileStorage const *)arg1,(CvFileNode const *)arg2,(char const *)arg3,(char const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRead(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    CvAttrList *arg3 = (CvAttrList *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvRead",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (void *)cvRead(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadByName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    char *arg3 = (char *) 0 ;
    CvAttrList *arg4 = (CvAttrList *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReadByName",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (void *)cvReadByName(arg1,(CvFileNode const *)arg2,(char const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartReadRawData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    CvSeqReader *arg3 = (CvSeqReader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvStartReadRawData",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvStartReadRawData((CvFileStorage const *)arg1,(CvFileNode const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadRawDataSlice(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvSeqReader *arg2 = (CvSeqReader *) 0 ;
    int arg3 ;
    void *arg4 = (void *) 0 ;
    char *arg5 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvReadRawDataSlice",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    if (!SWIG_AsCharPtr(obj4, (char**)&arg5)) {
        SWIG_arg_fail(5);SWIG_fail;
    }
    {
        try {
            cvReadRawDataSlice((CvFileStorage const *)arg1,arg2,arg3,arg4,(char const *)arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadRawData(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    CvFileNode *arg2 = (CvFileNode *) 0 ;
    void *arg3 = (void *) 0 ;
    char *arg4 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvReadRawData",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        try {
            cvReadRawData((CvFileStorage const *)arg1,(CvFileNode const *)arg2,arg3,(char const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWriteFileNode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileStorage *arg1 = (CvFileStorage *) 0 ;
    char *arg2 = (char *) 0 ;
    CvFileNode *arg3 = (CvFileNode *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvWriteFileNode",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvWriteFileNode(arg1,(char const *)arg2,(CvFileNode const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetFileNodeName(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvFileNode *arg1 = (CvFileNode *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvGetFileNodeName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvFileNode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (char *)cvGetFileNodeName((CvFileNode const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRegisterType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *arg1 = (CvTypeInfo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRegisterType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvTypeInfo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvRegisterType((CvTypeInfo const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvUnregisterType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvUnregisterType",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            cvUnregisterType((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFirstType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvTypeInfo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvFirstType")) goto fail;
    {
        try {
            result = (CvTypeInfo *)cvFirstType();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindType(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvTypeInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFindType",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        try {
            result = (CvTypeInfo *)cvFindType((char const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTypeOf(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    CvTypeInfo *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvTypeOf",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (CvTypeInfo *)cvTypeOf((void const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvTypeInfo, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRelease(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void **arg1 = (void **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvRelease",&obj0)) goto fail;
    {
        void * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvRelease(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClone(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClone",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (void *)cvClone((void const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSave(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    void *arg2 = (void *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    CvAttrList arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSave",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        CvAttrList * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvAttrList, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvAttrList");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvSave((char const *)arg1,(void const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLoad(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    char *arg3 = (char *) 0 ;
    char **arg4 = (char **) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvLoad",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    {
        char * buffer; if ((SWIG_ConvertPtr(obj3, (void **) &buffer, SWIGTYPE_p_char, 1)) == -1) return 0; arg4=&buffer; 
    }
    {
        try {
            result = (void *)cvLoad((char const *)arg1,arg2,(char const *)arg3,(char const **)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetTickCount(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int64 result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvGetTickCount")) goto fail;
    {
        try {
            result = (int64)cvGetTickCount();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_long_SS_long((long long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetTickFrequency(PyObject *, PyObject *args) {
    PyObject *resultobj;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)":cvGetTickFrequency")) goto fail;
    {
        try {
            result = (double)cvGetTickFrequency();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m00_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m00_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m00 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m00_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m00_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m00);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m10_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m10_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m10 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m10_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m10_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m10);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m01_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m01_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m01 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m01_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m01_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m01);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m20_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m20_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m20 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m20_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m20_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m20);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m11_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m11_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m11 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m11_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m11_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m11);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m02_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m02_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m02 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m02_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m02_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m02);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m30_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m30_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m30 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m30_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m30_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m30);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m21_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m21_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m21 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m21_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m21_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m21);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m12_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m12_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m12 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m12_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m12_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m12);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m03_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_m03_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->m03 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_m03_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_m03_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->m03);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu20_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu20_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu20 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu20_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu20_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu20);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu11_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu11_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu11 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu11_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu11_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu11);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu02_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu02_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu02 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu02_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu02_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu02);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu30_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu30_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu30 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu30_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu30_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu30);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu21_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu21_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu21 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu21_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu21_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu21);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu12_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu12_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu12 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu12_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu12_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu12);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu03_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_mu03_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->mu03 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_mu03_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_mu03_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->mu03);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_inv_sqrt_m00_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMoments_inv_sqrt_m00_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->inv_sqrt_m00 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMoments_inv_sqrt_m00_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMoments_inv_sqrt_m00_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->inv_sqrt_m00);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMoments")) goto fail;
    {
        try {
            result = (CvMoments *)new CvMoments();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMoments, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMoments",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMoments_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMoments, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHuMoments_hu1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu2);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu3_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu3_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu3 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu3_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu3_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu3);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu4_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu4_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu4 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu4_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu4_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu4);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu5_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu5_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu5 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu5_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu5_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu5);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu6_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu6_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu6 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu6_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu6_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu6);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu7_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHuMoments_hu7_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hu7 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHuMoments_hu7_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHuMoments_hu7_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->hu7);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvHuMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvHuMoments")) goto fail;
    {
        try {
            result = (CvHuMoments *)new CvHuMoments();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHuMoments, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHuMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHuMoments *arg1 = (CvHuMoments *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHuMoments",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHuMoments_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHuMoments, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvLineIterator_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    uchar *arg2 = (uchar *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_unsigned_char, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->ptr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    uchar *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (uchar *) ((arg1)->ptr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_unsigned_char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_err_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_err_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->err = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_err_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_err_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->err);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_plus_delta_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_plus_delta_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->plus_delta = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_plus_delta_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_plus_delta_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->plus_delta);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_minus_delta_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_minus_delta_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->minus_delta = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_minus_delta_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_minus_delta_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->minus_delta);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_plus_step_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_plus_step_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->plus_step = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_plus_step_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_plus_step_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->plus_step);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_minus_step_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvLineIterator_minus_step_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->minus_step = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvLineIterator_minus_step_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvLineIterator_minus_step_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->minus_step);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvLineIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvLineIterator")) goto fail;
    {
        try {
            result = (CvLineIterator *)new CvLineIterator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvLineIterator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvLineIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvLineIterator *arg1 = (CvLineIterator *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvLineIterator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvLineIterator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvLineIterator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvConnectedComp_area_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConnectedComp_area_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->area = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_area_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConnectedComp_area_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->area);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_value_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvScalar *arg2 = (CvScalar *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConnectedComp_value_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->value = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_value_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvScalar *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConnectedComp_value_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvScalar *)& ((arg1)->value);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvScalar, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_rect_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvRect *arg2 = (CvRect *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConnectedComp_rect_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->rect = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_rect_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvRect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConnectedComp_rect_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvRect *)& ((arg1)->rect);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_contour_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConnectedComp_contour_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->contour = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConnectedComp_contour_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConnectedComp_contour_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->contour);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvConnectedComp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvConnectedComp")) goto fail;
    {
        try {
            result = (CvConnectedComp *)new CvConnectedComp();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvConnectedComp, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvConnectedComp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConnectedComp *arg1 = (CvConnectedComp *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvConnectedComp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvConnectedComp_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvConnectedComp, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvChainPtReader_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_seq_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_seq_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->seq = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_seq_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_seq_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->seq);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_block_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->block = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_block_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->block);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_min_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_block_min_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_min) delete [] arg1->block_min;
        if (arg2) {
            arg1->block_min = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_min,arg2);
        } else {
            arg1->block_min = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_min_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_block_min_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_min);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_delta_index_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_delta_index_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_index = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_delta_index_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_delta_index_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_index);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_prev_elem_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_prev_elem_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->prev_elem) delete [] arg1->prev_elem;
        if (arg2) {
            arg1->prev_elem = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->prev_elem,arg2);
        } else {
            arg1->prev_elem = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_prev_elem_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_prev_elem_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->prev_elem);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_code_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_code_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (char)(SWIG_As_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->code = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_code_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_code_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char) ((arg1)->code);
    
    {
        resultobj = SWIG_From_char((char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_pt_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_pt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->pt = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_pt_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_pt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *)& ((arg1)->pt);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_deltas_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char (*arg2)[2] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_deltas_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_2__char, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        char (*inp)[2] = (char (*)[2])(arg2);
        if (inp) {
            char (*dest)[2] = (char (*)[2])(arg1->deltas);
            size_t ii = 0;
            for (; ii < 8; ++ii) {
                char *ip = inp[ii];
                if (ip) {
                    char *dp = dest[ii];
                    size_t jj = 0;
                    for (; jj < 2; ++jj) dp[jj] = ip[jj];
                } else {
                    SWIG_null_ref("char");
                }
            }
        } else {
            SWIG_null_ref("char[2]");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_deltas_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    char (*result)[2];
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_deltas_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char (*)[2])(char (*)[2]) ((arg1)->deltas);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_a_2__char, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_reserved_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvChainPtReader_reserved_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        int *inp = (int *)(arg2);
        if (inp) {
            int *dest = (int *)(arg1->reserved);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("int");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvChainPtReader_reserved_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvChainPtReader_reserved_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *)(int *) ((arg1)->reserved);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvChainPtReader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvChainPtReader")) goto fail;
    {
        try {
            result = (CvChainPtReader *)new CvChainPtReader();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvChainPtReader, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvChainPtReader(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvChainPtReader",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvChainPtReader_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvChainPtReader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvContourTree_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_p1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_p1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->p1 = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_p1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_p1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *)& ((arg1)->p1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_p2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvContourTree_p2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->p2 = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvContourTree_p2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvContourTree_p2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *)& ((arg1)->p2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvContourTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvContourTree")) goto fail;
    {
        try {
            result = (CvContourTree *)new CvContourTree();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvContourTree, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvContourTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvContourTree",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvContourTree_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvContourTree, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvConvexityDefect_start_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConvexityDefect_start_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->start = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_start_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConvexityDefect_start_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *) ((arg1)->start);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_end_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConvexityDefect_end_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->end = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_end_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConvexityDefect_end_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *) ((arg1)->end);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_depth_point_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConvexityDefect_depth_point_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->depth_point = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_depth_point_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    CvPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConvexityDefect_depth_point_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint *) ((arg1)->depth_point);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_depth_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConvexityDefect_depth_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->depth = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConvexityDefect_depth_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConvexityDefect_depth_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->depth);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvConvexityDefect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvConvexityDefect")) goto fail;
    {
        try {
            result = (CvConvexityDefect *)new CvConvexityDefect();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvConvexityDefect, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvConvexityDefect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConvexityDefect *arg1 = (CvConvexityDefect *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvConvexityDefect",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConvexityDefect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvConvexityDefect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvConvexityDefect, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvQuadEdge2D_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvQuadEdge2D_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvQuadEdge2D_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvQuadEdge2D_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvQuadEdge2D_pt_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    CvSubdiv2DPoint **arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvQuadEdge2D_pt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvSubdiv2DPoint * *inp = (CvSubdiv2DPoint * *)(arg2);
        if (inp) {
            CvSubdiv2DPoint * *dest = (CvSubdiv2DPoint * *)(arg1->pt);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("CvSubdiv2DPoint *");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvQuadEdge2D_pt_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    CvSubdiv2DPoint **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvQuadEdge2D_pt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSubdiv2DPoint **)(CvSubdiv2DPoint **) ((arg1)->pt);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_CvSubdiv2DPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvQuadEdge2D_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    CvSubdiv2DEdge *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvQuadEdge2D_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_size_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvSubdiv2DEdge *inp = (CvSubdiv2DEdge *)(arg2);
        if (inp) {
            CvSubdiv2DEdge *dest = (CvSubdiv2DEdge *)(arg1->next);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("CvSubdiv2DEdge");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvQuadEdge2D_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    CvSubdiv2DEdge *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvQuadEdge2D_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSubdiv2DEdge *)(CvSubdiv2DEdge *) ((arg1)->next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_size_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvQuadEdge2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvQuadEdge2D")) goto fail;
    {
        try {
            result = (CvQuadEdge2D *)new CvQuadEdge2D();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvQuadEdge2D, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvQuadEdge2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvQuadEdge2D *arg1 = (CvQuadEdge2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvQuadEdge2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvQuadEdge2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvQuadEdge2D_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvQuadEdge2D, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSubdiv2DPoint_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2DPoint_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2DPoint_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2DPoint_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2DPoint_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    CvSubdiv2DEdge arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2DPoint_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2DPoint_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2DPoint_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->first);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2DPoint_pt_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2DPoint_pt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->pt = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2DPoint_pt_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    CvPoint2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2DPoint_pt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint2D32f *)& ((arg1)->pt);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSubdiv2DPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSubdiv2DPoint")) goto fail;
    {
        try {
            result = (CvSubdiv2DPoint *)new CvSubdiv2DPoint();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2DPoint, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSubdiv2DPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DPoint *arg1 = (CvSubdiv2DPoint *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSubdiv2DPoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2DPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSubdiv2DPoint_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSubdiv2DPoint, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvSubdiv2D_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_header_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_header_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->header_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_header_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_header_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->header_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_h_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_h_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_h_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_h_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_h_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_h_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->h_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_h_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_h_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->h_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_v_prev_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_v_prev_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_prev = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_v_prev_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_v_prev_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_prev);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_v_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_v_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->v_next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_v_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_v_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeq *) ((arg1)->v_next);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_total_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_total_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->total = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_total_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_total_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->total);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_elem_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_elem_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->elem_size = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_elem_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_elem_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->elem_size);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_block_max_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_block_max_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->block_max) delete [] arg1->block_max;
        if (arg2) {
            arg1->block_max = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->block_max,arg2);
        } else {
            arg1->block_max = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_block_max_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_block_max_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->block_max);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_ptr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    char *arg2 = (char *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_ptr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        if (arg1->ptr) delete [] arg1->ptr;
        if (arg2) {
            arg1->ptr = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->ptr,arg2);
        } else {
            arg1->ptr = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_ptr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_ptr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *) ((arg1)->ptr);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_delta_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_delta_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->delta_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_delta_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_delta_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->delta_elems);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_storage_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_storage_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->storage = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_storage_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvMemStorage *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_storage_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMemStorage *) ((arg1)->storage);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMemStorage, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_free_blocks_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_free_blocks_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_blocks = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_free_blocks_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_free_blocks_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->free_blocks);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeqBlock *arg2 = (CvSeqBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeqBlock, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSeqBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSeqBlock *) ((arg1)->first);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeqBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_free_elems_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSetElem *arg2 = (CvSetElem *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_free_elems_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSetElem, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->free_elems = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_free_elems_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSetElem *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_free_elems_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSetElem *) ((arg1)->free_elems);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSetElem, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_active_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_active_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->active_count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_active_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_active_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->active_count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_edges_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSet *arg2 = (CvSet *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_edges_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSet, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->edges = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_edges_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSet *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_edges_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSet *) ((arg1)->edges);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSet, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_quad_edges_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_quad_edges_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->quad_edges = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_quad_edges_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_quad_edges_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->quad_edges);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_is_geometry_valid_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_is_geometry_valid_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->is_geometry_valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_is_geometry_valid_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_is_geometry_valid_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->is_geometry_valid);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_recent_edge_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSubdiv2DEdge arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_recent_edge_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->recent_edge = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_recent_edge_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_recent_edge_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result =  ((arg1)->recent_edge);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_topleft_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_topleft_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->topleft = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_topleft_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_topleft_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint2D32f *)& ((arg1)->topleft);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_bottomright_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvSubdiv2D_bottomright_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->bottomright = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvSubdiv2D_bottomright_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvSubdiv2D_bottomright_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvPoint2D32f *)& ((arg1)->bottomright);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPoint2D32f, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvSubdiv2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvSubdiv2D")) goto fail;
    {
        try {
            result = (CvSubdiv2D *)new CvSubdiv2D();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2D, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvSubdiv2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvSubdiv2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvSubdiv2D_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvSubdiv2D, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvMatrix3_m_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatrix3 *arg1 = (CvMatrix3 *) 0 ;
    float (*arg2)[3] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvMatrix3_m_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatrix3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_3__float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float (*inp)[3] = (float (*)[3])(arg2);
        if (inp) {
            float (*dest)[3] = (float (*)[3])(arg1->m);
            size_t ii = 0;
            for (; ii < 3; ++ii) {
                float *ip = inp[ii];
                if (ip) {
                    float *dp = dest[ii];
                    size_t jj = 0;
                    for (; jj < 3; ++jj) dp[jj] = ip[jj];
                } else {
                    SWIG_null_ref("float");
                }
            }
        } else {
            SWIG_null_ref("float[3]");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvMatrix3_m_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatrix3 *arg1 = (CvMatrix3 *) 0 ;
    float (*result)[3];
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvMatrix3_m_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatrix3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float (*)[3])(float (*)[3]) ((arg1)->m);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_a_3__float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvMatrix3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatrix3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvMatrix3")) goto fail;
    {
        try {
            result = (CvMatrix3 *)new CvMatrix3();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMatrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvMatrix3(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMatrix3 *arg1 = (CvMatrix3 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvMatrix3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMatrix3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvMatrix3_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvMatrix3, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvConDensation_MP_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_MP_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MP = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_MP_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_MP_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->MP);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_DP_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_DP_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->DP = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_DP_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_DP_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->DP);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_DynamMatr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_DynamMatr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->DynamMatr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_DynamMatr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_DynamMatr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->DynamMatr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_State_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_State_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->State = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_State_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_State_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->State);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_SamplesNum_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_SamplesNum_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->SamplesNum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_SamplesNum_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_SamplesNum_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->SamplesNum);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flSamples_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float **arg2 = (float **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_flSamples_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        float * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_float, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->flSamples = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flSamples_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_flSamples_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float **) ((arg1)->flSamples);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flNewSamples_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float **arg2 = (float **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_flNewSamples_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        float * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_float, 1)) == -1) return 0; arg2=&buffer; 
    }
    if (arg1) (arg1)->flNewSamples = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flNewSamples_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float **result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_flNewSamples_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float **) ((arg1)->flNewSamples);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flConfidence_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_flConfidence_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->flConfidence = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flConfidence_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_flConfidence_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->flConfidence);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flCumulative_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_flCumulative_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->flCumulative = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_flCumulative_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_flCumulative_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->flCumulative);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_Temp_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_Temp_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->Temp = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_Temp_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_Temp_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->Temp);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_RandomSample_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_RandomSample_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->RandomSample = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_RandomSample_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_RandomSample_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->RandomSample);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_RandS_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    CvRandState *arg2 = (CvRandState *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvConDensation_RandS_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRandState, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->RandS = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvConDensation_RandS_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    CvRandState *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvConDensation_RandS_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvRandState *) ((arg1)->RandS);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRandState, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvConDensation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvConDensation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvConDensation(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvConDensation_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvConDensation, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvKalman_MP_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_MP_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->MP = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_MP_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_MP_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->MP);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_DP_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_DP_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->DP = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_DP_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_DP_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->DP);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_CP_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_CP_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->CP = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_CP_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_CP_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->CP);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PosterState_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_PosterState_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PosterState = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PosterState_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_PosterState_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->PosterState);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PriorState_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_PriorState_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PriorState = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PriorState_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_PriorState_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->PriorState);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_DynamMatr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_DynamMatr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->DynamMatr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_DynamMatr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_DynamMatr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->DynamMatr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_MeasurementMatr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_MeasurementMatr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->MeasurementMatr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_MeasurementMatr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_MeasurementMatr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->MeasurementMatr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_MNCovariance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_MNCovariance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->MNCovariance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_MNCovariance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_MNCovariance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->MNCovariance);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PNCovariance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_PNCovariance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PNCovariance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PNCovariance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_PNCovariance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->PNCovariance);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_KalmGainMatr_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_KalmGainMatr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->KalmGainMatr = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_KalmGainMatr_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_KalmGainMatr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->KalmGainMatr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PriorErrorCovariance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_PriorErrorCovariance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PriorErrorCovariance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PriorErrorCovariance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_PriorErrorCovariance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->PriorErrorCovariance);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PosterErrorCovariance_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_PosterErrorCovariance_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->PosterErrorCovariance = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_PosterErrorCovariance_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_PosterErrorCovariance_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->PosterErrorCovariance);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_Temp1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_Temp1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->Temp1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_Temp1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_Temp1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->Temp1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_Temp2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_Temp2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->Temp2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_Temp2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_Temp2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->Temp2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_state_pre_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_state_pre_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->state_pre = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_state_pre_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_state_pre_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->state_pre);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_state_post_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_state_post_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->state_post = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_state_post_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_state_post_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->state_post);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_transition_matrix_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_transition_matrix_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->transition_matrix = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_transition_matrix_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_transition_matrix_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->transition_matrix);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_control_matrix_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_control_matrix_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->control_matrix = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_control_matrix_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_control_matrix_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->control_matrix);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_measurement_matrix_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_measurement_matrix_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->measurement_matrix = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_measurement_matrix_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_measurement_matrix_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->measurement_matrix);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_process_noise_cov_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_process_noise_cov_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->process_noise_cov = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_process_noise_cov_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_process_noise_cov_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->process_noise_cov);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_measurement_noise_cov_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_measurement_noise_cov_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->measurement_noise_cov = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_measurement_noise_cov_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_measurement_noise_cov_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->measurement_noise_cov);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_error_cov_pre_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_error_cov_pre_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->error_cov_pre = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_error_cov_pre_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_error_cov_pre_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->error_cov_pre);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_gain_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_gain_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->gain = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_gain_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_gain_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->gain);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_error_cov_post_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_error_cov_post_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->error_cov_post = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_error_cov_post_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_error_cov_post_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->error_cov_post);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp1_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_temp1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->temp1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp1_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_temp1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->temp1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp2_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_temp2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->temp2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp2_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_temp2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->temp2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp3_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_temp3_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->temp3 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp3_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_temp3_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->temp3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp4_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_temp4_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->temp4 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp4_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_temp4_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->temp4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp5_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvKalman_temp5_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->temp5 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvKalman_temp5_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvKalman_temp5_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvMat *) ((arg1)->temp5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvKalman(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvKalman",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvKalman(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvKalman_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvKalman, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHaarFeature_tilted_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature *arg1 = (CvHaarFeature *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarFeature_tilted_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tilted = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarFeature_tilted_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature *arg1 = (CvHaarFeature *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarFeature_tilted_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->tilted);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarFeature_rect_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature *arg1 = (CvHaarFeature *) 0 ;
    CvHaarFeature_rect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarFeature_rect_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvHaarFeature_rect *)(CvHaarFeature_rect *) ((arg1)->rect);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarFeature_rect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvHaarFeature(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvHaarFeature")) goto fail;
    {
        try {
            result = (CvHaarFeature *)new CvHaarFeature();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarFeature, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHaarFeature(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature *arg1 = (CvHaarFeature *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHaarFeature",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHaarFeature_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHaarFeature, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHaarFeature_rect_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *arg1 = (CvHaarFeature_rect *) 0 ;
    CvRect *arg2 = (CvRect *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarFeature_rect_r_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature_rect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->r = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarFeature_rect_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *arg1 = (CvHaarFeature_rect *) 0 ;
    CvRect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarFeature_rect_r_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature_rect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvRect *)& ((arg1)->r);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarFeature_rect_weight_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *arg1 = (CvHaarFeature_rect *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarFeature_rect_weight_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature_rect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->weight = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarFeature_rect_weight_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *arg1 = (CvHaarFeature_rect *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarFeature_rect_weight_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature_rect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->weight);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvHaarFeature_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvHaarFeature_rect")) goto fail;
    {
        try {
            result = (CvHaarFeature_rect *)new CvHaarFeature_rect();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarFeature_rect, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHaarFeature_rect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarFeature_rect *arg1 = (CvHaarFeature_rect *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHaarFeature_rect",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarFeature_rect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHaarFeature_rect_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHaarFeature_rect, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHaarClassifier_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_haar_feature_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    CvHaarFeature *arg2 = (CvHaarFeature *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_haar_feature_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHaarFeature, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->haar_feature = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_haar_feature_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    CvHaarFeature *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_haar_feature_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvHaarFeature *) ((arg1)->haar_feature);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarFeature, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_threshold_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_threshold_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->threshold = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_threshold_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_threshold_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->threshold);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_left_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_left_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->left = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_left_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_left_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->left);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_right_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int *arg2 = (int *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_right_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->right = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_right_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    int *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_right_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int *) ((arg1)->right);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_alpha_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    float *arg2 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifier_alpha_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->alpha = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifier_alpha_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifier_alpha_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *) ((arg1)->alpha);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvHaarClassifier(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvHaarClassifier")) goto fail;
    {
        try {
            result = (CvHaarClassifier *)new CvHaarClassifier();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarClassifier, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHaarClassifier(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifier *arg1 = (CvHaarClassifier *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHaarClassifier",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHaarClassifier_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHaarClassifier, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHaarStageClassifier_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_threshold_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_threshold_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->threshold = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_threshold_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_threshold_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->threshold);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_classifier_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    CvHaarClassifier *arg2 = (CvHaarClassifier *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_classifier_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHaarClassifier, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->classifier = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_classifier_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    CvHaarClassifier *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_classifier_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvHaarClassifier *) ((arg1)->classifier);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarClassifier, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_next_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_next_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->next = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_next_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_next_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->next);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_child_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_child_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->child = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_child_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_child_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->child);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_parent_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarStageClassifier_parent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->parent = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarStageClassifier_parent_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarStageClassifier_parent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->parent);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvHaarStageClassifier(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvHaarStageClassifier")) goto fail;
    {
        try {
            result = (CvHaarStageClassifier *)new CvHaarStageClassifier();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarStageClassifier, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHaarStageClassifier(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarStageClassifier *arg1 = (CvHaarStageClassifier *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHaarStageClassifier",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHaarStageClassifier_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHaarStageClassifier, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvHaarClassifierCascade_flags_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_flags_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->flags = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_flags_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_flags_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->flags);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_count_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_count_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->count = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_count_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_count_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->count);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_orig_window_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvSize *arg2 = (CvSize *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_orig_window_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->orig_window_size = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_orig_window_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvSize *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_orig_window_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSize *)& ((arg1)->orig_window_size);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_real_window_size_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvSize *arg2 = (CvSize *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_real_window_size_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->real_window_size = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_real_window_size_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvSize *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_real_window_size_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvSize *)& ((arg1)->real_window_size);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSize, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_scale_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_scale_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->scale = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_scale_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_scale_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double) ((arg1)->scale);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_stage_classifier_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvHaarStageClassifier *arg2 = (CvHaarStageClassifier *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_stage_classifier_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHaarStageClassifier, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->stage_classifier = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_stage_classifier_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvHaarStageClassifier *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_stage_classifier_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvHaarStageClassifier *) ((arg1)->stage_classifier);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarStageClassifier, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_hid_cascade_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvHidHaarClassifierCascade *arg2 = (CvHidHaarClassifierCascade *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvHaarClassifierCascade_hid_cascade_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHidHaarClassifierCascade, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->hid_cascade = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvHaarClassifierCascade_hid_cascade_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvHidHaarClassifierCascade *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvHaarClassifierCascade_hid_cascade_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvHidHaarClassifierCascade *) ((arg1)->hid_cascade);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHidHaarClassifierCascade, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvHaarClassifierCascade(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvHaarClassifierCascade",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete_CvHaarClassifierCascade(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvHaarClassifierCascade_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvHaarClassifierCascade, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_CvAvgComp_rect_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *arg1 = (CvAvgComp *) 0 ;
    CvRect *arg2 = (CvRect *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvAvgComp_rect_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAvgComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->rect = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAvgComp_rect_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *arg1 = (CvAvgComp *) 0 ;
    CvRect *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvAvgComp_rect_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAvgComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (CvRect *)& ((arg1)->rect);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvRect, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAvgComp_neighbors_set(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *arg1 = (CvAvgComp *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:CvAvgComp_neighbors_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAvgComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->neighbors = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CvAvgComp_neighbors_get(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *arg1 = (CvAvgComp *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CvAvgComp_neighbors_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAvgComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->neighbors);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_CvAvgComp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_CvAvgComp")) goto fail;
    {
        try {
            result = (CvAvgComp *)new CvAvgComp();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvAvgComp, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CvAvgComp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvAvgComp *arg1 = (CvAvgComp *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CvAvgComp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvAvgComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CvAvgComp_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CvAvgComp, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cvCopyMakeBorder(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvPoint arg3 ;
    int arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCopyMakeBorder",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvCopyMakeBorder((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSmooth(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvSmooth",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvSmooth((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFilter2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvPoint arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvFilter2D",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        try {
            cvFilter2D((CvArr const *)arg1,arg2,(CvMat const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvIntegral(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvIntegral",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvIntegral((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPyrDown(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPyrDown",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvPyrDown((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPyrUp(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPyrUp",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvPyrUp((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPyrSegmentation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    IplImage *arg2 = (IplImage *) 0 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    CvSeq **arg4 = (CvSeq **) 0 ;
    int arg5 ;
    double arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvPyrSegmentation",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        CvSeq * buffer; if ((SWIG_ConvertPtr(obj3, (void **) &buffer, SWIGTYPE_p_CvSeq, 1)) == -1) return 0; arg4=&buffer; 
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvPyrSegmentation(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSobel(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSobel",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvSobel((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLaplace(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvLaplace",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvLaplace((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCvtColor(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCvtColor",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvCvtColor((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvResize(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvResize",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvResize((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWarpAffine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    int arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvWarpAffine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvWarpAffine((CvArr const *)arg1,arg2,(CvMat const *)arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cv2DRotationMatrix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f arg1 ;
    double arg2 ;
    double arg3 ;
    CvMat *arg4 = (CvMat *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cv2DRotationMatrix",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (CvMat *)cv2DRotationMatrix(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWarpPerspective(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    int arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvWarpPerspective",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvWarpPerspective((CvArr const *)arg1,arg2,(CvMat const *)arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvWarpPerspectiveQMatrix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f *arg1 = (CvPoint2D32f *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvWarpPerspectiveQMatrix",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (CvMat *)cvWarpPerspectiveQMatrix((CvPoint2D32f const *)arg1,(CvPoint2D32f const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRemap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    int arg5 ;
    CvScalar arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvRemap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
        arg6 = *argp;
    }
    {
        try {
            cvRemap((CvArr const *)arg1,arg2,(CvArr const *)arg3,(CvArr const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLogPolar(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvPoint2D32f arg3 ;
    double arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvLogPolar",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvLogPolar((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateStructuringElementEx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int *arg6 = (int *) 0 ;
    IplConvKernel *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvCreateStructuringElementEx",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            result = (IplConvKernel *)cvCreateStructuringElementEx(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__IplConvKernel, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseStructuringElement(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplConvKernel **arg1 = (IplConvKernel **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseStructuringElement",&obj0)) goto fail;
    {
        IplConvKernel * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p__IplConvKernel, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseStructuringElement(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvErode(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    IplConvKernel *arg3 = (IplConvKernel *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvErode",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvErode((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDilate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    IplConvKernel *arg3 = (IplConvKernel *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvDilate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvDilate((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMorphologyEx(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    IplConvKernel *arg4 = (IplConvKernel *) 0 ;
    int arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvMorphologyEx",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p__IplConvKernel, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvMorphologyEx((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMoments *arg2 = (CvMoments *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMoments",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvMoments((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetSpatialMoment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetSpatialMoment",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetSpatialMoment(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetCentralMoment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetCentralMoment",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetCentralMoment(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetNormalizedCentralMoment(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    int arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetNormalizedCentralMoment",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvGetNormalizedCentralMoment(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetHuMoments(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMoments *arg1 = (CvMoments *) 0 ;
    CvHuMoments *arg2 = (CvHuMoments *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvGetHuMoments",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHuMoments, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvGetHuMoments(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitLineIterator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvPoint arg3 ;
    CvLineIterator *arg4 = (CvLineIterator *) 0 ;
    int arg5 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvInitLineIterator",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvLineIterator, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (int)cvInitLineIterator((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSampleLine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvPoint arg3 ;
    void *arg4 = (void *) 0 ;
    int arg5 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSampleLine",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (int)cvSampleLine((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetRectSubPix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvPoint2D32f arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetRectSubPix",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            cvGetRectSubPix((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetQuadrangleSubPix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    int arg4 ;
    CvScalar arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvGetQuadrangleSubPix",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        try {
            cvGetQuadrangleSubPix((CvArr const *)arg1,arg2,(CvMat const *)arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMatchTemplate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMatchTemplate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvMatchTemplate((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcEMD2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    CvDistanceFunction arg4 = (CvDistanceFunction) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    CvArr *arg6 = (CvArr *) 0 ;
    float *arg7 = (float *) 0 ;
    void *arg8 = (void *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cvCalcEMD2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_f_p_q_const__float_p_q_const__float_p_void__float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(7)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj7,(void **)(&arg8),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(8);SWIG_fail;
        }
    }
    {
        try {
            result = (float)cvCalcEMD2((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,(CvArr const *)arg5,arg6,arg7,arg8);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindContours(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvSeq **arg3 = (CvSeq **) 0 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    CvPoint arg7 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvFindContours",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvSeq * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvSeq, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj6, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
        arg7 = *argp;
    }
    {
        try {
            result = (int)cvFindContours(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartFindContours(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    CvPoint arg6 ;
    CvContourScanner result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvStartFindContours",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
        arg6 = *argp;
    }
    {
        try {
            result = (CvContourScanner)cvStartFindContours(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p__CvContourScanner, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindNextContour(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourScanner arg1 = (CvContourScanner) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFindNextContour",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__CvContourScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvFindNextContour(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubstituteContour(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourScanner arg1 = (CvContourScanner) 0 ;
    CvSeq *arg2 = (CvSeq *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSubstituteContour",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__CvContourScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvSubstituteContour(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvEndFindContours(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourScanner *arg1 = (CvContourScanner *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvEndFindContours",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_p__CvContourScanner, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvEndFindContours(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvApproxChains(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    int arg3 ;
    double arg4 ;
    int arg5 ;
    int arg6 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvApproxChains",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvApproxChains(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvStartReadChainPoints(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChain *arg1 = (CvChain *) 0 ;
    CvChainPtReader *arg2 = (CvChainPtReader *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvStartReadChainPoints",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChain, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvStartReadChainPoints(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReadChainPoint(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvChainPtReader *arg1 = (CvChainPtReader *) 0 ;
    CvPoint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReadChainPoint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvChainPtReader, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = cvReadChainPoint(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvPoint * resultptr;
        resultptr = new CvPoint((CvPoint &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvPoint, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcOpticalFlowLK(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvSize arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCalcOpticalFlowLK",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        try {
            cvCalcOpticalFlowLK((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcOpticalFlowBM(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvSize arg3 ;
    CvSize arg4 ;
    CvSize arg5 ;
    int arg6 ;
    CvArr *arg7 = (CvArr *) 0 ;
    CvArr *arg8 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cvCalcOpticalFlowBM",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj6,(void **)(&arg7),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(7);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj7,(void **)(&arg8),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(8);SWIG_fail;
        }
    }
    {
        try {
            cvCalcOpticalFlowBM((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcOpticalFlowHS(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvArr *arg5 = (CvArr *) 0 ;
    double arg6 ;
    CvTermCriteria arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvCalcOpticalFlowHS",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj4,(void **)(&arg5),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(5);SWIG_fail;
        }
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj6, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
        arg7 = *argp;
    }
    {
        try {
            cvCalcOpticalFlowHS((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcOpticalFlowPyrLK(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    CvPoint2D32f *arg5 = (CvPoint2D32f *) 0 ;
    CvPoint2D32f *arg6 = (CvPoint2D32f *) 0 ;
    int arg7 ;
    CvSize arg8 ;
    int arg9 ;
    char *arg10 = (char *) 0 ;
    float *arg11 = (float *) 0 ;
    CvTermCriteria arg12 ;
    int arg13 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:cvCalcOpticalFlowPyrLK",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj7, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
        arg8 = *argp;
    }
    {
        arg9 = (int)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj9, (char**)&arg10)) {
        SWIG_arg_fail(10);SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj10, (void **)&arg11, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(11)) SWIG_fail;
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj11, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(12)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(12)) SWIG_fail;
        arg12 = *argp;
    }
    {
        arg13 = (int)(SWIG_As_int(obj12)); 
        if (SWIG_arg_fail(13)) SWIG_fail;
    }
    {
        try {
            cvCalcOpticalFlowPyrLK((CvArr const *)arg1,(CvArr const *)arg2,arg3,arg4,(CvPoint2D32f const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvUpdateMotionHistory(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvUpdateMotionHistory",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvUpdateMotionHistory((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcMotionGradient(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    double arg5 ;
    int arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvCalcMotionGradient",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvCalcMotionGradient((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcGlobalOrientation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    double arg4 ;
    double arg5 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCalcGlobalOrientation",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (double)cvCalcGlobalOrientation((CvArr const *)arg1,(CvArr const *)arg2,(CvArr const *)arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSegmentMotion(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    double arg4 ;
    double arg5 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSegmentMotion",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvSegmentMotion((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAcc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvAcc",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvAcc((CvArr const *)arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSquareAcc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSquareAcc",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        try {
            cvSquareAcc((CvArr const *)arg1,arg2,(CvArr const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMultiplyAcc(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMultiplyAcc",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvMultiplyAcc((CvArr const *)arg1,(CvArr const *)arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRunningAvg(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvRunningAvg",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvRunningAvg((CvArr const *)arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCamShift(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvRect arg2 ;
    CvTermCriteria arg3 ;
    CvConnectedComp *arg4 = (CvConnectedComp *) 0 ;
    CvBox2D *arg5 = (CvBox2D *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCamShift",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            result = (int)cvCamShift((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMeanShift(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvRect arg2 ;
    CvTermCriteria arg3 ;
    CvConnectedComp *arg4 = (CvConnectedComp *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMeanShift",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            result = (int)cvMeanShift((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateConDensation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvConDensation *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateConDensation",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvConDensation *)cvCreateConDensation(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvConDensation, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseConDensation(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation **arg1 = (CvConDensation **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseConDensation",&obj0)) goto fail;
    {
        CvConDensation * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvConDensation, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseConDensation(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConDensUpdateByTime(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvConDensUpdateByTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvConDensUpdateByTime(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConDensInitSampleSet(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvConDensation *arg1 = (CvConDensation *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvConDensInitSampleSet",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvConDensation, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvConDensInitSampleSet(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateKalman(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    CvKalman *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateKalman",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvKalman *)cvCreateKalman(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvKalman, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseKalman(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman **arg1 = (CvKalman **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseKalman",&obj0)) goto fail;
    {
        CvKalman * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvKalman, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseKalman(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvKalmanPredict(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvKalmanPredict",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvMat *)cvKalmanPredict(arg1,(CvMat const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvKalmanCorrect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvKalman *arg1 = (CvKalman *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvKalmanCorrect",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvKalman, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvMat *)cvKalmanCorrect(arg1,(CvMat const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvMat, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitSubdivDelaunay2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvRect arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvInitSubdivDelaunay2D",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            cvInitSubdivDelaunay2D(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSubdiv2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    CvMemStorage *arg5 = (CvMemStorage *) 0 ;
    CvSubdiv2D *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCreateSubdiv2D",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            result = (CvSubdiv2D *)cvCreateSubdiv2D(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2D, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateSubdivDelaunay2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect arg1 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvSubdiv2D *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCreateSubdivDelaunay2D",&obj0,&obj1)) goto fail;
    {
        CvRect * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvRect");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = (CvSubdiv2D *)cvCreateSubdivDelaunay2D(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2D, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdivDelaunay2DInsert(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f arg2 ;
    CvSubdiv2DPoint *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSubdivDelaunay2DInsert",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (CvSubdiv2DPoint *)cvSubdivDelaunay2DInsert(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2DPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DLocate(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f arg2 ;
    CvSubdiv2DEdge *arg3 = (CvSubdiv2DEdge *) 0 ;
    CvSubdiv2DPoint **arg4 = (CvSubdiv2DPoint **) 0 ;
    CvSubdiv2DPointLocation result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvSubdiv2DLocate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_size_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        CvSubdiv2DPoint * buffer; if ((SWIG_ConvertPtr(obj3, (void **) &buffer, SWIGTYPE_p_CvSubdiv2DPoint, 1)) == -1) return 0; arg4=&buffer; 
    }
    {
        try {
            result = (CvSubdiv2DPointLocation)cvSubdiv2DLocate(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcSubdivVoronoi2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCalcSubdivVoronoi2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvCalcSubdivVoronoi2D(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearSubdivVoronoi2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearSubdivVoronoi2D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearSubdivVoronoi2D(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindNearestPoint2D(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2D *arg1 = (CvSubdiv2D *) 0 ;
    CvPoint2D32f arg2 ;
    CvSubdiv2DPoint *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvFindNearestPoint2D",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSubdiv2D, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (CvSubdiv2DPoint *)cvFindNearestPoint2D(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2DPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DNextEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSubdiv2DNextEdge",&obj0)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = cvSubdiv2DNextEdge(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DRotateEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    int arg2 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSubdiv2DRotateEdge",&obj0,&obj1)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvSubdiv2DRotateEdge(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DSymEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSubdiv2DSymEdge",&obj0)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = cvSubdiv2DSymEdge(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DGetEdge(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    CvNextEdgeType arg2 ;
    CvSubdiv2DEdge result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvSubdiv2DGetEdge",&obj0,&obj1)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (CvNextEdgeType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvSubdiv2DGetEdge(arg1,(CvNextEdgeType )arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DEdgeOrg(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    CvSubdiv2DPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSubdiv2DEdgeOrg",&obj0)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (CvSubdiv2DPoint *)cvSubdiv2DEdgeOrg(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2DPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSubdiv2DEdgeDst(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSubdiv2DEdge arg1 ;
    CvSubdiv2DPoint *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvSubdiv2DEdgeDst",&obj0)) goto fail;
    {
        arg1 = (CvSubdiv2DEdge)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (CvSubdiv2DPoint *)cvSubdiv2DEdgeDst(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSubdiv2DPoint, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvTriangleArea(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint2D32f arg1 ;
    CvPoint2D32f arg2 ;
    CvPoint2D32f arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvTriangleArea",&obj0,&obj1,&obj2)) goto fail;
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvPoint2D32f * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint2D32f");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            result = (double)cvTriangleArea(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvApproxPoly(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    int arg2 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    int arg4 ;
    double arg5 ;
    int arg6 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvApproxPoly",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvApproxPoly((void const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindDominantPoints(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    int arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvFindDominantPoints",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvFindDominantPoints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvArcLength(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    CvSlice arg2 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvArcLength",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvArcLength((void const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvBoundingRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    CvRect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvBoundingRect",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = cvBoundingRect(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvRect * resultptr;
        resultptr = new CvRect((CvRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvContourArea(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvSlice arg2 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvContourArea",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvSlice * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSlice, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSlice");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (double)cvContourArea((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMinAreaRect2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvBox2D result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvMinAreaRect2",&obj0,&obj1)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = cvMinAreaRect2((CvArr const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvBox2D * resultptr;
        resultptr = new CvBox2D((CvBox2D &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvBox2D, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMinEnclosingCircle(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    float *arg3 = (float *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvMinEnclosingCircle",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (int)cvMinEnclosingCircle((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMatchShapes(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *arg1 = (void *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMatchShapes",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (double)cvMatchShapes((void const *)arg1,(void const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateContourTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    double arg3 ;
    CvContourTree *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCreateContourTree",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (CvContourTree *)cvCreateContourTree((CvSeq const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvContourTree, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvContourFromContourTree(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvMemStorage *arg2 = (CvMemStorage *) 0 ;
    CvTermCriteria arg3 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvContourFromContourTree",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        try {
            result = (CvSeq *)cvContourFromContourTree((CvContourTree const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMatchContourTrees(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvContourTree *arg1 = (CvContourTree *) 0 ;
    CvContourTree *arg2 = (CvContourTree *) 0 ;
    int arg3 ;
    double arg4 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvMatchContourTrees",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvContourTree, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (double)cvMatchContourTrees((CvContourTree const *)arg1,(CvContourTree const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcPGH(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvSeq *arg1 = (CvSeq *) 0 ;
    CvHistogram *arg2 = (CvHistogram *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCalcPGH",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvSeq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvCalcPGH((CvSeq const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvexHull2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    int arg4 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvConvexHull2",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvConvexHull2((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCheckContourConvexity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvCheckContourConvexity",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = (int)cvCheckContourConvexity((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvexityDefects(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvConvexityDefects",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (CvSeq *)cvConvexityDefects((CvArr const *)arg1,(CvArr const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFitEllipse2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvBox2D result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvFitEllipse2",&obj0)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        try {
            result = cvFitEllipse2((CvArr const *)arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvBox2D * resultptr;
        resultptr = new CvBox2D((CvBox2D &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvBox2D, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMaxRect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvRect *arg1 = (CvRect *) 0 ;
    CvRect *arg2 = (CvRect *) 0 ;
    CvRect result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvMaxRect",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvRect, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            result = cvMaxRect((CvRect const *)arg1,(CvRect const *)arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        CvRect * resultptr;
        resultptr = new CvRect((CvRect &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_CvRect, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvBoxPoints(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvBox2D arg1 ;
    CvPoint2D32f *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvBoxPoints",&obj0,&obj1)) goto fail;
    {
        CvBox2D * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_CvBox2D, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvBox2D");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvBoxPoints(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreateHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int *arg2 = (int *) 0 ;
    int arg3 ;
    float **arg4 = (float **) 0 ;
    int arg5 ;
    CvHistogram *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCreateHist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg1 = PyList_Size (obj0);
        
        /* allocate the needed memory */
        arg2 = (int *)malloc (arg1 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg1; i++) {
            PyObject *item = PyList_GetItem (obj0, i);
            arg2 [i] = (int)PyInt_AsLong (item);
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        int i1;
        int i2;
        int size1;
        int size2 = 0;
        
        /* get the number of lines of the matrix */
        size1 = PyList_Size (obj2);
        
        /* allocate the correct number of lines for the destination matrix */
        arg4 = (float **)malloc (size1 * sizeof (float *));
        
        for (i1 = 0; i1 < size1; i1++) {
            /* extract all the lines of the matrix */
            PyObject *list = PyList_GetItem (obj2, i1);
            
            if (size2 == 0) {
                /* size 2 wasn't computed before */
                size2 = PyList_Size (list);
            } else if (size2 != PyList_Size (list)) {
                /* the current line as a different size than the previous one */
                /* so, generate an exception */
                SWIG_exception (SWIG_ValueError, "Lines must be the same size");
            }
            
            /* allocate the correct number of rows for the current line */
            arg4 [i1] = (float *)malloc (size2 * sizeof (float));
            
            /* extract all the float values of this row */
            for (i2 = 0; i2 < size2; i2++) {
                PyObject *item = PyList_GetItem (list, i2);
                arg4 [i1][i2] = (float)PyFloat_AsDouble (item);
            }
        }
    }
    {
        arg5 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            result = (CvHistogram *)cvCreateHist(arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHistogram, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetHistBinRanges(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float **arg2 = (float **) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvSetHistBinRanges",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        int i1;
        int i2;
        int size1;
        int size2 = 0;
        
        /* get the number of lines of the matrix */
        size1 = PyList_Size (obj1);
        
        /* allocate the correct number of lines for the destination matrix */
        arg2 = (float **)malloc (size1 * sizeof (float *));
        
        for (i1 = 0; i1 < size1; i1++) {
            /* extract all the lines of the matrix */
            PyObject *list = PyList_GetItem (obj1, i1);
            
            if (size2 == 0) {
                /* size 2 wasn't computed before */
                size2 = PyList_Size (list);
            } else if (size2 != PyList_Size (list)) {
                /* the current line as a different size than the previous one */
                /* so, generate an exception */
                SWIG_exception (SWIG_ValueError, "Lines must be the same size");
            }
            
            /* allocate the correct number of rows for the current line */
            arg2 [i1] = (float *)malloc (size2 * sizeof (float));
            
            /* extract all the float values of this row */
            for (i2 = 0; i2 < size2; i2++) {
                PyObject *item = PyList_GetItem (list, i2);
                arg2 [i1][i2] = (float)PyFloat_AsDouble (item);
            }
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvSetHistBinRanges(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvMakeHistHeaderForArray(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int *arg2 = (int *) 0 ;
    CvHistogram *arg3 = (CvHistogram *) 0 ;
    float *arg4 = (float *) 0 ;
    float **arg5 = (float **) 0 ;
    int arg6 ;
    CvHistogram *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvMakeHistHeaderForArray",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        int i;
        
        /* get the size of the dimention array */
        arg1 = PyList_Size (obj0);
        
        /* allocate the needed memory */
        arg2 = (int *)malloc (arg1 * sizeof (int));
        
        /* extract all the integer values from the list */
        for (i = 0; i < arg1; i++) {
            PyObject *item = PyList_GetItem (obj0, i);
            arg2 [i] = (int)PyInt_AsLong (item);
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg3, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg4, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        int i1;
        int i2;
        int size1;
        int size2 = 0;
        
        /* get the number of lines of the matrix */
        size1 = PyList_Size (obj3);
        
        /* allocate the correct number of lines for the destination matrix */
        arg5 = (float **)malloc (size1 * sizeof (float *));
        
        for (i1 = 0; i1 < size1; i1++) {
            /* extract all the lines of the matrix */
            PyObject *list = PyList_GetItem (obj3, i1);
            
            if (size2 == 0) {
                /* size 2 wasn't computed before */
                size2 = PyList_Size (list);
            } else if (size2 != PyList_Size (list)) {
                /* the current line as a different size than the previous one */
                /* so, generate an exception */
                SWIG_exception (SWIG_ValueError, "Lines must be the same size");
            }
            
            /* allocate the correct number of rows for the current line */
            arg5 [i1] = (float *)malloc (size2 * sizeof (float));
            
            /* extract all the float values of this row */
            for (i2 = 0; i2 < size2; i2++) {
                PyObject *item = PyList_GetItem (list, i2);
                arg5 [i1][i2] = (float)PyFloat_AsDouble (item);
            }
        }
    }
    {
        arg6 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            result = (CvHistogram *)cvMakeHistHeaderForArray(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHistogram, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram **arg1 = (CvHistogram **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseHist",&obj0)) goto fail;
    {
        CvHistogram * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvHistogram, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseHist(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvClearHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvClearHist",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            cvClearHist(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGetMinMaxHistValue(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    float *arg2 = (float *) 0 ;
    float *arg3 = (float *) 0 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    float temp2 ;
    int res2 = 0 ;
    float temp3 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    arg2 = &temp2; res2 = SWIG_NEWOBJ;
    arg3 = &temp3; res3 = SWIG_NEWOBJ;
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvGetMinMaxHistValue",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg4, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg5, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        try {
            cvGetMinMaxHistValue((CvHistogram const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    resultobj = t_output_helper(resultobj, ((res2 == SWIG_NEWOBJ) ?
    SWIG_From_float((*arg2)) : SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, 0)));
    resultobj = t_output_helper(resultobj, ((res3 == SWIG_NEWOBJ) ?
    SWIG_From_float((*arg3)) : SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, 0)));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvNormalizeHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvNormalizeHist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvNormalizeHist(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvThreshHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvThreshHist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (double)(SWIG_As_double(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            cvThreshHist(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCompareHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvHistogram *arg2 = (CvHistogram *) 0 ;
    int arg3 ;
    double result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCompareHist",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (double)cvCompareHist((CvHistogram const *)arg1,(CvHistogram const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCopyHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvHistogram **arg2 = (CvHistogram **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCopyHist",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvHistogram * buffer; if ((SWIG_ConvertPtr(obj1, (void **) &buffer, SWIGTYPE_p_CvHistogram, 1)) == -1) return 0; arg2=&buffer; 
    }
    {
        try {
            cvCopyHist((CvHistogram const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcBayesianProb(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram **arg1 = (CvHistogram **) 0 ;
    int arg2 ;
    CvHistogram **arg3 = (CvHistogram **) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCalcBayesianProb",&obj0,&obj1,&obj2)) goto fail;
    {
        CvHistogram * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvHistogram, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        CvHistogram * buffer; if ((SWIG_ConvertPtr(obj2, (void **) &buffer, SWIGTYPE_p_CvHistogram, 1)) == -1) return 0; arg3=&buffer; 
    }
    {
        try {
            cvCalcBayesianProb(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcArrHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr **arg1 = (CvArr **) 0 ;
    CvHistogram *arg2 = (CvHistogram *) 0 ;
    int arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCalcArrHist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        CvArr * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvCalcArrHist(arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcHist(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage **arg1 = (IplImage **) 0 ;
    CvHistogram *arg2 = (CvHistogram *) 0 ;
    int arg3 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCalcHist",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        IplImage * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p__IplImage, 1)) == -1) return 0; arg1=&buffer; 
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvCalcHist(arg1,arg2,arg3,(CvArr const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcArrBackProject(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr **arg1 = (CvArr **) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvHistogram *arg3 = (CvHistogram *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvCalcArrBackProject",&obj0,&obj1,&obj2)) goto fail;
    {
        CvArr * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvCalcArrBackProject(arg1,arg2,(CvHistogram const *)arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcArrBackProjectPatch(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr **arg1 = (CvArr **) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvSize arg3 ;
    CvHistogram *arg4 = (CvHistogram *) 0 ;
    int arg5 ;
    double arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvCalcArrBackProjectPatch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        CvArr * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_void, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        try {
            cvCalcArrBackProjectPatch(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcProbDensity(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHistogram *arg1 = (CvHistogram *) 0 ;
    CvHistogram *arg2 = (CvHistogram *) 0 ;
    CvHistogram *arg3 = (CvHistogram *) 0 ;
    double arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCalcProbDensity",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvHistogram, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvCalcProbDensity((CvHistogram const *)arg1,(CvHistogram const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSnakeImage(PyObject *, PyObject *args) {
    PyObject *resultobj;
    IplImage *arg1 = (IplImage *) 0 ;
    CvPoint *arg2 = (CvPoint *) 0 ;
    int arg3 ;
    float *arg4 = (float *) 0 ;
    float *arg5 = (float *) 0 ;
    float *arg6 = (float *) 0 ;
    int arg7 ;
    CvSize arg8 ;
    CvTermCriteria arg9 ;
    int arg10 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:cvSnakeImage",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p__IplImage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj7, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(8)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(8)) SWIG_fail;
        arg8 = *argp;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj8, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(9)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(9)) SWIG_fail;
        arg9 = *argp;
    }
    {
        arg10 = (int)(SWIG_As_int(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        try {
            cvSnakeImage((IplImage const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalcImageHomography(PyObject *, PyObject *args) {
    PyObject *resultobj;
    float *arg1 = (float *) 0 ;
    CvPoint3D32f *arg2 = (CvPoint3D32f *) 0 ;
    float *arg3 = (float *) 0 ;
    float *arg4 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCalcImageHomography",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvCalcImageHomography(arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvDistTransform(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    float *arg5 = (float *) 0 ;
    CvArr *arg6 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvDistTransform",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            cvDistTransform((CvArr const *)arg1,arg2,arg3,arg4,(float const *)arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvThreshold(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    double arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvThreshold",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvThreshold((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvAdaptiveThreshold(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    double arg7 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvAdaptiveThreshold",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        try {
            cvAdaptiveThreshold((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFloodFill(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint arg2 ;
    CvScalar arg3 ;
    CvScalar arg4 ;
    CvScalar arg5 ;
    CvConnectedComp *arg6 = (CvConnectedComp *) 0 ;
    int arg7 ;
    CvArr *arg8 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cvFloodFill",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        CvScalar * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvScalar, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvScalar");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvConnectedComp, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        arg7 = (int)(SWIG_As_int(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj7,(void **)(&arg8),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(8);SWIG_fail;
        }
    }
    {
        try {
            cvFloodFill(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCanny(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    double arg3 ;
    double arg4 ;
    int arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCanny",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvCanny((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPreCornerDetect(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvPreCornerDetect",&obj0,&obj1,&obj2)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            cvPreCornerDetect((CvArr const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCornerEigenValsAndVecs(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCornerEigenValsAndVecs",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvCornerEigenValsAndVecs((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCornerMinEigenVal(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvCornerMinEigenVal",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            cvCornerMinEigenVal((CvArr const *)arg1,arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCornerHarris(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    int arg3 ;
    int arg4 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvCornerHarris",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvCornerHarris((CvArr const *)arg1,arg2,arg3,arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindCornerSubPix(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    int arg3 ;
    CvSize arg4 ;
    CvSize arg5 ;
    CvTermCriteria arg6 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvFindCornerSubPix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj4, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(5)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(5)) SWIG_fail;
        arg5 = *argp;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj5, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(6)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(6)) SWIG_fail;
        arg6 = *argp;
    }
    {
        try {
            cvFindCornerSubPix((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvGoodFeaturesToTrack(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvPoint2D32f *arg4 = (CvPoint2D32f *) 0 ;
    int *arg5 = (int *) 0 ;
    double arg6 ;
    double arg7 ;
    CvArr *arg8 = (CvArr *) 0 ;
    int arg9 ;
    int arg10 ;
    double arg11 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:cvGoodFeaturesToTrack",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj7,(void **)(&arg8),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(8);SWIG_fail;
        }
    }
    {
        arg9 = (int)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (int)(SWIG_As_int(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (double)(SWIG_As_double(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        try {
            cvGoodFeaturesToTrack((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,(CvArr const *)arg8,arg9,arg10,arg11);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvHoughLines2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    void *arg2 = (void *) 0 ;
    int arg3 ;
    double arg4 ;
    double arg5 ;
    int arg6 ;
    double arg7 ;
    double arg8 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOO:cvHoughLines2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (double)(SWIG_As_double(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (double)(SWIG_As_double(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        try {
            result = (CvSeq *)cvHoughLines2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFitLine(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    int arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    float *arg6 = (float *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvFitLine",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            cvFitLine((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvLoadHaarClassifierCascade(PyObject *, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    CvSize arg2 ;
    CvHaarClassifierCascade *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvLoadHaarClassifierCascade",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (CvHaarClassifierCascade *)cvLoadHaarClassifierCascade((char const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvHaarClassifierCascade, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleaseHaarClassifierCascade(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade **arg1 = (CvHaarClassifierCascade **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleaseHaarClassifierCascade",&obj0)) goto fail;
    {
        CvHaarClassifierCascade * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvHaarClassifierCascade, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleaseHaarClassifierCascade(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvHaarDetectObjects(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvHaarClassifierCascade *arg2 = (CvHaarClassifierCascade *) 0 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    double arg4 ;
    int arg5 ;
    int arg6 ;
    CvSize arg7 ;
    CvSeq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvHaarDetectObjects",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (double)(SWIG_As_double(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (int)(SWIG_As_int(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj6, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(7)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(7)) SWIG_fail;
        arg7 = *argp;
    }
    {
        try {
            result = (CvSeq *)cvHaarDetectObjects((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvSeq, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvSetImagesForHaarClassifierCascade(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    double arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:cvSetImagesForHaarClassifierCascade",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            cvSetImagesForHaarClassifierCascade(arg1,(CvArr const *)arg2,(CvArr const *)arg3,(CvArr const *)arg4,arg5);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRunHaarClassifierCascade(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvHaarClassifierCascade *arg1 = (CvHaarClassifierCascade *) 0 ;
    CvPoint arg2 ;
    int arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvRunHaarClassifierCascade",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvHaarClassifierCascade, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        CvPoint * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_CvPoint, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvPoint");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (int)cvRunHaarClassifierCascade(arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvUndistort2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *arg4 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvUndistort2",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvUndistort2((CvArr const *)arg1,arg2,(CvMat const *)arg3,(CvMat const *)arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvInitUndistortMap(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvArr *arg3 = (CvArr *) 0 ;
    CvArr *arg4 = (CvArr *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvInitUndistortMap",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        if ((SWIG_ConvertPtr(obj2,(void **)(&arg3),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(3);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj3,(void **)(&arg4),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(4);SWIG_fail;
        }
    }
    {
        try {
            cvInitUndistortMap((CvMat const *)arg1,(CvMat const *)arg2,arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvRodrigues2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvRodrigues2",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            result = (int)cvRodrigues2((CvMat const *)arg1,arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindHomography(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:cvFindHomography",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        try {
            cvFindHomography((CvMat const *)arg1,(CvMat const *)arg2,arg3);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvProjectPoints2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *arg4 = (CvMat *) 0 ;
    CvMat *arg5 = (CvMat *) 0 ;
    CvMat *arg6 = (CvMat *) 0 ;
    CvMat *arg7 = (CvMat *) 0 ;
    CvMat *arg8 = (CvMat *) 0 ;
    CvMat *arg9 = (CvMat *) 0 ;
    CvMat *arg10 = (CvMat *) 0 ;
    CvMat *arg11 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOO:cvProjectPoints2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(7)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(8)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj8, (void **)&arg9, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(9)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj9, (void **)&arg10, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(10)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj10, (void **)&arg11, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(11)) SWIG_fail;
    {
        try {
            cvProjectPoints2((CvMat const *)arg1,(CvMat const *)arg2,(CvMat const *)arg3,(CvMat const *)arg4,(CvMat const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindExtrinsicCameraParams2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *arg4 = (CvMat *) 0 ;
    CvMat *arg5 = (CvMat *) 0 ;
    CvMat *arg6 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvFindExtrinsicCameraParams2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            cvFindExtrinsicCameraParams2((CvMat const *)arg1,(CvMat const *)arg2,(CvMat const *)arg3,(CvMat const *)arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCalibrateCamera2(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvSize arg4 ;
    CvMat *arg5 = (CvMat *) 0 ;
    CvMat *arg6 = (CvMat *) 0 ;
    CvMat *arg7 = (CvMat *) 0 ;
    CvMat *arg8 = (CvMat *) 0 ;
    int arg9 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:cvCalibrateCamera2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(7)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj7, (void **)&arg8, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(8)) SWIG_fail;
    {
        arg9 = (int)(SWIG_As_int(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        try {
            cvCalibrateCamera2((CvMat const *)arg1,(CvMat const *)arg2,(CvMat const *)arg3,arg4,arg5,arg6,arg7,arg8,arg9);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindChessBoardCornerGuesses(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvArr *arg1 = (CvArr *) 0 ;
    CvArr *arg2 = (CvArr *) 0 ;
    CvMemStorage *arg3 = (CvMemStorage *) 0 ;
    CvSize arg4 ;
    CvPoint2D32f *arg5 = (CvPoint2D32f *) 0 ;
    int *arg6 = (int *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvFindChessBoardCornerGuesses",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        if ((SWIG_ConvertPtr(obj0,(void **)(&arg1),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(1);SWIG_fail;
        }
    }
    {
        if ((SWIG_ConvertPtr(obj1,(void **)(&arg2),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(2);SWIG_fail;
        }
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMemStorage, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        CvSize * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvSize, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvSize");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_int, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            result = (int)cvFindChessBoardCornerGuesses((CvArr const *)arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvCreatePOSITObject(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPoint3D32f *arg1 = (CvPoint3D32f *) 0 ;
    int arg2 ;
    CvPOSITObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvCreatePOSITObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPoint3D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (CvPOSITObject *)cvCreatePOSITObject(arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_CvPOSITObject, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvPOSIT(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPOSITObject *arg1 = (CvPOSITObject *) 0 ;
    CvPoint2D32f *arg2 = (CvPoint2D32f *) 0 ;
    double arg3 ;
    CvTermCriteria arg4 ;
    CvMatr32f arg5 = (CvMatr32f) 0 ;
    CvVect32f arg6 = (CvVect32f) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:cvPOSIT",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvPOSITObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvPoint2D32f, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (double)(SWIG_As_double(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        CvTermCriteria * argp;
        SWIG_Python_ConvertPtr(obj3, (void **)&argp, SWIGTYPE_p_CvTermCriteria, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("CvTermCriteria");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = *argp;
    }
    SWIG_Python_ConvertPtr(obj4, (void **)&arg5, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(5)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj5, (void **)&arg6, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(6)) SWIG_fail;
    {
        try {
            cvPOSIT(arg1,arg2,arg3,arg4,arg5,arg6);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvReleasePOSITObject(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvPOSITObject **arg1 = (CvPOSITObject **) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cvReleasePOSITObject",&obj0)) goto fail;
    {
        CvPOSITObject * buffer; if ((SWIG_ConvertPtr(obj0, (void **) &buffer, SWIGTYPE_p_CvPOSITObject, 1)) == -1) return 0; arg1=&buffer; 
    }
    {
        try {
            cvReleasePOSITObject(arg1);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvConvertPointsHomogenious(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:cvConvertPointsHomogenious",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            cvConvertPointsHomogenious((CvMat const *)arg1,arg2);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvFindFundamentalMat(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    CvMat *arg2 = (CvMat *) 0 ;
    CvMat *arg3 = (CvMat *) 0 ;
    int arg4 ;
    double arg5 ;
    double arg6 ;
    CvMat *arg7 = (CvMat *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:cvFindFundamentalMat",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (double)(SWIG_As_double(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (double)(SWIG_As_double(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj6, (void **)&arg7, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(7)) SWIG_fail;
    {
        try {
            result = (int)cvFindFundamentalMat((CvMat const *)arg1,(CvMat const *)arg2,arg3,arg4,arg5,arg6,arg7);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cvComputeCorrespondEpilines(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvMat *arg1 = (CvMat *) 0 ;
    int arg2 ;
    CvMat *arg3 = (CvMat *) 0 ;
    CvMat *arg4 = (CvMat *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cvComputeCorrespondEpilines",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_CvMat, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        try {
            cvComputeCorrespondEpilines((CvMat const *)arg1,arg2,(CvMat const *)arg3,arg4);
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SendErrorToPython(PyObject *, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    int arg5 ;
    void *arg6 = (void *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:SendErrorToPython",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj2, (char**)&arg3)) {
        SWIG_arg_fail(3);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj3, (char**)&arg4)) {
        SWIG_arg_fail(4);SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        if ((SWIG_ConvertPtr(obj5,(void **)(&arg6),0,SWIG_POINTER_EXCEPTION|0))== -1) {
            SWIG_arg_fail(6);SWIG_fail;
        }
    }
    {
        try {
            try {
                result = (int)SendErrorToPython(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
            }
            catch(int &_e) {
                {
                    PyErr_SetObject(PyExc_RuntimeError, SWIG_From_int((int)(_e)));
                    SWIG_fail;
                }
            }
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_ptr_generator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    CvErrorCallback result;
    
    if(!PyArg_ParseTuple(args,(char *)":function_ptr_generator")) goto fail;
    {
        try {
            result = (CvErrorCallback)function_ptr_generator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_void_ptr_generator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void *result;
    
    if(!PyArg_ParseTuple(args,(char *)":void_ptr_generator")) goto fail;
    {
        try {
            result = (void *)void_ptr_generator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_void_ptrptr_generator(PyObject *, PyObject *args) {
    PyObject *resultobj;
    void **result;
    
    if(!PyArg_ParseTuple(args,(char *)":void_ptrptr_generator")) goto fail;
    {
        try {
            result = (void **)void_ptrptr_generator();
        } 
        catch (...) 
        {
            return NULL;
        } 
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"cvRound", _wrap_cvRound, METH_VARARGS, NULL},
	 { (char *)"cvFloor", _wrap_cvFloor, METH_VARARGS, NULL},
	 { (char *)"cvCeil", _wrap_cvCeil, METH_VARARGS, NULL},
	 { (char *)"cvIsNaN", _wrap_cvIsNaN, METH_VARARGS, NULL},
	 { (char *)"cvIsInf", _wrap_cvIsInf, METH_VARARGS, NULL},
	 { (char *)"cvRNG", _wrap_cvRNG, METH_VARARGS, NULL},
	 { (char *)"cvRandInt", _wrap_cvRandInt, METH_VARARGS, NULL},
	 { (char *)"cvRandReal", _wrap_cvRandReal, METH_VARARGS, NULL},
	 { (char *)"IplImage_ID_set", _wrap_IplImage_ID_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_ID_get", _wrap_IplImage_ID_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_nChannels_set", _wrap_IplImage_nChannels_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_nChannels_get", _wrap_IplImage_nChannels_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_depth_set", _wrap_IplImage_depth_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_depth_get", _wrap_IplImage_depth_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_dataOrder_set", _wrap_IplImage_dataOrder_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_dataOrder_get", _wrap_IplImage_dataOrder_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_origin_set", _wrap_IplImage_origin_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_origin_get", _wrap_IplImage_origin_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_align_set", _wrap_IplImage_align_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_align_get", _wrap_IplImage_align_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_width_set", _wrap_IplImage_width_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_width_get", _wrap_IplImage_width_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_height_set", _wrap_IplImage_height_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_height_get", _wrap_IplImage_height_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_roi_set", _wrap_IplImage_roi_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_roi_get", _wrap_IplImage_roi_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_imageSize_set", _wrap_IplImage_imageSize_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_imageSize_get", _wrap_IplImage_imageSize_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_widthStep_set", _wrap_IplImage_widthStep_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_widthStep_get", _wrap_IplImage_widthStep_get, METH_VARARGS, NULL},
	 { (char *)"delete_IplImage", _wrap_delete_IplImage, METH_VARARGS, NULL},
	 { (char *)"IplImage_imageData_set", _wrap_IplImage_imageData_set, METH_VARARGS, NULL},
	 { (char *)"IplImage_imageData_get", _wrap_IplImage_imageData_get, METH_VARARGS, NULL},
	 { (char *)"IplImage_swigregister", IplImage_swigregister, METH_VARARGS, NULL},
	 { (char *)"IplROI_coi_set", _wrap_IplROI_coi_set, METH_VARARGS, NULL},
	 { (char *)"IplROI_coi_get", _wrap_IplROI_coi_get, METH_VARARGS, NULL},
	 { (char *)"IplROI_xOffset_set", _wrap_IplROI_xOffset_set, METH_VARARGS, NULL},
	 { (char *)"IplROI_xOffset_get", _wrap_IplROI_xOffset_get, METH_VARARGS, NULL},
	 { (char *)"IplROI_yOffset_set", _wrap_IplROI_yOffset_set, METH_VARARGS, NULL},
	 { (char *)"IplROI_yOffset_get", _wrap_IplROI_yOffset_get, METH_VARARGS, NULL},
	 { (char *)"IplROI_width_set", _wrap_IplROI_width_set, METH_VARARGS, NULL},
	 { (char *)"IplROI_width_get", _wrap_IplROI_width_get, METH_VARARGS, NULL},
	 { (char *)"IplROI_height_set", _wrap_IplROI_height_set, METH_VARARGS, NULL},
	 { (char *)"IplROI_height_get", _wrap_IplROI_height_get, METH_VARARGS, NULL},
	 { (char *)"new_IplROI", _wrap_new_IplROI, METH_VARARGS, NULL},
	 { (char *)"delete_IplROI", _wrap_delete_IplROI, METH_VARARGS, NULL},
	 { (char *)"IplROI_swigregister", IplROI_swigregister, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nCols_set", _wrap_IplConvKernel_nCols_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nCols_get", _wrap_IplConvKernel_nCols_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nRows_set", _wrap_IplConvKernel_nRows_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nRows_get", _wrap_IplConvKernel_nRows_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_anchorX_set", _wrap_IplConvKernel_anchorX_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_anchorX_get", _wrap_IplConvKernel_anchorX_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_anchorY_set", _wrap_IplConvKernel_anchorY_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_anchorY_get", _wrap_IplConvKernel_anchorY_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_values_set", _wrap_IplConvKernel_values_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_values_get", _wrap_IplConvKernel_values_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nShiftR_set", _wrap_IplConvKernel_nShiftR_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_nShiftR_get", _wrap_IplConvKernel_nShiftR_get, METH_VARARGS, NULL},
	 { (char *)"delete_IplConvKernel", _wrap_delete_IplConvKernel, METH_VARARGS, NULL},
	 { (char *)"IplConvKernel_swigregister", IplConvKernel_swigregister, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_nCols_set", _wrap_IplConvKernelFP_nCols_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_nCols_get", _wrap_IplConvKernelFP_nCols_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_nRows_set", _wrap_IplConvKernelFP_nRows_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_nRows_get", _wrap_IplConvKernelFP_nRows_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_anchorX_set", _wrap_IplConvKernelFP_anchorX_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_anchorX_get", _wrap_IplConvKernelFP_anchorX_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_anchorY_set", _wrap_IplConvKernelFP_anchorY_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_anchorY_get", _wrap_IplConvKernelFP_anchorY_get, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_values_set", _wrap_IplConvKernelFP_values_set, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_values_get", _wrap_IplConvKernelFP_values_get, METH_VARARGS, NULL},
	 { (char *)"new_IplConvKernelFP", _wrap_new_IplConvKernelFP, METH_VARARGS, NULL},
	 { (char *)"delete_IplConvKernelFP", _wrap_delete_IplConvKernelFP, METH_VARARGS, NULL},
	 { (char *)"IplConvKernelFP_swigregister", IplConvKernelFP_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMat_type_set", _wrap_CvMat_type_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_type_get", _wrap_CvMat_type_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_step_set", _wrap_CvMat_step_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_step_get", _wrap_CvMat_step_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_refcount_set", _wrap_CvMat_refcount_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_refcount_get", _wrap_CvMat_refcount_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_rows_set", _wrap_CvMat_rows_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_rows_get", _wrap_CvMat_rows_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_cols_set", _wrap_CvMat_cols_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_cols_get", _wrap_CvMat_cols_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_get", _wrap_CvMat_data_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvMat", _wrap_delete_CvMat, METH_VARARGS, NULL},
	 { (char *)"CvMat_swigregister", CvMat_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_ptr_set", _wrap_CvMat_data_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_ptr_get", _wrap_CvMat_data_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_s_set", _wrap_CvMat_data_s_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_s_get", _wrap_CvMat_data_s_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_i_set", _wrap_CvMat_data_i_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_i_get", _wrap_CvMat_data_i_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_fl_set", _wrap_CvMat_data_fl_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_fl_get", _wrap_CvMat_data_fl_get, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_db_set", _wrap_CvMat_data_db_set, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_db_get", _wrap_CvMat_data_db_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMat_data", _wrap_new_CvMat_data, METH_VARARGS, NULL},
	 { (char *)"delete_CvMat_data", _wrap_delete_CvMat_data, METH_VARARGS, NULL},
	 { (char *)"CvMat_data_swigregister", CvMat_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvMat", _wrap_cvMat, METH_VARARGS, NULL},
	 { (char *)"cvmGet", _wrap_cvmGet, METH_VARARGS, NULL},
	 { (char *)"cvmSet", _wrap_cvmSet, METH_VARARGS, NULL},
	 { (char *)"cvCvToIplDepth", _wrap_cvCvToIplDepth, METH_VARARGS, NULL},
	 { (char *)"CvMatND_type_set", _wrap_CvMatND_type_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_type_get", _wrap_CvMatND_type_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dims_set", _wrap_CvMatND_dims_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dims_get", _wrap_CvMatND_dims_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_refcount_set", _wrap_CvMatND_refcount_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_refcount_get", _wrap_CvMatND_refcount_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_get", _wrap_CvMatND_dim_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_get", _wrap_CvMatND_data_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvMatND", _wrap_delete_CvMatND, METH_VARARGS, NULL},
	 { (char *)"CvMatND_swigregister", CvMatND_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_size_set", _wrap_CvMatND_dim_size_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_size_get", _wrap_CvMatND_dim_size_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_step_set", _wrap_CvMatND_dim_step_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_step_get", _wrap_CvMatND_dim_step_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMatND_dim", _wrap_new_CvMatND_dim, METH_VARARGS, NULL},
	 { (char *)"delete_CvMatND_dim", _wrap_delete_CvMatND_dim, METH_VARARGS, NULL},
	 { (char *)"CvMatND_dim_swigregister", CvMatND_dim_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_ptr_set", _wrap_CvMatND_data_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_ptr_get", _wrap_CvMatND_data_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_fl_set", _wrap_CvMatND_data_fl_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_fl_get", _wrap_CvMatND_data_fl_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_db_set", _wrap_CvMatND_data_db_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_db_get", _wrap_CvMatND_data_db_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_i_set", _wrap_CvMatND_data_i_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_i_get", _wrap_CvMatND_data_i_get, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_s_set", _wrap_CvMatND_data_s_set, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_s_get", _wrap_CvMatND_data_s_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMatND_data", _wrap_new_CvMatND_data, METH_VARARGS, NULL},
	 { (char *)"delete_CvMatND_data", _wrap_delete_CvMatND_data, METH_VARARGS, NULL},
	 { (char *)"CvMatND_data_swigregister", CvMatND_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_type_set", _wrap_CvSparseMat_type_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_type_get", _wrap_CvSparseMat_type_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_dims_set", _wrap_CvSparseMat_dims_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_dims_get", _wrap_CvSparseMat_dims_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_refcount_set", _wrap_CvSparseMat_refcount_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_refcount_get", _wrap_CvSparseMat_refcount_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_heap_set", _wrap_CvSparseMat_heap_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_heap_get", _wrap_CvSparseMat_heap_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_hashtable_set", _wrap_CvSparseMat_hashtable_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_hashtable_get", _wrap_CvSparseMat_hashtable_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_hashsize_set", _wrap_CvSparseMat_hashsize_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_hashsize_get", _wrap_CvSparseMat_hashsize_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_valoffset_set", _wrap_CvSparseMat_valoffset_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_valoffset_get", _wrap_CvSparseMat_valoffset_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_idxoffset_set", _wrap_CvSparseMat_idxoffset_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_idxoffset_get", _wrap_CvSparseMat_idxoffset_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_size_set", _wrap_CvSparseMat_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_size_get", _wrap_CvSparseMat_size_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvSparseMat", _wrap_delete_CvSparseMat, METH_VARARGS, NULL},
	 { (char *)"CvSparseMat_swigregister", CvSparseMat_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSparseNode_hashval_set", _wrap_CvSparseNode_hashval_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseNode_hashval_get", _wrap_CvSparseNode_hashval_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseNode_next_set", _wrap_CvSparseNode_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseNode_next_get", _wrap_CvSparseNode_next_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSparseNode", _wrap_new_CvSparseNode, METH_VARARGS, NULL},
	 { (char *)"delete_CvSparseNode", _wrap_delete_CvSparseNode, METH_VARARGS, NULL},
	 { (char *)"CvSparseNode_swigregister", CvSparseNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_mat_set", _wrap_CvSparseMatIterator_mat_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_mat_get", _wrap_CvSparseMatIterator_mat_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_node_set", _wrap_CvSparseMatIterator_node_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_node_get", _wrap_CvSparseMatIterator_node_get, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_curidx_set", _wrap_CvSparseMatIterator_curidx_set, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_curidx_get", _wrap_CvSparseMatIterator_curidx_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSparseMatIterator", _wrap_new_CvSparseMatIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CvSparseMatIterator", _wrap_delete_CvSparseMatIterator, METH_VARARGS, NULL},
	 { (char *)"CvSparseMatIterator_swigregister", CvSparseMatIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_type_set", _wrap_CvHistogram_type_set, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_type_get", _wrap_CvHistogram_type_get, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_bins_set", _wrap_CvHistogram_bins_set, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_bins_get", _wrap_CvHistogram_bins_get, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_thresh_set", _wrap_CvHistogram_thresh_set, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_thresh_get", _wrap_CvHistogram_thresh_get, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_thresh2_set", _wrap_CvHistogram_thresh2_set, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_thresh2_get", _wrap_CvHistogram_thresh2_get, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_mat_set", _wrap_CvHistogram_mat_set, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_mat_get", _wrap_CvHistogram_mat_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvHistogram", _wrap_delete_CvHistogram, METH_VARARGS, NULL},
	 { (char *)"CvHistogram_swigregister", CvHistogram_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvRect_x_set", _wrap_CvRect_x_set, METH_VARARGS, NULL},
	 { (char *)"CvRect_x_get", _wrap_CvRect_x_get, METH_VARARGS, NULL},
	 { (char *)"CvRect_y_set", _wrap_CvRect_y_set, METH_VARARGS, NULL},
	 { (char *)"CvRect_y_get", _wrap_CvRect_y_get, METH_VARARGS, NULL},
	 { (char *)"CvRect_width_set", _wrap_CvRect_width_set, METH_VARARGS, NULL},
	 { (char *)"CvRect_width_get", _wrap_CvRect_width_get, METH_VARARGS, NULL},
	 { (char *)"CvRect_height_set", _wrap_CvRect_height_set, METH_VARARGS, NULL},
	 { (char *)"CvRect_height_get", _wrap_CvRect_height_get, METH_VARARGS, NULL},
	 { (char *)"new_CvRect", _wrap_new_CvRect, METH_VARARGS, NULL},
	 { (char *)"delete_CvRect", _wrap_delete_CvRect, METH_VARARGS, NULL},
	 { (char *)"CvRect_swigregister", CvRect_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvRect", _wrap_cvRect, METH_VARARGS, NULL},
	 { (char *)"cvRectToROI", _wrap_cvRectToROI, METH_VARARGS, NULL},
	 { (char *)"cvROIToRect", _wrap_cvROIToRect, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_type_set", _wrap_CvTermCriteria_type_set, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_type_get", _wrap_CvTermCriteria_type_get, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_max_iter_set", _wrap_CvTermCriteria_max_iter_set, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_max_iter_get", _wrap_CvTermCriteria_max_iter_get, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_epsilon_set", _wrap_CvTermCriteria_epsilon_set, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_epsilon_get", _wrap_CvTermCriteria_epsilon_get, METH_VARARGS, NULL},
	 { (char *)"new_CvTermCriteria", _wrap_new_CvTermCriteria, METH_VARARGS, NULL},
	 { (char *)"delete_CvTermCriteria", _wrap_delete_CvTermCriteria, METH_VARARGS, NULL},
	 { (char *)"CvTermCriteria_swigregister", CvTermCriteria_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvTermCriteria", _wrap_cvTermCriteria, METH_VARARGS, NULL},
	 { (char *)"CvPoint_x_set", _wrap_CvPoint_x_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint_x_get", _wrap_CvPoint_x_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint_y_set", _wrap_CvPoint_y_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint_y_get", _wrap_CvPoint_y_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPoint", _wrap_new_CvPoint, METH_VARARGS, NULL},
	 { (char *)"delete_CvPoint", _wrap_delete_CvPoint, METH_VARARGS, NULL},
	 { (char *)"CvPoint_swigregister", CvPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvPoint", _wrap_cvPoint, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D32f_x_set", _wrap_CvPoint2D32f_x_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D32f_x_get", _wrap_CvPoint2D32f_x_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D32f_y_set", _wrap_CvPoint2D32f_y_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D32f_y_get", _wrap_CvPoint2D32f_y_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPoint2D32f", _wrap_new_CvPoint2D32f, METH_VARARGS, NULL},
	 { (char *)"delete_CvPoint2D32f", _wrap_delete_CvPoint2D32f, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D32f_swigregister", CvPoint2D32f_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvPoint2D32f", _wrap_cvPoint2D32f, METH_VARARGS, NULL},
	 { (char *)"cvPointTo32f", _wrap_cvPointTo32f, METH_VARARGS, NULL},
	 { (char *)"cvPointFrom32f", _wrap_cvPointFrom32f, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_x_set", _wrap_CvPoint3D32f_x_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_x_get", _wrap_CvPoint3D32f_x_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_y_set", _wrap_CvPoint3D32f_y_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_y_get", _wrap_CvPoint3D32f_y_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_z_set", _wrap_CvPoint3D32f_z_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_z_get", _wrap_CvPoint3D32f_z_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPoint3D32f", _wrap_new_CvPoint3D32f, METH_VARARGS, NULL},
	 { (char *)"delete_CvPoint3D32f", _wrap_delete_CvPoint3D32f, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D32f_swigregister", CvPoint3D32f_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvPoint3D32f", _wrap_cvPoint3D32f, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D64f_x_set", _wrap_CvPoint2D64f_x_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D64f_x_get", _wrap_CvPoint2D64f_x_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D64f_y_set", _wrap_CvPoint2D64f_y_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D64f_y_get", _wrap_CvPoint2D64f_y_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPoint2D64f", _wrap_new_CvPoint2D64f, METH_VARARGS, NULL},
	 { (char *)"delete_CvPoint2D64f", _wrap_delete_CvPoint2D64f, METH_VARARGS, NULL},
	 { (char *)"CvPoint2D64f_swigregister", CvPoint2D64f_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvPoint2D64f", _wrap_cvPoint2D64f, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_x_set", _wrap_CvPoint3D64f_x_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_x_get", _wrap_CvPoint3D64f_x_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_y_set", _wrap_CvPoint3D64f_y_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_y_get", _wrap_CvPoint3D64f_y_get, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_z_set", _wrap_CvPoint3D64f_z_set, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_z_get", _wrap_CvPoint3D64f_z_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPoint3D64f", _wrap_new_CvPoint3D64f, METH_VARARGS, NULL},
	 { (char *)"delete_CvPoint3D64f", _wrap_delete_CvPoint3D64f, METH_VARARGS, NULL},
	 { (char *)"CvPoint3D64f_swigregister", CvPoint3D64f_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvPoint3D64f", _wrap_cvPoint3D64f, METH_VARARGS, NULL},
	 { (char *)"CvSize_width_set", _wrap_CvSize_width_set, METH_VARARGS, NULL},
	 { (char *)"CvSize_width_get", _wrap_CvSize_width_get, METH_VARARGS, NULL},
	 { (char *)"CvSize_height_set", _wrap_CvSize_height_set, METH_VARARGS, NULL},
	 { (char *)"CvSize_height_get", _wrap_CvSize_height_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSize", _wrap_new_CvSize, METH_VARARGS, NULL},
	 { (char *)"delete_CvSize", _wrap_delete_CvSize, METH_VARARGS, NULL},
	 { (char *)"CvSize_swigregister", CvSize_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvSize", _wrap_cvSize, METH_VARARGS, NULL},
	 { (char *)"CvSize2D32f_width_set", _wrap_CvSize2D32f_width_set, METH_VARARGS, NULL},
	 { (char *)"CvSize2D32f_width_get", _wrap_CvSize2D32f_width_get, METH_VARARGS, NULL},
	 { (char *)"CvSize2D32f_height_set", _wrap_CvSize2D32f_height_set, METH_VARARGS, NULL},
	 { (char *)"CvSize2D32f_height_get", _wrap_CvSize2D32f_height_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSize2D32f", _wrap_new_CvSize2D32f, METH_VARARGS, NULL},
	 { (char *)"delete_CvSize2D32f", _wrap_delete_CvSize2D32f, METH_VARARGS, NULL},
	 { (char *)"CvSize2D32f_swigregister", CvSize2D32f_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvSize2D32f", _wrap_cvSize2D32f, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_center_set", _wrap_CvBox2D_center_set, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_center_get", _wrap_CvBox2D_center_get, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_size_set", _wrap_CvBox2D_size_set, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_size_get", _wrap_CvBox2D_size_get, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_angle_set", _wrap_CvBox2D_angle_set, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_angle_get", _wrap_CvBox2D_angle_get, METH_VARARGS, NULL},
	 { (char *)"new_CvBox2D", _wrap_new_CvBox2D, METH_VARARGS, NULL},
	 { (char *)"delete_CvBox2D", _wrap_delete_CvBox2D, METH_VARARGS, NULL},
	 { (char *)"CvBox2D_swigregister", CvBox2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSlice_start_index_set", _wrap_CvSlice_start_index_set, METH_VARARGS, NULL},
	 { (char *)"CvSlice_start_index_get", _wrap_CvSlice_start_index_get, METH_VARARGS, NULL},
	 { (char *)"CvSlice_end_index_set", _wrap_CvSlice_end_index_set, METH_VARARGS, NULL},
	 { (char *)"CvSlice_end_index_get", _wrap_CvSlice_end_index_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSlice", _wrap_new_CvSlice, METH_VARARGS, NULL},
	 { (char *)"delete_CvSlice", _wrap_delete_CvSlice, METH_VARARGS, NULL},
	 { (char *)"CvSlice_swigregister", CvSlice_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvSlice", _wrap_cvSlice, METH_VARARGS, NULL},
	 { (char *)"CvScalar_val_set", _wrap_CvScalar_val_set, METH_VARARGS, NULL},
	 { (char *)"CvScalar_val_get", _wrap_CvScalar_val_get, METH_VARARGS, NULL},
	 { (char *)"new_CvScalar", _wrap_new_CvScalar, METH_VARARGS, NULL},
	 { (char *)"delete_CvScalar", _wrap_delete_CvScalar, METH_VARARGS, NULL},
	 { (char *)"CvScalar_swigregister", CvScalar_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvScalar", _wrap_cvScalar, METH_VARARGS, NULL},
	 { (char *)"cvRealScalar", _wrap_cvRealScalar, METH_VARARGS, NULL},
	 { (char *)"cvScalarAll", _wrap_cvScalarAll, METH_VARARGS, NULL},
	 { (char *)"CvMemBlock_prev_set", _wrap_CvMemBlock_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvMemBlock_prev_get", _wrap_CvMemBlock_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvMemBlock_next_set", _wrap_CvMemBlock_next_set, METH_VARARGS, NULL},
	 { (char *)"CvMemBlock_next_get", _wrap_CvMemBlock_next_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMemBlock", _wrap_new_CvMemBlock, METH_VARARGS, NULL},
	 { (char *)"delete_CvMemBlock", _wrap_delete_CvMemBlock, METH_VARARGS, NULL},
	 { (char *)"CvMemBlock_swigregister", CvMemBlock_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_signature_set", _wrap_CvMemStorage_signature_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_signature_get", _wrap_CvMemStorage_signature_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_bottom_set", _wrap_CvMemStorage_bottom_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_bottom_get", _wrap_CvMemStorage_bottom_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_top_set", _wrap_CvMemStorage_top_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_top_get", _wrap_CvMemStorage_top_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_parent_set", _wrap_CvMemStorage_parent_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_parent_get", _wrap_CvMemStorage_parent_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_block_size_set", _wrap_CvMemStorage_block_size_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_block_size_get", _wrap_CvMemStorage_block_size_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_free_space_set", _wrap_CvMemStorage_free_space_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_free_space_get", _wrap_CvMemStorage_free_space_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvMemStorage", _wrap_delete_CvMemStorage, METH_VARARGS, NULL},
	 { (char *)"CvMemStorage_swigregister", CvMemStorage_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMemStoragePos_top_set", _wrap_CvMemStoragePos_top_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStoragePos_top_get", _wrap_CvMemStoragePos_top_get, METH_VARARGS, NULL},
	 { (char *)"CvMemStoragePos_free_space_set", _wrap_CvMemStoragePos_free_space_set, METH_VARARGS, NULL},
	 { (char *)"CvMemStoragePos_free_space_get", _wrap_CvMemStoragePos_free_space_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMemStoragePos", _wrap_new_CvMemStoragePos, METH_VARARGS, NULL},
	 { (char *)"delete_CvMemStoragePos", _wrap_delete_CvMemStoragePos, METH_VARARGS, NULL},
	 { (char *)"CvMemStoragePos_swigregister", CvMemStoragePos_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_prev_set", _wrap_CvSeqBlock_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_prev_get", _wrap_CvSeqBlock_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_next_set", _wrap_CvSeqBlock_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_next_get", _wrap_CvSeqBlock_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_start_index_set", _wrap_CvSeqBlock_start_index_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_start_index_get", _wrap_CvSeqBlock_start_index_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_count_set", _wrap_CvSeqBlock_count_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_count_get", _wrap_CvSeqBlock_count_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_data_set", _wrap_CvSeqBlock_data_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_data_get", _wrap_CvSeqBlock_data_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSeqBlock", _wrap_new_CvSeqBlock, METH_VARARGS, NULL},
	 { (char *)"delete_CvSeqBlock", _wrap_delete_CvSeqBlock, METH_VARARGS, NULL},
	 { (char *)"CvSeqBlock_swigregister", CvSeqBlock_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSeq_flags_set", _wrap_CvSeq_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_flags_get", _wrap_CvSeq_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_header_size_set", _wrap_CvSeq_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_header_size_get", _wrap_CvSeq_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_h_prev_set", _wrap_CvSeq_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_h_prev_get", _wrap_CvSeq_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_h_next_set", _wrap_CvSeq_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_h_next_get", _wrap_CvSeq_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_v_prev_set", _wrap_CvSeq_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_v_prev_get", _wrap_CvSeq_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_v_next_set", _wrap_CvSeq_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_v_next_get", _wrap_CvSeq_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_total_set", _wrap_CvSeq_total_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_total_get", _wrap_CvSeq_total_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_elem_size_set", _wrap_CvSeq_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_elem_size_get", _wrap_CvSeq_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_block_max_set", _wrap_CvSeq_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_block_max_get", _wrap_CvSeq_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_ptr_set", _wrap_CvSeq_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_ptr_get", _wrap_CvSeq_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_delta_elems_set", _wrap_CvSeq_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_delta_elems_get", _wrap_CvSeq_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_storage_set", _wrap_CvSeq_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_storage_get", _wrap_CvSeq_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_free_blocks_set", _wrap_CvSeq_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_free_blocks_get", _wrap_CvSeq_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvSeq_first_set", _wrap_CvSeq_first_set, METH_VARARGS, NULL},
	 { (char *)"CvSeq_first_get", _wrap_CvSeq_first_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSeq", _wrap_new_CvSeq, METH_VARARGS, NULL},
	 { (char *)"delete_CvSeq", _wrap_delete_CvSeq, METH_VARARGS, NULL},
	 { (char *)"CvSeq_swigregister", CvSeq_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSetElem_flags_set", _wrap_CvSetElem_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvSetElem_flags_get", _wrap_CvSetElem_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvSetElem_next_free_set", _wrap_CvSetElem_next_free_set, METH_VARARGS, NULL},
	 { (char *)"CvSetElem_next_free_get", _wrap_CvSetElem_next_free_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSetElem", _wrap_new_CvSetElem, METH_VARARGS, NULL},
	 { (char *)"delete_CvSetElem", _wrap_delete_CvSetElem, METH_VARARGS, NULL},
	 { (char *)"CvSetElem_swigregister", CvSetElem_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSet_flags_set", _wrap_CvSet_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_flags_get", _wrap_CvSet_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_header_size_set", _wrap_CvSet_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_header_size_get", _wrap_CvSet_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_h_prev_set", _wrap_CvSet_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_h_prev_get", _wrap_CvSet_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_h_next_set", _wrap_CvSet_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_h_next_get", _wrap_CvSet_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_v_prev_set", _wrap_CvSet_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_v_prev_get", _wrap_CvSet_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_v_next_set", _wrap_CvSet_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_v_next_get", _wrap_CvSet_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_total_set", _wrap_CvSet_total_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_total_get", _wrap_CvSet_total_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_elem_size_set", _wrap_CvSet_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_elem_size_get", _wrap_CvSet_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_block_max_set", _wrap_CvSet_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_block_max_get", _wrap_CvSet_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_ptr_set", _wrap_CvSet_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_ptr_get", _wrap_CvSet_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_delta_elems_set", _wrap_CvSet_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_delta_elems_get", _wrap_CvSet_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_storage_set", _wrap_CvSet_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_storage_get", _wrap_CvSet_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_free_blocks_set", _wrap_CvSet_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_free_blocks_get", _wrap_CvSet_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_first_set", _wrap_CvSet_first_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_first_get", _wrap_CvSet_first_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_free_elems_set", _wrap_CvSet_free_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_free_elems_get", _wrap_CvSet_free_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvSet_active_count_set", _wrap_CvSet_active_count_set, METH_VARARGS, NULL},
	 { (char *)"CvSet_active_count_get", _wrap_CvSet_active_count_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSet", _wrap_new_CvSet, METH_VARARGS, NULL},
	 { (char *)"delete_CvSet", _wrap_delete_CvSet, METH_VARARGS, NULL},
	 { (char *)"CvSet_swigregister", CvSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_flags_set", _wrap_CvGraphEdge_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_flags_get", _wrap_CvGraphEdge_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_weight_set", _wrap_CvGraphEdge_weight_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_weight_get", _wrap_CvGraphEdge_weight_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_next_set", _wrap_CvGraphEdge_next_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_next_get", _wrap_CvGraphEdge_next_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_vtx_set", _wrap_CvGraphEdge_vtx_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_vtx_get", _wrap_CvGraphEdge_vtx_get, METH_VARARGS, NULL},
	 { (char *)"new_CvGraphEdge", _wrap_new_CvGraphEdge, METH_VARARGS, NULL},
	 { (char *)"delete_CvGraphEdge", _wrap_delete_CvGraphEdge, METH_VARARGS, NULL},
	 { (char *)"CvGraphEdge_swigregister", CvGraphEdge_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx_flags_set", _wrap_CvGraphVtx_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx_flags_get", _wrap_CvGraphVtx_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx_first_set", _wrap_CvGraphVtx_first_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx_first_get", _wrap_CvGraphVtx_first_get, METH_VARARGS, NULL},
	 { (char *)"new_CvGraphVtx", _wrap_new_CvGraphVtx, METH_VARARGS, NULL},
	 { (char *)"delete_CvGraphVtx", _wrap_delete_CvGraphVtx, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx_swigregister", CvGraphVtx_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_flags_set", _wrap_CvGraphVtx2D_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_flags_get", _wrap_CvGraphVtx2D_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_first_set", _wrap_CvGraphVtx2D_first_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_first_get", _wrap_CvGraphVtx2D_first_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_ptr_set", _wrap_CvGraphVtx2D_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_ptr_get", _wrap_CvGraphVtx2D_ptr_get, METH_VARARGS, NULL},
	 { (char *)"new_CvGraphVtx2D", _wrap_new_CvGraphVtx2D, METH_VARARGS, NULL},
	 { (char *)"delete_CvGraphVtx2D", _wrap_delete_CvGraphVtx2D, METH_VARARGS, NULL},
	 { (char *)"CvGraphVtx2D_swigregister", CvGraphVtx2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvGraph_flags_set", _wrap_CvGraph_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_flags_get", _wrap_CvGraph_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_header_size_set", _wrap_CvGraph_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_header_size_get", _wrap_CvGraph_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_h_prev_set", _wrap_CvGraph_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_h_prev_get", _wrap_CvGraph_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_h_next_set", _wrap_CvGraph_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_h_next_get", _wrap_CvGraph_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_v_prev_set", _wrap_CvGraph_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_v_prev_get", _wrap_CvGraph_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_v_next_set", _wrap_CvGraph_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_v_next_get", _wrap_CvGraph_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_total_set", _wrap_CvGraph_total_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_total_get", _wrap_CvGraph_total_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_elem_size_set", _wrap_CvGraph_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_elem_size_get", _wrap_CvGraph_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_block_max_set", _wrap_CvGraph_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_block_max_get", _wrap_CvGraph_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_ptr_set", _wrap_CvGraph_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_ptr_get", _wrap_CvGraph_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_delta_elems_set", _wrap_CvGraph_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_delta_elems_get", _wrap_CvGraph_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_storage_set", _wrap_CvGraph_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_storage_get", _wrap_CvGraph_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_free_blocks_set", _wrap_CvGraph_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_free_blocks_get", _wrap_CvGraph_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_first_set", _wrap_CvGraph_first_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_first_get", _wrap_CvGraph_first_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_free_elems_set", _wrap_CvGraph_free_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_free_elems_get", _wrap_CvGraph_free_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_active_count_set", _wrap_CvGraph_active_count_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_active_count_get", _wrap_CvGraph_active_count_get, METH_VARARGS, NULL},
	 { (char *)"CvGraph_edges_set", _wrap_CvGraph_edges_set, METH_VARARGS, NULL},
	 { (char *)"CvGraph_edges_get", _wrap_CvGraph_edges_get, METH_VARARGS, NULL},
	 { (char *)"new_CvGraph", _wrap_new_CvGraph, METH_VARARGS, NULL},
	 { (char *)"delete_CvGraph", _wrap_delete_CvGraph, METH_VARARGS, NULL},
	 { (char *)"CvGraph_swigregister", CvGraph_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvChain_flags_set", _wrap_CvChain_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_flags_get", _wrap_CvChain_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_header_size_set", _wrap_CvChain_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_header_size_get", _wrap_CvChain_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_h_prev_set", _wrap_CvChain_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_h_prev_get", _wrap_CvChain_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_h_next_set", _wrap_CvChain_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_h_next_get", _wrap_CvChain_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_v_prev_set", _wrap_CvChain_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_v_prev_get", _wrap_CvChain_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_v_next_set", _wrap_CvChain_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_v_next_get", _wrap_CvChain_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_total_set", _wrap_CvChain_total_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_total_get", _wrap_CvChain_total_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_elem_size_set", _wrap_CvChain_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_elem_size_get", _wrap_CvChain_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_block_max_set", _wrap_CvChain_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_block_max_get", _wrap_CvChain_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_ptr_set", _wrap_CvChain_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_ptr_get", _wrap_CvChain_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_delta_elems_set", _wrap_CvChain_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_delta_elems_get", _wrap_CvChain_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_storage_set", _wrap_CvChain_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_storage_get", _wrap_CvChain_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_free_blocks_set", _wrap_CvChain_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_free_blocks_get", _wrap_CvChain_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_first_set", _wrap_CvChain_first_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_first_get", _wrap_CvChain_first_get, METH_VARARGS, NULL},
	 { (char *)"CvChain_origin_set", _wrap_CvChain_origin_set, METH_VARARGS, NULL},
	 { (char *)"CvChain_origin_get", _wrap_CvChain_origin_get, METH_VARARGS, NULL},
	 { (char *)"new_CvChain", _wrap_new_CvChain, METH_VARARGS, NULL},
	 { (char *)"delete_CvChain", _wrap_delete_CvChain, METH_VARARGS, NULL},
	 { (char *)"CvChain_swigregister", CvChain_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvContour_flags_set", _wrap_CvContour_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_flags_get", _wrap_CvContour_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_header_size_set", _wrap_CvContour_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_header_size_get", _wrap_CvContour_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_h_prev_set", _wrap_CvContour_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_h_prev_get", _wrap_CvContour_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_h_next_set", _wrap_CvContour_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_h_next_get", _wrap_CvContour_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_v_prev_set", _wrap_CvContour_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_v_prev_get", _wrap_CvContour_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_v_next_set", _wrap_CvContour_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_v_next_get", _wrap_CvContour_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_total_set", _wrap_CvContour_total_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_total_get", _wrap_CvContour_total_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_elem_size_set", _wrap_CvContour_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_elem_size_get", _wrap_CvContour_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_block_max_set", _wrap_CvContour_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_block_max_get", _wrap_CvContour_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_ptr_set", _wrap_CvContour_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_ptr_get", _wrap_CvContour_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_delta_elems_set", _wrap_CvContour_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_delta_elems_get", _wrap_CvContour_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_storage_set", _wrap_CvContour_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_storage_get", _wrap_CvContour_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_free_blocks_set", _wrap_CvContour_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_free_blocks_get", _wrap_CvContour_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_first_set", _wrap_CvContour_first_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_first_get", _wrap_CvContour_first_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_rect_set", _wrap_CvContour_rect_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_rect_get", _wrap_CvContour_rect_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_color_set", _wrap_CvContour_color_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_color_get", _wrap_CvContour_color_get, METH_VARARGS, NULL},
	 { (char *)"CvContour_reserved_set", _wrap_CvContour_reserved_set, METH_VARARGS, NULL},
	 { (char *)"CvContour_reserved_get", _wrap_CvContour_reserved_get, METH_VARARGS, NULL},
	 { (char *)"new_CvContour", _wrap_new_CvContour, METH_VARARGS, NULL},
	 { (char *)"delete_CvContour", _wrap_delete_CvContour, METH_VARARGS, NULL},
	 { (char *)"CvContour_swigregister", CvContour_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_header_size_set", _wrap_CvSeqWriter_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_header_size_get", _wrap_CvSeqWriter_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_seq_set", _wrap_CvSeqWriter_seq_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_seq_get", _wrap_CvSeqWriter_seq_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_set", _wrap_CvSeqWriter_block_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_get", _wrap_CvSeqWriter_block_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_ptr_set", _wrap_CvSeqWriter_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_ptr_get", _wrap_CvSeqWriter_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_min_set", _wrap_CvSeqWriter_block_min_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_min_get", _wrap_CvSeqWriter_block_min_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_max_set", _wrap_CvSeqWriter_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_block_max_get", _wrap_CvSeqWriter_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_reserved_set", _wrap_CvSeqWriter_reserved_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_reserved_get", _wrap_CvSeqWriter_reserved_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSeqWriter", _wrap_new_CvSeqWriter, METH_VARARGS, NULL},
	 { (char *)"delete_CvSeqWriter", _wrap_delete_CvSeqWriter, METH_VARARGS, NULL},
	 { (char *)"CvSeqWriter_swigregister", CvSeqWriter_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_header_size_set", _wrap_CvSeqReader_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_header_size_get", _wrap_CvSeqReader_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_seq_set", _wrap_CvSeqReader_seq_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_seq_get", _wrap_CvSeqReader_seq_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_set", _wrap_CvSeqReader_block_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_get", _wrap_CvSeqReader_block_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_ptr_set", _wrap_CvSeqReader_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_ptr_get", _wrap_CvSeqReader_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_min_set", _wrap_CvSeqReader_block_min_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_min_get", _wrap_CvSeqReader_block_min_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_max_set", _wrap_CvSeqReader_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_block_max_get", _wrap_CvSeqReader_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_delta_index_set", _wrap_CvSeqReader_delta_index_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_delta_index_get", _wrap_CvSeqReader_delta_index_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_prev_elem_set", _wrap_CvSeqReader_prev_elem_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_prev_elem_get", _wrap_CvSeqReader_prev_elem_get, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_reserved_set", _wrap_CvSeqReader_reserved_set, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_reserved_get", _wrap_CvSeqReader_reserved_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSeqReader", _wrap_new_CvSeqReader, METH_VARARGS, NULL},
	 { (char *)"delete_CvSeqReader", _wrap_delete_CvSeqReader, METH_VARARGS, NULL},
	 { (char *)"CvSeqReader_swigregister", CvSeqReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvAttrList_attr_set", _wrap_CvAttrList_attr_set, METH_VARARGS, NULL},
	 { (char *)"CvAttrList_attr_get", _wrap_CvAttrList_attr_get, METH_VARARGS, NULL},
	 { (char *)"CvAttrList_next_set", _wrap_CvAttrList_next_set, METH_VARARGS, NULL},
	 { (char *)"CvAttrList_next_get", _wrap_CvAttrList_next_get, METH_VARARGS, NULL},
	 { (char *)"new_CvAttrList", _wrap_new_CvAttrList, METH_VARARGS, NULL},
	 { (char *)"delete_CvAttrList", _wrap_delete_CvAttrList, METH_VARARGS, NULL},
	 { (char *)"CvAttrList_swigregister", CvAttrList_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvAttrList", _wrap_cvAttrList, METH_VARARGS, NULL},
	 { (char *)"CvString_len_set", _wrap_CvString_len_set, METH_VARARGS, NULL},
	 { (char *)"CvString_len_get", _wrap_CvString_len_get, METH_VARARGS, NULL},
	 { (char *)"CvString_ptr_set", _wrap_CvString_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvString_ptr_get", _wrap_CvString_ptr_get, METH_VARARGS, NULL},
	 { (char *)"new_CvString", _wrap_new_CvString, METH_VARARGS, NULL},
	 { (char *)"delete_CvString", _wrap_delete_CvString, METH_VARARGS, NULL},
	 { (char *)"CvString_swigregister", CvString_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_hashval_set", _wrap_CvStringHashNode_hashval_set, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_hashval_get", _wrap_CvStringHashNode_hashval_get, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_str_set", _wrap_CvStringHashNode_str_set, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_str_get", _wrap_CvStringHashNode_str_get, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_next_set", _wrap_CvStringHashNode_next_set, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_next_get", _wrap_CvStringHashNode_next_get, METH_VARARGS, NULL},
	 { (char *)"new_CvStringHashNode", _wrap_new_CvStringHashNode, METH_VARARGS, NULL},
	 { (char *)"delete_CvStringHashNode", _wrap_delete_CvStringHashNode, METH_VARARGS, NULL},
	 { (char *)"CvStringHashNode_swigregister", CvStringHashNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_tag_set", _wrap_CvFileNode_tag_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_tag_get", _wrap_CvFileNode_tag_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_info_set", _wrap_CvFileNode_info_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_info_get", _wrap_CvFileNode_info_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_get", _wrap_CvFileNode_data_get, METH_VARARGS, NULL},
	 { (char *)"new_CvFileNode", _wrap_new_CvFileNode, METH_VARARGS, NULL},
	 { (char *)"delete_CvFileNode", _wrap_delete_CvFileNode, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_swigregister", CvFileNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_f_set", _wrap_CvFileNode_data_f_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_f_get", _wrap_CvFileNode_data_f_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_i_set", _wrap_CvFileNode_data_i_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_i_get", _wrap_CvFileNode_data_i_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_str_set", _wrap_CvFileNode_data_str_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_str_get", _wrap_CvFileNode_data_str_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_seq_set", _wrap_CvFileNode_data_seq_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_seq_get", _wrap_CvFileNode_data_seq_get, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_map_set", _wrap_CvFileNode_data_map_set, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_map_get", _wrap_CvFileNode_data_map_get, METH_VARARGS, NULL},
	 { (char *)"new_CvFileNode_data", _wrap_new_CvFileNode_data, METH_VARARGS, NULL},
	 { (char *)"delete_CvFileNode_data", _wrap_delete_CvFileNode_data, METH_VARARGS, NULL},
	 { (char *)"CvFileNode_data_swigregister", CvFileNode_data_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_flags_set", _wrap_CvTypeInfo_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_flags_get", _wrap_CvTypeInfo_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_header_size_set", _wrap_CvTypeInfo_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_header_size_get", _wrap_CvTypeInfo_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_prev_set", _wrap_CvTypeInfo_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_prev_get", _wrap_CvTypeInfo_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_next_set", _wrap_CvTypeInfo_next_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_next_get", _wrap_CvTypeInfo_next_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_type_name_set", _wrap_CvTypeInfo_type_name_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_type_name_get", _wrap_CvTypeInfo_type_name_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_is_instance_set", _wrap_CvTypeInfo_is_instance_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_is_instance_get", _wrap_CvTypeInfo_is_instance_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_release_set", _wrap_CvTypeInfo_release_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_release_get", _wrap_CvTypeInfo_release_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_read_set", _wrap_CvTypeInfo_read_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_read_get", _wrap_CvTypeInfo_read_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_write_set", _wrap_CvTypeInfo_write_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_write_get", _wrap_CvTypeInfo_write_get, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_clone_set", _wrap_CvTypeInfo_clone_set, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_clone_get", _wrap_CvTypeInfo_clone_get, METH_VARARGS, NULL},
	 { (char *)"new_CvTypeInfo", _wrap_new_CvTypeInfo, METH_VARARGS, NULL},
	 { (char *)"delete_CvTypeInfo", _wrap_delete_CvTypeInfo, METH_VARARGS, NULL},
	 { (char *)"CvTypeInfo_swigregister", CvTypeInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_func_addr_set", _wrap_CvPluginFuncInfo_func_addr_set, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_func_addr_get", _wrap_CvPluginFuncInfo_func_addr_get, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_default_func_addr_set", _wrap_CvPluginFuncInfo_default_func_addr_set, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_default_func_addr_get", _wrap_CvPluginFuncInfo_default_func_addr_get, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_func_names_set", _wrap_CvPluginFuncInfo_func_names_set, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_func_names_get", _wrap_CvPluginFuncInfo_func_names_get, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_search_modules_set", _wrap_CvPluginFuncInfo_search_modules_set, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_search_modules_get", _wrap_CvPluginFuncInfo_search_modules_get, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_loaded_from_set", _wrap_CvPluginFuncInfo_loaded_from_set, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_loaded_from_get", _wrap_CvPluginFuncInfo_loaded_from_get, METH_VARARGS, NULL},
	 { (char *)"new_CvPluginFuncInfo", _wrap_new_CvPluginFuncInfo, METH_VARARGS, NULL},
	 { (char *)"delete_CvPluginFuncInfo", _wrap_delete_CvPluginFuncInfo, METH_VARARGS, NULL},
	 { (char *)"CvPluginFuncInfo_swigregister", CvPluginFuncInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_next_set", _wrap_CvModuleInfo_next_set, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_next_get", _wrap_CvModuleInfo_next_get, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_name_set", _wrap_CvModuleInfo_name_set, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_name_get", _wrap_CvModuleInfo_name_get, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_version_set", _wrap_CvModuleInfo_version_set, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_version_get", _wrap_CvModuleInfo_version_get, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_func_tab_set", _wrap_CvModuleInfo_func_tab_set, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_func_tab_get", _wrap_CvModuleInfo_func_tab_get, METH_VARARGS, NULL},
	 { (char *)"new_CvModuleInfo", _wrap_new_CvModuleInfo, METH_VARARGS, NULL},
	 { (char *)"delete_CvModuleInfo", _wrap_delete_CvModuleInfo, METH_VARARGS, NULL},
	 { (char *)"CvModuleInfo_swigregister", CvModuleInfo_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvAlloc", _wrap_cvAlloc, METH_VARARGS, NULL},
	 { (char *)"cvFree", _wrap_cvFree, METH_VARARGS, NULL},
	 { (char *)"cvCreateImageHeader", _wrap_cvCreateImageHeader, METH_VARARGS, NULL},
	 { (char *)"cvInitImageHeader", _wrap_cvInitImageHeader, METH_VARARGS, NULL},
	 { (char *)"cvCreateImage", _wrap_cvCreateImage, METH_VARARGS, NULL},
	 { (char *)"cvReleaseImageHeader", _wrap_cvReleaseImageHeader, METH_VARARGS, NULL},
	 { (char *)"cvReleaseImage", _wrap_cvReleaseImage, METH_VARARGS, NULL},
	 { (char *)"cvCloneImage", _wrap_cvCloneImage, METH_VARARGS, NULL},
	 { (char *)"cvSetImageCOI", _wrap_cvSetImageCOI, METH_VARARGS, NULL},
	 { (char *)"cvGetImageCOI", _wrap_cvGetImageCOI, METH_VARARGS, NULL},
	 { (char *)"cvSetImageROI", _wrap_cvSetImageROI, METH_VARARGS, NULL},
	 { (char *)"cvResetImageROI", _wrap_cvResetImageROI, METH_VARARGS, NULL},
	 { (char *)"cvGetImageROI", _wrap_cvGetImageROI, METH_VARARGS, NULL},
	 { (char *)"cvCreateMatHeader", _wrap_cvCreateMatHeader, METH_VARARGS, NULL},
	 { (char *)"cvInitMatHeader", _wrap_cvInitMatHeader, METH_VARARGS, NULL},
	 { (char *)"cvCreateMat", _wrap_cvCreateMat, METH_VARARGS, NULL},
	 { (char *)"cvReleaseMat", _wrap_cvReleaseMat, METH_VARARGS, NULL},
	 { (char *)"cvDecRefData", _wrap_cvDecRefData, METH_VARARGS, NULL},
	 { (char *)"cvIncRefData", _wrap_cvIncRefData, METH_VARARGS, NULL},
	 { (char *)"cvCloneMat", _wrap_cvCloneMat, METH_VARARGS, NULL},
	 { (char *)"cvGetSubRect", _wrap_cvGetSubRect, METH_VARARGS, NULL},
	 { (char *)"cvGetRows", _wrap_cvGetRows, METH_VARARGS, NULL},
	 { (char *)"cvGetRow", _wrap_cvGetRow, METH_VARARGS, NULL},
	 { (char *)"cvGetCols", _wrap_cvGetCols, METH_VARARGS, NULL},
	 { (char *)"cvGetCol", _wrap_cvGetCol, METH_VARARGS, NULL},
	 { (char *)"cvGetDiag", _wrap_cvGetDiag, METH_VARARGS, NULL},
	 { (char *)"cvScalarToRawData", _wrap_cvScalarToRawData, METH_VARARGS, NULL},
	 { (char *)"cvRawDataToScalar", _wrap_cvRawDataToScalar, METH_VARARGS, NULL},
	 { (char *)"cvCreateMatNDHeader", _wrap_cvCreateMatNDHeader, METH_VARARGS, NULL},
	 { (char *)"cvCreateMatND", _wrap_cvCreateMatND, METH_VARARGS, NULL},
	 { (char *)"cvInitMatNDHeader", _wrap_cvInitMatNDHeader, METH_VARARGS, NULL},
	 { (char *)"cvReleaseMatND", _wrap_cvReleaseMatND, METH_VARARGS, NULL},
	 { (char *)"cvCloneMatND", _wrap_cvCloneMatND, METH_VARARGS, NULL},
	 { (char *)"cvCreateSparseMat", _wrap_cvCreateSparseMat, METH_VARARGS, NULL},
	 { (char *)"cvReleaseSparseMat", _wrap_cvReleaseSparseMat, METH_VARARGS, NULL},
	 { (char *)"cvCloneSparseMat", _wrap_cvCloneSparseMat, METH_VARARGS, NULL},
	 { (char *)"cvInitSparseMatIterator", _wrap_cvInitSparseMatIterator, METH_VARARGS, NULL},
	 { (char *)"cvGetNextSparseNode", _wrap_cvGetNextSparseNode, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_count_set", _wrap_CvNArrayIterator_count_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_count_get", _wrap_CvNArrayIterator_count_get, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_dims_set", _wrap_CvNArrayIterator_dims_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_dims_get", _wrap_CvNArrayIterator_dims_get, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_size_set", _wrap_CvNArrayIterator_size_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_size_get", _wrap_CvNArrayIterator_size_get, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_ptr_set", _wrap_CvNArrayIterator_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_ptr_get", _wrap_CvNArrayIterator_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_stack_set", _wrap_CvNArrayIterator_stack_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_stack_get", _wrap_CvNArrayIterator_stack_get, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_hdr_set", _wrap_CvNArrayIterator_hdr_set, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_hdr_get", _wrap_CvNArrayIterator_hdr_get, METH_VARARGS, NULL},
	 { (char *)"new_CvNArrayIterator", _wrap_new_CvNArrayIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CvNArrayIterator", _wrap_delete_CvNArrayIterator, METH_VARARGS, NULL},
	 { (char *)"CvNArrayIterator_swigregister", CvNArrayIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvInitNArrayIterator", _wrap_cvInitNArrayIterator, METH_VARARGS, NULL},
	 { (char *)"cvNextNArraySlice", _wrap_cvNextNArraySlice, METH_VARARGS, NULL},
	 { (char *)"cvGetElemType", _wrap_cvGetElemType, METH_VARARGS, NULL},
	 { (char *)"cvGetDims", _wrap_cvGetDims, METH_VARARGS, NULL},
	 { (char *)"cvGetDimSize", _wrap_cvGetDimSize, METH_VARARGS, NULL},
	 { (char *)"cvPtr1D", _wrap_cvPtr1D, METH_VARARGS, NULL},
	 { (char *)"cvPtr2D", _wrap_cvPtr2D, METH_VARARGS, NULL},
	 { (char *)"cvPtr3D", _wrap_cvPtr3D, METH_VARARGS, NULL},
	 { (char *)"cvPtrND", _wrap_cvPtrND, METH_VARARGS, NULL},
	 { (char *)"cvGet1D", _wrap_cvGet1D, METH_VARARGS, NULL},
	 { (char *)"cvGet2D", _wrap_cvGet2D, METH_VARARGS, NULL},
	 { (char *)"cvGet3D", _wrap_cvGet3D, METH_VARARGS, NULL},
	 { (char *)"cvGetND", _wrap_cvGetND, METH_VARARGS, NULL},
	 { (char *)"cvGetReal1D", _wrap_cvGetReal1D, METH_VARARGS, NULL},
	 { (char *)"cvGetReal2D", _wrap_cvGetReal2D, METH_VARARGS, NULL},
	 { (char *)"cvGetReal3D", _wrap_cvGetReal3D, METH_VARARGS, NULL},
	 { (char *)"cvGetRealND", _wrap_cvGetRealND, METH_VARARGS, NULL},
	 { (char *)"cvSet1D", _wrap_cvSet1D, METH_VARARGS, NULL},
	 { (char *)"cvSet2D", _wrap_cvSet2D, METH_VARARGS, NULL},
	 { (char *)"cvSet3D", _wrap_cvSet3D, METH_VARARGS, NULL},
	 { (char *)"cvSetND", _wrap_cvSetND, METH_VARARGS, NULL},
	 { (char *)"cvSetReal1D", _wrap_cvSetReal1D, METH_VARARGS, NULL},
	 { (char *)"cvSetReal2D", _wrap_cvSetReal2D, METH_VARARGS, NULL},
	 { (char *)"cvSetReal3D", _wrap_cvSetReal3D, METH_VARARGS, NULL},
	 { (char *)"cvSetRealND", _wrap_cvSetRealND, METH_VARARGS, NULL},
	 { (char *)"cvClearND", _wrap_cvClearND, METH_VARARGS, NULL},
	 { (char *)"cvGetMat", _wrap_cvGetMat, METH_VARARGS, NULL},
	 { (char *)"cvGetImage", _wrap_cvGetImage, METH_VARARGS, NULL},
	 { (char *)"cvReshapeMatND", _wrap_cvReshapeMatND, METH_VARARGS, NULL},
	 { (char *)"cvReshape", _wrap_cvReshape, METH_VARARGS, NULL},
	 { (char *)"cvRepeat", _wrap_cvRepeat, METH_VARARGS, NULL},
	 { (char *)"cvCreateData", _wrap_cvCreateData, METH_VARARGS, NULL},
	 { (char *)"cvReleaseData", _wrap_cvReleaseData, METH_VARARGS, NULL},
	 { (char *)"cvSetData", _wrap_cvSetData, METH_VARARGS, NULL},
	 { (char *)"cvGetRawData", _wrap_cvGetRawData, METH_VARARGS, NULL},
	 { (char *)"cvGetSize", _wrap_cvGetSize, METH_VARARGS, NULL},
	 { (char *)"cvCopy", _wrap_cvCopy, METH_VARARGS, NULL},
	 { (char *)"cvSet", _wrap_cvSet, METH_VARARGS, NULL},
	 { (char *)"cvSetZero", _wrap_cvSetZero, METH_VARARGS, NULL},
	 { (char *)"cvSplit", _wrap_cvSplit, METH_VARARGS, NULL},
	 { (char *)"cvMerge", _wrap_cvMerge, METH_VARARGS, NULL},
	 { (char *)"cvConvertScale", _wrap_cvConvertScale, METH_VARARGS, NULL},
	 { (char *)"cvConvertScaleAbs", _wrap_cvConvertScaleAbs, METH_VARARGS, NULL},
	 { (char *)"cvCheckTermCriteria", _wrap_cvCheckTermCriteria, METH_VARARGS, NULL},
	 { (char *)"cvAdd", _wrap_cvAdd, METH_VARARGS, NULL},
	 { (char *)"cvAddS", _wrap_cvAddS, METH_VARARGS, NULL},
	 { (char *)"cvSub", _wrap_cvSub, METH_VARARGS, NULL},
	 { (char *)"cvSubS", _wrap_cvSubS, METH_VARARGS, NULL},
	 { (char *)"cvSubRS", _wrap_cvSubRS, METH_VARARGS, NULL},
	 { (char *)"cvMul", _wrap_cvMul, METH_VARARGS, NULL},
	 { (char *)"cvDiv", _wrap_cvDiv, METH_VARARGS, NULL},
	 { (char *)"cvScaleAdd", _wrap_cvScaleAdd, METH_VARARGS, NULL},
	 { (char *)"cvAddWeighted", _wrap_cvAddWeighted, METH_VARARGS, NULL},
	 { (char *)"cvDotProduct", _wrap_cvDotProduct, METH_VARARGS, NULL},
	 { (char *)"cvAnd", _wrap_cvAnd, METH_VARARGS, NULL},
	 { (char *)"cvAndS", _wrap_cvAndS, METH_VARARGS, NULL},
	 { (char *)"cvOr", _wrap_cvOr, METH_VARARGS, NULL},
	 { (char *)"cvOrS", _wrap_cvOrS, METH_VARARGS, NULL},
	 { (char *)"cvXor", _wrap_cvXor, METH_VARARGS, NULL},
	 { (char *)"cvXorS", _wrap_cvXorS, METH_VARARGS, NULL},
	 { (char *)"cvNot", _wrap_cvNot, METH_VARARGS, NULL},
	 { (char *)"cvInRange", _wrap_cvInRange, METH_VARARGS, NULL},
	 { (char *)"cvInRangeS", _wrap_cvInRangeS, METH_VARARGS, NULL},
	 { (char *)"cvCmp", _wrap_cvCmp, METH_VARARGS, NULL},
	 { (char *)"cvCmpS", _wrap_cvCmpS, METH_VARARGS, NULL},
	 { (char *)"cvMin", _wrap_cvMin, METH_VARARGS, NULL},
	 { (char *)"cvMax", _wrap_cvMax, METH_VARARGS, NULL},
	 { (char *)"cvMinS", _wrap_cvMinS, METH_VARARGS, NULL},
	 { (char *)"cvMaxS", _wrap_cvMaxS, METH_VARARGS, NULL},
	 { (char *)"cvAbsDiff", _wrap_cvAbsDiff, METH_VARARGS, NULL},
	 { (char *)"cvAbsDiffS", _wrap_cvAbsDiffS, METH_VARARGS, NULL},
	 { (char *)"cvCartToPolar", _wrap_cvCartToPolar, METH_VARARGS, NULL},
	 { (char *)"cvPolarToCart", _wrap_cvPolarToCart, METH_VARARGS, NULL},
	 { (char *)"cvPow", _wrap_cvPow, METH_VARARGS, NULL},
	 { (char *)"cvExp", _wrap_cvExp, METH_VARARGS, NULL},
	 { (char *)"cvLog", _wrap_cvLog, METH_VARARGS, NULL},
	 { (char *)"cvFastArctan", _wrap_cvFastArctan, METH_VARARGS, NULL},
	 { (char *)"cvCbrt", _wrap_cvCbrt, METH_VARARGS, NULL},
	 { (char *)"cvCheckArr", _wrap_cvCheckArr, METH_VARARGS, NULL},
	 { (char *)"cvRandArr", _wrap_cvRandArr, METH_VARARGS, NULL},
	 { (char *)"cvSolveCubic", _wrap_cvSolveCubic, METH_VARARGS, NULL},
	 { (char *)"cvCrossProduct", _wrap_cvCrossProduct, METH_VARARGS, NULL},
	 { (char *)"cvGEMM", _wrap_cvGEMM, METH_VARARGS, NULL},
	 { (char *)"cvTransform", _wrap_cvTransform, METH_VARARGS, NULL},
	 { (char *)"cvPerspectiveTransform", _wrap_cvPerspectiveTransform, METH_VARARGS, NULL},
	 { (char *)"cvMulTransposed", _wrap_cvMulTransposed, METH_VARARGS, NULL},
	 { (char *)"cvTranspose", _wrap_cvTranspose, METH_VARARGS, NULL},
	 { (char *)"cvFlip", _wrap_cvFlip, METH_VARARGS, NULL},
	 { (char *)"cvSVD", _wrap_cvSVD, METH_VARARGS, NULL},
	 { (char *)"cvSVBkSb", _wrap_cvSVBkSb, METH_VARARGS, NULL},
	 { (char *)"cvInvert", _wrap_cvInvert, METH_VARARGS, NULL},
	 { (char *)"cvSolve", _wrap_cvSolve, METH_VARARGS, NULL},
	 { (char *)"cvDet", _wrap_cvDet, METH_VARARGS, NULL},
	 { (char *)"cvTrace", _wrap_cvTrace, METH_VARARGS, NULL},
	 { (char *)"cvEigenVV", _wrap_cvEigenVV, METH_VARARGS, NULL},
	 { (char *)"cvSetIdentity", _wrap_cvSetIdentity, METH_VARARGS, NULL},
	 { (char *)"cvCalcCovarMatrix", _wrap_cvCalcCovarMatrix, METH_VARARGS, NULL},
	 { (char *)"cvMahalanobis", _wrap_cvMahalanobis, METH_VARARGS, NULL},
	 { (char *)"cvSum", _wrap_cvSum, METH_VARARGS, NULL},
	 { (char *)"cvCountNonZero", _wrap_cvCountNonZero, METH_VARARGS, NULL},
	 { (char *)"cvAvg", _wrap_cvAvg, METH_VARARGS, NULL},
	 { (char *)"cvAvgSdv", _wrap_cvAvgSdv, METH_VARARGS, NULL},
	 { (char *)"cvMinMaxLoc", _wrap_cvMinMaxLoc, METH_VARARGS, NULL},
	 { (char *)"cvNorm", _wrap_cvNorm, METH_VARARGS, NULL},
	 { (char *)"cvDFT", _wrap_cvDFT, METH_VARARGS, NULL},
	 { (char *)"cvMulSpectrums", _wrap_cvMulSpectrums, METH_VARARGS, NULL},
	 { (char *)"cvGetOptimalDFTSize", _wrap_cvGetOptimalDFTSize, METH_VARARGS, NULL},
	 { (char *)"cvDCT", _wrap_cvDCT, METH_VARARGS, NULL},
	 { (char *)"cvSliceLength", _wrap_cvSliceLength, METH_VARARGS, NULL},
	 { (char *)"cvCreateMemStorage", _wrap_cvCreateMemStorage, METH_VARARGS, NULL},
	 { (char *)"cvCreateChildMemStorage", _wrap_cvCreateChildMemStorage, METH_VARARGS, NULL},
	 { (char *)"cvReleaseMemStorage", _wrap_cvReleaseMemStorage, METH_VARARGS, NULL},
	 { (char *)"cvClearMemStorage", _wrap_cvClearMemStorage, METH_VARARGS, NULL},
	 { (char *)"cvSaveMemStoragePos", _wrap_cvSaveMemStoragePos, METH_VARARGS, NULL},
	 { (char *)"cvRestoreMemStoragePos", _wrap_cvRestoreMemStoragePos, METH_VARARGS, NULL},
	 { (char *)"cvMemStorageAlloc", _wrap_cvMemStorageAlloc, METH_VARARGS, NULL},
	 { (char *)"cvMemStorageAllocString", _wrap_cvMemStorageAllocString, METH_VARARGS, NULL},
	 { (char *)"cvCreateSeq", _wrap_cvCreateSeq, METH_VARARGS, NULL},
	 { (char *)"cvSetSeqBlockSize", _wrap_cvSetSeqBlockSize, METH_VARARGS, NULL},
	 { (char *)"cvSeqPush", _wrap_cvSeqPush, METH_VARARGS, NULL},
	 { (char *)"cvSeqPushFront", _wrap_cvSeqPushFront, METH_VARARGS, NULL},
	 { (char *)"cvSeqPop", _wrap_cvSeqPop, METH_VARARGS, NULL},
	 { (char *)"cvSeqPopFront", _wrap_cvSeqPopFront, METH_VARARGS, NULL},
	 { (char *)"cvSeqPushMulti", _wrap_cvSeqPushMulti, METH_VARARGS, NULL},
	 { (char *)"cvSeqPopMulti", _wrap_cvSeqPopMulti, METH_VARARGS, NULL},
	 { (char *)"cvSeqInsert", _wrap_cvSeqInsert, METH_VARARGS, NULL},
	 { (char *)"cvSeqRemove", _wrap_cvSeqRemove, METH_VARARGS, NULL},
	 { (char *)"cvClearSeq", _wrap_cvClearSeq, METH_VARARGS, NULL},
	 { (char *)"cvGetSeqElem", _wrap_cvGetSeqElem, METH_VARARGS, NULL},
	 { (char *)"cvSeqElemIdx", _wrap_cvSeqElemIdx, METH_VARARGS, NULL},
	 { (char *)"cvStartAppendToSeq", _wrap_cvStartAppendToSeq, METH_VARARGS, NULL},
	 { (char *)"cvStartWriteSeq", _wrap_cvStartWriteSeq, METH_VARARGS, NULL},
	 { (char *)"cvEndWriteSeq", _wrap_cvEndWriteSeq, METH_VARARGS, NULL},
	 { (char *)"cvFlushSeqWriter", _wrap_cvFlushSeqWriter, METH_VARARGS, NULL},
	 { (char *)"cvStartReadSeq", _wrap_cvStartReadSeq, METH_VARARGS, NULL},
	 { (char *)"cvGetSeqReaderPos", _wrap_cvGetSeqReaderPos, METH_VARARGS, NULL},
	 { (char *)"cvSetSeqReaderPos", _wrap_cvSetSeqReaderPos, METH_VARARGS, NULL},
	 { (char *)"cvCvtSeqToArray", _wrap_cvCvtSeqToArray, METH_VARARGS, NULL},
	 { (char *)"cvMakeSeqHeaderForArray", _wrap_cvMakeSeqHeaderForArray, METH_VARARGS, NULL},
	 { (char *)"cvSeqSlice", _wrap_cvSeqSlice, METH_VARARGS, NULL},
	 { (char *)"cvCloneSeq", _wrap_cvCloneSeq, METH_VARARGS, NULL},
	 { (char *)"cvSeqRemoveSlice", _wrap_cvSeqRemoveSlice, METH_VARARGS, NULL},
	 { (char *)"cvSeqInsertSlice", _wrap_cvSeqInsertSlice, METH_VARARGS, NULL},
	 { (char *)"cvSeqSort", _wrap_cvSeqSort, METH_VARARGS, NULL},
	 { (char *)"cvSeqSearch", _wrap_cvSeqSearch, METH_VARARGS, NULL},
	 { (char *)"cvSeqInvert", _wrap_cvSeqInvert, METH_VARARGS, NULL},
	 { (char *)"cvSeqPartition", _wrap_cvSeqPartition, METH_VARARGS, NULL},
	 { (char *)"cvChangeSeqBlock", _wrap_cvChangeSeqBlock, METH_VARARGS, NULL},
	 { (char *)"cvCreateSeqBlock", _wrap_cvCreateSeqBlock, METH_VARARGS, NULL},
	 { (char *)"cvCreateSet", _wrap_cvCreateSet, METH_VARARGS, NULL},
	 { (char *)"cvSetAdd", _wrap_cvSetAdd, METH_VARARGS, NULL},
	 { (char *)"cvSetNew", _wrap_cvSetNew, METH_VARARGS, NULL},
	 { (char *)"cvSetRemoveByPtr", _wrap_cvSetRemoveByPtr, METH_VARARGS, NULL},
	 { (char *)"cvSetRemove", _wrap_cvSetRemove, METH_VARARGS, NULL},
	 { (char *)"cvGetSetElem", _wrap_cvGetSetElem, METH_VARARGS, NULL},
	 { (char *)"cvClearSet", _wrap_cvClearSet, METH_VARARGS, NULL},
	 { (char *)"cvCreateGraph", _wrap_cvCreateGraph, METH_VARARGS, NULL},
	 { (char *)"cvGraphAddVtx", _wrap_cvGraphAddVtx, METH_VARARGS, NULL},
	 { (char *)"cvGraphRemoveVtx", _wrap_cvGraphRemoveVtx, METH_VARARGS, NULL},
	 { (char *)"cvGraphRemoveVtxByPtr", _wrap_cvGraphRemoveVtxByPtr, METH_VARARGS, NULL},
	 { (char *)"cvGraphAddEdge", _wrap_cvGraphAddEdge, METH_VARARGS, NULL},
	 { (char *)"cvGraphAddEdgeByPtr", _wrap_cvGraphAddEdgeByPtr, METH_VARARGS, NULL},
	 { (char *)"cvGraphRemoveEdge", _wrap_cvGraphRemoveEdge, METH_VARARGS, NULL},
	 { (char *)"cvGraphRemoveEdgeByPtr", _wrap_cvGraphRemoveEdgeByPtr, METH_VARARGS, NULL},
	 { (char *)"cvFindGraphEdge", _wrap_cvFindGraphEdge, METH_VARARGS, NULL},
	 { (char *)"cvFindGraphEdgeByPtr", _wrap_cvFindGraphEdgeByPtr, METH_VARARGS, NULL},
	 { (char *)"cvClearGraph", _wrap_cvClearGraph, METH_VARARGS, NULL},
	 { (char *)"cvGraphVtxDegree", _wrap_cvGraphVtxDegree, METH_VARARGS, NULL},
	 { (char *)"cvGraphVtxDegreeByPtr", _wrap_cvGraphVtxDegreeByPtr, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_vtx_set", _wrap_CvGraphScanner_vtx_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_vtx_get", _wrap_CvGraphScanner_vtx_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_dst_set", _wrap_CvGraphScanner_dst_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_dst_get", _wrap_CvGraphScanner_dst_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_edge_set", _wrap_CvGraphScanner_edge_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_edge_get", _wrap_CvGraphScanner_edge_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_graph_set", _wrap_CvGraphScanner_graph_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_graph_get", _wrap_CvGraphScanner_graph_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_stack_set", _wrap_CvGraphScanner_stack_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_stack_get", _wrap_CvGraphScanner_stack_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_index_set", _wrap_CvGraphScanner_index_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_index_get", _wrap_CvGraphScanner_index_get, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_mask_set", _wrap_CvGraphScanner_mask_set, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_mask_get", _wrap_CvGraphScanner_mask_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvGraphScanner", _wrap_delete_CvGraphScanner, METH_VARARGS, NULL},
	 { (char *)"CvGraphScanner_swigregister", CvGraphScanner_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvCreateGraphScanner", _wrap_cvCreateGraphScanner, METH_VARARGS, NULL},
	 { (char *)"cvReleaseGraphScanner", _wrap_cvReleaseGraphScanner, METH_VARARGS, NULL},
	 { (char *)"cvNextGraphItem", _wrap_cvNextGraphItem, METH_VARARGS, NULL},
	 { (char *)"cvCloneGraph", _wrap_cvCloneGraph, METH_VARARGS, NULL},
	 { (char *)"cvLine", _wrap_cvLine, METH_VARARGS, NULL},
	 { (char *)"cvRectangle", _wrap_cvRectangle, METH_VARARGS, NULL},
	 { (char *)"cvCircle", _wrap_cvCircle, METH_VARARGS, NULL},
	 { (char *)"cvEllipse", _wrap_cvEllipse, METH_VARARGS, NULL},
	 { (char *)"cvEllipseBox", _wrap_cvEllipseBox, METH_VARARGS, NULL},
	 { (char *)"cvFillConvexPoly", _wrap_cvFillConvexPoly, METH_VARARGS, NULL},
	 { (char *)"cvFillPoly", _wrap_cvFillPoly, METH_VARARGS, NULL},
	 { (char *)"cvPolyLine", _wrap_cvPolyLine, METH_VARARGS, NULL},
	 { (char *)"CvFont_font_face_set", _wrap_CvFont_font_face_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_font_face_get", _wrap_CvFont_font_face_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_ascii_set", _wrap_CvFont_ascii_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_ascii_get", _wrap_CvFont_ascii_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_greek_set", _wrap_CvFont_greek_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_greek_get", _wrap_CvFont_greek_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_cyrillic_set", _wrap_CvFont_cyrillic_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_cyrillic_get", _wrap_CvFont_cyrillic_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_hscale_set", _wrap_CvFont_hscale_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_hscale_get", _wrap_CvFont_hscale_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_vscale_set", _wrap_CvFont_vscale_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_vscale_get", _wrap_CvFont_vscale_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_shear_set", _wrap_CvFont_shear_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_shear_get", _wrap_CvFont_shear_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_thickness_set", _wrap_CvFont_thickness_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_thickness_get", _wrap_CvFont_thickness_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_dx_set", _wrap_CvFont_dx_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_dx_get", _wrap_CvFont_dx_get, METH_VARARGS, NULL},
	 { (char *)"CvFont_line_type_set", _wrap_CvFont_line_type_set, METH_VARARGS, NULL},
	 { (char *)"CvFont_line_type_get", _wrap_CvFont_line_type_get, METH_VARARGS, NULL},
	 { (char *)"new_CvFont", _wrap_new_CvFont, METH_VARARGS, NULL},
	 { (char *)"delete_CvFont", _wrap_delete_CvFont, METH_VARARGS, NULL},
	 { (char *)"CvFont_swigregister", CvFont_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvInitFont", _wrap_cvInitFont, METH_VARARGS, NULL},
	 { (char *)"cvPutText", _wrap_cvPutText, METH_VARARGS, NULL},
	 { (char *)"cvGetTextSize", _wrap_cvGetTextSize, METH_VARARGS, NULL},
	 { (char *)"cvColorToScalar", _wrap_cvColorToScalar, METH_VARARGS, NULL},
	 { (char *)"cvDrawContours", _wrap_cvDrawContours, METH_VARARGS, NULL},
	 { (char *)"cvLUT", _wrap_cvLUT, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_node_set", _wrap_CvTreeNodeIterator_node_set, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_node_get", _wrap_CvTreeNodeIterator_node_get, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_level_set", _wrap_CvTreeNodeIterator_level_set, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_level_get", _wrap_CvTreeNodeIterator_level_get, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_max_level_set", _wrap_CvTreeNodeIterator_max_level_set, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_max_level_get", _wrap_CvTreeNodeIterator_max_level_get, METH_VARARGS, NULL},
	 { (char *)"new_CvTreeNodeIterator", _wrap_new_CvTreeNodeIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CvTreeNodeIterator", _wrap_delete_CvTreeNodeIterator, METH_VARARGS, NULL},
	 { (char *)"CvTreeNodeIterator_swigregister", CvTreeNodeIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvInitTreeNodeIterator", _wrap_cvInitTreeNodeIterator, METH_VARARGS, NULL},
	 { (char *)"cvNextTreeNode", _wrap_cvNextTreeNode, METH_VARARGS, NULL},
	 { (char *)"cvPrevTreeNode", _wrap_cvPrevTreeNode, METH_VARARGS, NULL},
	 { (char *)"cvInsertNodeIntoTree", _wrap_cvInsertNodeIntoTree, METH_VARARGS, NULL},
	 { (char *)"cvRemoveNodeFromTree", _wrap_cvRemoveNodeFromTree, METH_VARARGS, NULL},
	 { (char *)"cvTreeToNodeSeq", _wrap_cvTreeToNodeSeq, METH_VARARGS, NULL},
	 { (char *)"cvKMeans2", _wrap_cvKMeans2, METH_VARARGS, NULL},
	 { (char *)"cvRegisterModule", _wrap_cvRegisterModule, METH_VARARGS, NULL},
	 { (char *)"cvUseOptimized", _wrap_cvUseOptimized, METH_VARARGS, NULL},
	 { (char *)"cvGetModuleInfo", _wrap_cvGetModuleInfo, METH_VARARGS, NULL},
	 { (char *)"cvGetErrStatus", _wrap_cvGetErrStatus, METH_VARARGS, NULL},
	 { (char *)"cvSetErrStatus", _wrap_cvSetErrStatus, METH_VARARGS, NULL},
	 { (char *)"cvGetErrMode", _wrap_cvGetErrMode, METH_VARARGS, NULL},
	 { (char *)"cvSetErrMode", _wrap_cvSetErrMode, METH_VARARGS, NULL},
	 { (char *)"cvError", _wrap_cvError, METH_VARARGS, NULL},
	 { (char *)"cvErrorStr", _wrap_cvErrorStr, METH_VARARGS, NULL},
	 { (char *)"cvGetErrInfo", _wrap_cvGetErrInfo, METH_VARARGS, NULL},
	 { (char *)"cvErrorFromIppStatus", _wrap_cvErrorFromIppStatus, METH_VARARGS, NULL},
	 { (char *)"cvRedirectError", _wrap_cvRedirectError, METH_VARARGS, NULL},
	 { (char *)"cvNulDevReport", _wrap_cvNulDevReport, METH_VARARGS, NULL},
	 { (char *)"cvStdErrReport", _wrap_cvStdErrReport, METH_VARARGS, NULL},
	 { (char *)"cvGuiBoxReport", _wrap_cvGuiBoxReport, METH_VARARGS, NULL},
	 { (char *)"cvSetMemoryManager", _wrap_cvSetMemoryManager, METH_VARARGS, NULL},
	 { (char *)"cvSetIPLAllocators", _wrap_cvSetIPLAllocators, METH_VARARGS, NULL},
	 { (char *)"cvOpenFileStorage", _wrap_cvOpenFileStorage, METH_VARARGS, NULL},
	 { (char *)"cvReleaseFileStorage", _wrap_cvReleaseFileStorage, METH_VARARGS, NULL},
	 { (char *)"cvAttrValue", _wrap_cvAttrValue, METH_VARARGS, NULL},
	 { (char *)"cvStartWriteStruct", _wrap_cvStartWriteStruct, METH_VARARGS, NULL},
	 { (char *)"cvEndWriteStruct", _wrap_cvEndWriteStruct, METH_VARARGS, NULL},
	 { (char *)"cvWriteInt", _wrap_cvWriteInt, METH_VARARGS, NULL},
	 { (char *)"cvWriteReal", _wrap_cvWriteReal, METH_VARARGS, NULL},
	 { (char *)"cvWriteString", _wrap_cvWriteString, METH_VARARGS, NULL},
	 { (char *)"cvWriteComment", _wrap_cvWriteComment, METH_VARARGS, NULL},
	 { (char *)"cvWrite", _wrap_cvWrite, METH_VARARGS, NULL},
	 { (char *)"cvStartNextStream", _wrap_cvStartNextStream, METH_VARARGS, NULL},
	 { (char *)"cvWriteRawData", _wrap_cvWriteRawData, METH_VARARGS, NULL},
	 { (char *)"cvGetHashedKey", _wrap_cvGetHashedKey, METH_VARARGS, NULL},
	 { (char *)"cvGetRootFileNode", _wrap_cvGetRootFileNode, METH_VARARGS, NULL},
	 { (char *)"cvGetFileNode", _wrap_cvGetFileNode, METH_VARARGS, NULL},
	 { (char *)"cvGetFileNodeByName", _wrap_cvGetFileNodeByName, METH_VARARGS, NULL},
	 { (char *)"cvReadInt", _wrap_cvReadInt, METH_VARARGS, NULL},
	 { (char *)"cvReadIntByName", _wrap_cvReadIntByName, METH_VARARGS, NULL},
	 { (char *)"cvReadReal", _wrap_cvReadReal, METH_VARARGS, NULL},
	 { (char *)"cvReadRealByName", _wrap_cvReadRealByName, METH_VARARGS, NULL},
	 { (char *)"cvReadString", _wrap_cvReadString, METH_VARARGS, NULL},
	 { (char *)"cvReadStringByName", _wrap_cvReadStringByName, METH_VARARGS, NULL},
	 { (char *)"cvRead", _wrap_cvRead, METH_VARARGS, NULL},
	 { (char *)"cvReadByName", _wrap_cvReadByName, METH_VARARGS, NULL},
	 { (char *)"cvStartReadRawData", _wrap_cvStartReadRawData, METH_VARARGS, NULL},
	 { (char *)"cvReadRawDataSlice", _wrap_cvReadRawDataSlice, METH_VARARGS, NULL},
	 { (char *)"cvReadRawData", _wrap_cvReadRawData, METH_VARARGS, NULL},
	 { (char *)"cvWriteFileNode", _wrap_cvWriteFileNode, METH_VARARGS, NULL},
	 { (char *)"cvGetFileNodeName", _wrap_cvGetFileNodeName, METH_VARARGS, NULL},
	 { (char *)"cvRegisterType", _wrap_cvRegisterType, METH_VARARGS, NULL},
	 { (char *)"cvUnregisterType", _wrap_cvUnregisterType, METH_VARARGS, NULL},
	 { (char *)"cvFirstType", _wrap_cvFirstType, METH_VARARGS, NULL},
	 { (char *)"cvFindType", _wrap_cvFindType, METH_VARARGS, NULL},
	 { (char *)"cvTypeOf", _wrap_cvTypeOf, METH_VARARGS, NULL},
	 { (char *)"cvRelease", _wrap_cvRelease, METH_VARARGS, NULL},
	 { (char *)"cvClone", _wrap_cvClone, METH_VARARGS, NULL},
	 { (char *)"cvSave", _wrap_cvSave, METH_VARARGS, NULL},
	 { (char *)"cvLoad", _wrap_cvLoad, METH_VARARGS, NULL},
	 { (char *)"cvGetTickCount", _wrap_cvGetTickCount, METH_VARARGS, NULL},
	 { (char *)"cvGetTickFrequency", _wrap_cvGetTickFrequency, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m00_set", _wrap_CvMoments_m00_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m00_get", _wrap_CvMoments_m00_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m10_set", _wrap_CvMoments_m10_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m10_get", _wrap_CvMoments_m10_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m01_set", _wrap_CvMoments_m01_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m01_get", _wrap_CvMoments_m01_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m20_set", _wrap_CvMoments_m20_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m20_get", _wrap_CvMoments_m20_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m11_set", _wrap_CvMoments_m11_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m11_get", _wrap_CvMoments_m11_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m02_set", _wrap_CvMoments_m02_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m02_get", _wrap_CvMoments_m02_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m30_set", _wrap_CvMoments_m30_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m30_get", _wrap_CvMoments_m30_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m21_set", _wrap_CvMoments_m21_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m21_get", _wrap_CvMoments_m21_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m12_set", _wrap_CvMoments_m12_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m12_get", _wrap_CvMoments_m12_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m03_set", _wrap_CvMoments_m03_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_m03_get", _wrap_CvMoments_m03_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu20_set", _wrap_CvMoments_mu20_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu20_get", _wrap_CvMoments_mu20_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu11_set", _wrap_CvMoments_mu11_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu11_get", _wrap_CvMoments_mu11_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu02_set", _wrap_CvMoments_mu02_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu02_get", _wrap_CvMoments_mu02_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu30_set", _wrap_CvMoments_mu30_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu30_get", _wrap_CvMoments_mu30_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu21_set", _wrap_CvMoments_mu21_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu21_get", _wrap_CvMoments_mu21_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu12_set", _wrap_CvMoments_mu12_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu12_get", _wrap_CvMoments_mu12_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu03_set", _wrap_CvMoments_mu03_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_mu03_get", _wrap_CvMoments_mu03_get, METH_VARARGS, NULL},
	 { (char *)"CvMoments_inv_sqrt_m00_set", _wrap_CvMoments_inv_sqrt_m00_set, METH_VARARGS, NULL},
	 { (char *)"CvMoments_inv_sqrt_m00_get", _wrap_CvMoments_inv_sqrt_m00_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMoments", _wrap_new_CvMoments, METH_VARARGS, NULL},
	 { (char *)"delete_CvMoments", _wrap_delete_CvMoments, METH_VARARGS, NULL},
	 { (char *)"CvMoments_swigregister", CvMoments_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu1_set", _wrap_CvHuMoments_hu1_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu1_get", _wrap_CvHuMoments_hu1_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu2_set", _wrap_CvHuMoments_hu2_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu2_get", _wrap_CvHuMoments_hu2_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu3_set", _wrap_CvHuMoments_hu3_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu3_get", _wrap_CvHuMoments_hu3_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu4_set", _wrap_CvHuMoments_hu4_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu4_get", _wrap_CvHuMoments_hu4_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu5_set", _wrap_CvHuMoments_hu5_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu5_get", _wrap_CvHuMoments_hu5_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu6_set", _wrap_CvHuMoments_hu6_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu6_get", _wrap_CvHuMoments_hu6_get, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu7_set", _wrap_CvHuMoments_hu7_set, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_hu7_get", _wrap_CvHuMoments_hu7_get, METH_VARARGS, NULL},
	 { (char *)"new_CvHuMoments", _wrap_new_CvHuMoments, METH_VARARGS, NULL},
	 { (char *)"delete_CvHuMoments", _wrap_delete_CvHuMoments, METH_VARARGS, NULL},
	 { (char *)"CvHuMoments_swigregister", CvHuMoments_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_ptr_set", _wrap_CvLineIterator_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_ptr_get", _wrap_CvLineIterator_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_err_set", _wrap_CvLineIterator_err_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_err_get", _wrap_CvLineIterator_err_get, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_plus_delta_set", _wrap_CvLineIterator_plus_delta_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_plus_delta_get", _wrap_CvLineIterator_plus_delta_get, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_minus_delta_set", _wrap_CvLineIterator_minus_delta_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_minus_delta_get", _wrap_CvLineIterator_minus_delta_get, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_plus_step_set", _wrap_CvLineIterator_plus_step_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_plus_step_get", _wrap_CvLineIterator_plus_step_get, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_minus_step_set", _wrap_CvLineIterator_minus_step_set, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_minus_step_get", _wrap_CvLineIterator_minus_step_get, METH_VARARGS, NULL},
	 { (char *)"new_CvLineIterator", _wrap_new_CvLineIterator, METH_VARARGS, NULL},
	 { (char *)"delete_CvLineIterator", _wrap_delete_CvLineIterator, METH_VARARGS, NULL},
	 { (char *)"CvLineIterator_swigregister", CvLineIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_area_set", _wrap_CvConnectedComp_area_set, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_area_get", _wrap_CvConnectedComp_area_get, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_value_set", _wrap_CvConnectedComp_value_set, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_value_get", _wrap_CvConnectedComp_value_get, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_rect_set", _wrap_CvConnectedComp_rect_set, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_rect_get", _wrap_CvConnectedComp_rect_get, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_contour_set", _wrap_CvConnectedComp_contour_set, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_contour_get", _wrap_CvConnectedComp_contour_get, METH_VARARGS, NULL},
	 { (char *)"new_CvConnectedComp", _wrap_new_CvConnectedComp, METH_VARARGS, NULL},
	 { (char *)"delete_CvConnectedComp", _wrap_delete_CvConnectedComp, METH_VARARGS, NULL},
	 { (char *)"CvConnectedComp_swigregister", CvConnectedComp_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_header_size_set", _wrap_CvChainPtReader_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_header_size_get", _wrap_CvChainPtReader_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_seq_set", _wrap_CvChainPtReader_seq_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_seq_get", _wrap_CvChainPtReader_seq_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_set", _wrap_CvChainPtReader_block_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_get", _wrap_CvChainPtReader_block_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_ptr_set", _wrap_CvChainPtReader_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_ptr_get", _wrap_CvChainPtReader_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_min_set", _wrap_CvChainPtReader_block_min_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_min_get", _wrap_CvChainPtReader_block_min_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_max_set", _wrap_CvChainPtReader_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_block_max_get", _wrap_CvChainPtReader_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_delta_index_set", _wrap_CvChainPtReader_delta_index_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_delta_index_get", _wrap_CvChainPtReader_delta_index_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_prev_elem_set", _wrap_CvChainPtReader_prev_elem_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_prev_elem_get", _wrap_CvChainPtReader_prev_elem_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_code_set", _wrap_CvChainPtReader_code_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_code_get", _wrap_CvChainPtReader_code_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_pt_set", _wrap_CvChainPtReader_pt_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_pt_get", _wrap_CvChainPtReader_pt_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_deltas_set", _wrap_CvChainPtReader_deltas_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_deltas_get", _wrap_CvChainPtReader_deltas_get, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_reserved_set", _wrap_CvChainPtReader_reserved_set, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_reserved_get", _wrap_CvChainPtReader_reserved_get, METH_VARARGS, NULL},
	 { (char *)"new_CvChainPtReader", _wrap_new_CvChainPtReader, METH_VARARGS, NULL},
	 { (char *)"delete_CvChainPtReader", _wrap_delete_CvChainPtReader, METH_VARARGS, NULL},
	 { (char *)"CvChainPtReader_swigregister", CvChainPtReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_flags_set", _wrap_CvContourTree_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_flags_get", _wrap_CvContourTree_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_header_size_set", _wrap_CvContourTree_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_header_size_get", _wrap_CvContourTree_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_h_prev_set", _wrap_CvContourTree_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_h_prev_get", _wrap_CvContourTree_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_h_next_set", _wrap_CvContourTree_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_h_next_get", _wrap_CvContourTree_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_v_prev_set", _wrap_CvContourTree_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_v_prev_get", _wrap_CvContourTree_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_v_next_set", _wrap_CvContourTree_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_v_next_get", _wrap_CvContourTree_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_total_set", _wrap_CvContourTree_total_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_total_get", _wrap_CvContourTree_total_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_elem_size_set", _wrap_CvContourTree_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_elem_size_get", _wrap_CvContourTree_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_block_max_set", _wrap_CvContourTree_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_block_max_get", _wrap_CvContourTree_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_ptr_set", _wrap_CvContourTree_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_ptr_get", _wrap_CvContourTree_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_delta_elems_set", _wrap_CvContourTree_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_delta_elems_get", _wrap_CvContourTree_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_storage_set", _wrap_CvContourTree_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_storage_get", _wrap_CvContourTree_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_free_blocks_set", _wrap_CvContourTree_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_free_blocks_get", _wrap_CvContourTree_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_first_set", _wrap_CvContourTree_first_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_first_get", _wrap_CvContourTree_first_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_p1_set", _wrap_CvContourTree_p1_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_p1_get", _wrap_CvContourTree_p1_get, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_p2_set", _wrap_CvContourTree_p2_set, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_p2_get", _wrap_CvContourTree_p2_get, METH_VARARGS, NULL},
	 { (char *)"new_CvContourTree", _wrap_new_CvContourTree, METH_VARARGS, NULL},
	 { (char *)"delete_CvContourTree", _wrap_delete_CvContourTree, METH_VARARGS, NULL},
	 { (char *)"CvContourTree_swigregister", CvContourTree_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_start_set", _wrap_CvConvexityDefect_start_set, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_start_get", _wrap_CvConvexityDefect_start_get, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_end_set", _wrap_CvConvexityDefect_end_set, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_end_get", _wrap_CvConvexityDefect_end_get, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_depth_point_set", _wrap_CvConvexityDefect_depth_point_set, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_depth_point_get", _wrap_CvConvexityDefect_depth_point_get, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_depth_set", _wrap_CvConvexityDefect_depth_set, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_depth_get", _wrap_CvConvexityDefect_depth_get, METH_VARARGS, NULL},
	 { (char *)"new_CvConvexityDefect", _wrap_new_CvConvexityDefect, METH_VARARGS, NULL},
	 { (char *)"delete_CvConvexityDefect", _wrap_delete_CvConvexityDefect, METH_VARARGS, NULL},
	 { (char *)"CvConvexityDefect_swigregister", CvConvexityDefect_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_flags_set", _wrap_CvQuadEdge2D_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_flags_get", _wrap_CvQuadEdge2D_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_pt_set", _wrap_CvQuadEdge2D_pt_set, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_pt_get", _wrap_CvQuadEdge2D_pt_get, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_next_set", _wrap_CvQuadEdge2D_next_set, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_next_get", _wrap_CvQuadEdge2D_next_get, METH_VARARGS, NULL},
	 { (char *)"new_CvQuadEdge2D", _wrap_new_CvQuadEdge2D, METH_VARARGS, NULL},
	 { (char *)"delete_CvQuadEdge2D", _wrap_delete_CvQuadEdge2D, METH_VARARGS, NULL},
	 { (char *)"CvQuadEdge2D_swigregister", CvQuadEdge2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_flags_set", _wrap_CvSubdiv2DPoint_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_flags_get", _wrap_CvSubdiv2DPoint_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_first_set", _wrap_CvSubdiv2DPoint_first_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_first_get", _wrap_CvSubdiv2DPoint_first_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_pt_set", _wrap_CvSubdiv2DPoint_pt_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_pt_get", _wrap_CvSubdiv2DPoint_pt_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSubdiv2DPoint", _wrap_new_CvSubdiv2DPoint, METH_VARARGS, NULL},
	 { (char *)"delete_CvSubdiv2DPoint", _wrap_delete_CvSubdiv2DPoint, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2DPoint_swigregister", CvSubdiv2DPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_flags_set", _wrap_CvSubdiv2D_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_flags_get", _wrap_CvSubdiv2D_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_header_size_set", _wrap_CvSubdiv2D_header_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_header_size_get", _wrap_CvSubdiv2D_header_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_h_prev_set", _wrap_CvSubdiv2D_h_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_h_prev_get", _wrap_CvSubdiv2D_h_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_h_next_set", _wrap_CvSubdiv2D_h_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_h_next_get", _wrap_CvSubdiv2D_h_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_v_prev_set", _wrap_CvSubdiv2D_v_prev_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_v_prev_get", _wrap_CvSubdiv2D_v_prev_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_v_next_set", _wrap_CvSubdiv2D_v_next_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_v_next_get", _wrap_CvSubdiv2D_v_next_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_total_set", _wrap_CvSubdiv2D_total_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_total_get", _wrap_CvSubdiv2D_total_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_elem_size_set", _wrap_CvSubdiv2D_elem_size_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_elem_size_get", _wrap_CvSubdiv2D_elem_size_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_block_max_set", _wrap_CvSubdiv2D_block_max_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_block_max_get", _wrap_CvSubdiv2D_block_max_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_ptr_set", _wrap_CvSubdiv2D_ptr_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_ptr_get", _wrap_CvSubdiv2D_ptr_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_delta_elems_set", _wrap_CvSubdiv2D_delta_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_delta_elems_get", _wrap_CvSubdiv2D_delta_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_storage_set", _wrap_CvSubdiv2D_storage_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_storage_get", _wrap_CvSubdiv2D_storage_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_free_blocks_set", _wrap_CvSubdiv2D_free_blocks_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_free_blocks_get", _wrap_CvSubdiv2D_free_blocks_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_first_set", _wrap_CvSubdiv2D_first_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_first_get", _wrap_CvSubdiv2D_first_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_free_elems_set", _wrap_CvSubdiv2D_free_elems_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_free_elems_get", _wrap_CvSubdiv2D_free_elems_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_active_count_set", _wrap_CvSubdiv2D_active_count_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_active_count_get", _wrap_CvSubdiv2D_active_count_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_edges_set", _wrap_CvSubdiv2D_edges_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_edges_get", _wrap_CvSubdiv2D_edges_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_quad_edges_set", _wrap_CvSubdiv2D_quad_edges_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_quad_edges_get", _wrap_CvSubdiv2D_quad_edges_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_is_geometry_valid_set", _wrap_CvSubdiv2D_is_geometry_valid_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_is_geometry_valid_get", _wrap_CvSubdiv2D_is_geometry_valid_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_recent_edge_set", _wrap_CvSubdiv2D_recent_edge_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_recent_edge_get", _wrap_CvSubdiv2D_recent_edge_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_topleft_set", _wrap_CvSubdiv2D_topleft_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_topleft_get", _wrap_CvSubdiv2D_topleft_get, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_bottomright_set", _wrap_CvSubdiv2D_bottomright_set, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_bottomright_get", _wrap_CvSubdiv2D_bottomright_get, METH_VARARGS, NULL},
	 { (char *)"new_CvSubdiv2D", _wrap_new_CvSubdiv2D, METH_VARARGS, NULL},
	 { (char *)"delete_CvSubdiv2D", _wrap_delete_CvSubdiv2D, METH_VARARGS, NULL},
	 { (char *)"CvSubdiv2D_swigregister", CvSubdiv2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvMatrix3_m_set", _wrap_CvMatrix3_m_set, METH_VARARGS, NULL},
	 { (char *)"CvMatrix3_m_get", _wrap_CvMatrix3_m_get, METH_VARARGS, NULL},
	 { (char *)"new_CvMatrix3", _wrap_new_CvMatrix3, METH_VARARGS, NULL},
	 { (char *)"delete_CvMatrix3", _wrap_delete_CvMatrix3, METH_VARARGS, NULL},
	 { (char *)"CvMatrix3_swigregister", CvMatrix3_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_MP_set", _wrap_CvConDensation_MP_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_MP_get", _wrap_CvConDensation_MP_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_DP_set", _wrap_CvConDensation_DP_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_DP_get", _wrap_CvConDensation_DP_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_DynamMatr_set", _wrap_CvConDensation_DynamMatr_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_DynamMatr_get", _wrap_CvConDensation_DynamMatr_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_State_set", _wrap_CvConDensation_State_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_State_get", _wrap_CvConDensation_State_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_SamplesNum_set", _wrap_CvConDensation_SamplesNum_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_SamplesNum_get", _wrap_CvConDensation_SamplesNum_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flSamples_set", _wrap_CvConDensation_flSamples_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flSamples_get", _wrap_CvConDensation_flSamples_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flNewSamples_set", _wrap_CvConDensation_flNewSamples_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flNewSamples_get", _wrap_CvConDensation_flNewSamples_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flConfidence_set", _wrap_CvConDensation_flConfidence_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flConfidence_get", _wrap_CvConDensation_flConfidence_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flCumulative_set", _wrap_CvConDensation_flCumulative_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_flCumulative_get", _wrap_CvConDensation_flCumulative_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_Temp_set", _wrap_CvConDensation_Temp_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_Temp_get", _wrap_CvConDensation_Temp_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_RandomSample_set", _wrap_CvConDensation_RandomSample_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_RandomSample_get", _wrap_CvConDensation_RandomSample_get, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_RandS_set", _wrap_CvConDensation_RandS_set, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_RandS_get", _wrap_CvConDensation_RandS_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvConDensation", _wrap_delete_CvConDensation, METH_VARARGS, NULL},
	 { (char *)"CvConDensation_swigregister", CvConDensation_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MP_set", _wrap_CvKalman_MP_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MP_get", _wrap_CvKalman_MP_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_DP_set", _wrap_CvKalman_DP_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_DP_get", _wrap_CvKalman_DP_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_CP_set", _wrap_CvKalman_CP_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_CP_get", _wrap_CvKalman_CP_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PosterState_set", _wrap_CvKalman_PosterState_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PosterState_get", _wrap_CvKalman_PosterState_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PriorState_set", _wrap_CvKalman_PriorState_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PriorState_get", _wrap_CvKalman_PriorState_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_DynamMatr_set", _wrap_CvKalman_DynamMatr_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_DynamMatr_get", _wrap_CvKalman_DynamMatr_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MeasurementMatr_set", _wrap_CvKalman_MeasurementMatr_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MeasurementMatr_get", _wrap_CvKalman_MeasurementMatr_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MNCovariance_set", _wrap_CvKalman_MNCovariance_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_MNCovariance_get", _wrap_CvKalman_MNCovariance_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PNCovariance_set", _wrap_CvKalman_PNCovariance_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PNCovariance_get", _wrap_CvKalman_PNCovariance_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_KalmGainMatr_set", _wrap_CvKalman_KalmGainMatr_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_KalmGainMatr_get", _wrap_CvKalman_KalmGainMatr_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PriorErrorCovariance_set", _wrap_CvKalman_PriorErrorCovariance_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PriorErrorCovariance_get", _wrap_CvKalman_PriorErrorCovariance_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PosterErrorCovariance_set", _wrap_CvKalman_PosterErrorCovariance_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_PosterErrorCovariance_get", _wrap_CvKalman_PosterErrorCovariance_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_Temp1_set", _wrap_CvKalman_Temp1_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_Temp1_get", _wrap_CvKalman_Temp1_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_Temp2_set", _wrap_CvKalman_Temp2_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_Temp2_get", _wrap_CvKalman_Temp2_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_state_pre_set", _wrap_CvKalman_state_pre_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_state_pre_get", _wrap_CvKalman_state_pre_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_state_post_set", _wrap_CvKalman_state_post_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_state_post_get", _wrap_CvKalman_state_post_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_transition_matrix_set", _wrap_CvKalman_transition_matrix_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_transition_matrix_get", _wrap_CvKalman_transition_matrix_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_control_matrix_set", _wrap_CvKalman_control_matrix_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_control_matrix_get", _wrap_CvKalman_control_matrix_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_measurement_matrix_set", _wrap_CvKalman_measurement_matrix_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_measurement_matrix_get", _wrap_CvKalman_measurement_matrix_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_process_noise_cov_set", _wrap_CvKalman_process_noise_cov_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_process_noise_cov_get", _wrap_CvKalman_process_noise_cov_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_measurement_noise_cov_set", _wrap_CvKalman_measurement_noise_cov_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_measurement_noise_cov_get", _wrap_CvKalman_measurement_noise_cov_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_error_cov_pre_set", _wrap_CvKalman_error_cov_pre_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_error_cov_pre_get", _wrap_CvKalman_error_cov_pre_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_gain_set", _wrap_CvKalman_gain_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_gain_get", _wrap_CvKalman_gain_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_error_cov_post_set", _wrap_CvKalman_error_cov_post_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_error_cov_post_get", _wrap_CvKalman_error_cov_post_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp1_set", _wrap_CvKalman_temp1_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp1_get", _wrap_CvKalman_temp1_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp2_set", _wrap_CvKalman_temp2_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp2_get", _wrap_CvKalman_temp2_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp3_set", _wrap_CvKalman_temp3_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp3_get", _wrap_CvKalman_temp3_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp4_set", _wrap_CvKalman_temp4_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp4_get", _wrap_CvKalman_temp4_get, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp5_set", _wrap_CvKalman_temp5_set, METH_VARARGS, NULL},
	 { (char *)"CvKalman_temp5_get", _wrap_CvKalman_temp5_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvKalman", _wrap_delete_CvKalman, METH_VARARGS, NULL},
	 { (char *)"CvKalman_swigregister", CvKalman_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_tilted_set", _wrap_CvHaarFeature_tilted_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_tilted_get", _wrap_CvHaarFeature_tilted_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_get", _wrap_CvHaarFeature_rect_get, METH_VARARGS, NULL},
	 { (char *)"new_CvHaarFeature", _wrap_new_CvHaarFeature, METH_VARARGS, NULL},
	 { (char *)"delete_CvHaarFeature", _wrap_delete_CvHaarFeature, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_swigregister", CvHaarFeature_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_r_set", _wrap_CvHaarFeature_rect_r_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_r_get", _wrap_CvHaarFeature_rect_r_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_weight_set", _wrap_CvHaarFeature_rect_weight_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_weight_get", _wrap_CvHaarFeature_rect_weight_get, METH_VARARGS, NULL},
	 { (char *)"new_CvHaarFeature_rect", _wrap_new_CvHaarFeature_rect, METH_VARARGS, NULL},
	 { (char *)"delete_CvHaarFeature_rect", _wrap_delete_CvHaarFeature_rect, METH_VARARGS, NULL},
	 { (char *)"CvHaarFeature_rect_swigregister", CvHaarFeature_rect_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_count_set", _wrap_CvHaarClassifier_count_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_count_get", _wrap_CvHaarClassifier_count_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_haar_feature_set", _wrap_CvHaarClassifier_haar_feature_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_haar_feature_get", _wrap_CvHaarClassifier_haar_feature_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_threshold_set", _wrap_CvHaarClassifier_threshold_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_threshold_get", _wrap_CvHaarClassifier_threshold_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_left_set", _wrap_CvHaarClassifier_left_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_left_get", _wrap_CvHaarClassifier_left_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_right_set", _wrap_CvHaarClassifier_right_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_right_get", _wrap_CvHaarClassifier_right_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_alpha_set", _wrap_CvHaarClassifier_alpha_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_alpha_get", _wrap_CvHaarClassifier_alpha_get, METH_VARARGS, NULL},
	 { (char *)"new_CvHaarClassifier", _wrap_new_CvHaarClassifier, METH_VARARGS, NULL},
	 { (char *)"delete_CvHaarClassifier", _wrap_delete_CvHaarClassifier, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifier_swigregister", CvHaarClassifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_count_set", _wrap_CvHaarStageClassifier_count_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_count_get", _wrap_CvHaarStageClassifier_count_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_threshold_set", _wrap_CvHaarStageClassifier_threshold_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_threshold_get", _wrap_CvHaarStageClassifier_threshold_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_classifier_set", _wrap_CvHaarStageClassifier_classifier_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_classifier_get", _wrap_CvHaarStageClassifier_classifier_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_next_set", _wrap_CvHaarStageClassifier_next_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_next_get", _wrap_CvHaarStageClassifier_next_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_child_set", _wrap_CvHaarStageClassifier_child_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_child_get", _wrap_CvHaarStageClassifier_child_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_parent_set", _wrap_CvHaarStageClassifier_parent_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_parent_get", _wrap_CvHaarStageClassifier_parent_get, METH_VARARGS, NULL},
	 { (char *)"new_CvHaarStageClassifier", _wrap_new_CvHaarStageClassifier, METH_VARARGS, NULL},
	 { (char *)"delete_CvHaarStageClassifier", _wrap_delete_CvHaarStageClassifier, METH_VARARGS, NULL},
	 { (char *)"CvHaarStageClassifier_swigregister", CvHaarStageClassifier_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_flags_set", _wrap_CvHaarClassifierCascade_flags_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_flags_get", _wrap_CvHaarClassifierCascade_flags_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_count_set", _wrap_CvHaarClassifierCascade_count_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_count_get", _wrap_CvHaarClassifierCascade_count_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_orig_window_size_set", _wrap_CvHaarClassifierCascade_orig_window_size_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_orig_window_size_get", _wrap_CvHaarClassifierCascade_orig_window_size_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_real_window_size_set", _wrap_CvHaarClassifierCascade_real_window_size_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_real_window_size_get", _wrap_CvHaarClassifierCascade_real_window_size_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_scale_set", _wrap_CvHaarClassifierCascade_scale_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_scale_get", _wrap_CvHaarClassifierCascade_scale_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_stage_classifier_set", _wrap_CvHaarClassifierCascade_stage_classifier_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_stage_classifier_get", _wrap_CvHaarClassifierCascade_stage_classifier_get, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_hid_cascade_set", _wrap_CvHaarClassifierCascade_hid_cascade_set, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_hid_cascade_get", _wrap_CvHaarClassifierCascade_hid_cascade_get, METH_VARARGS, NULL},
	 { (char *)"delete_CvHaarClassifierCascade", _wrap_delete_CvHaarClassifierCascade, METH_VARARGS, NULL},
	 { (char *)"CvHaarClassifierCascade_swigregister", CvHaarClassifierCascade_swigregister, METH_VARARGS, NULL},
	 { (char *)"CvAvgComp_rect_set", _wrap_CvAvgComp_rect_set, METH_VARARGS, NULL},
	 { (char *)"CvAvgComp_rect_get", _wrap_CvAvgComp_rect_get, METH_VARARGS, NULL},
	 { (char *)"CvAvgComp_neighbors_set", _wrap_CvAvgComp_neighbors_set, METH_VARARGS, NULL},
	 { (char *)"CvAvgComp_neighbors_get", _wrap_CvAvgComp_neighbors_get, METH_VARARGS, NULL},
	 { (char *)"new_CvAvgComp", _wrap_new_CvAvgComp, METH_VARARGS, NULL},
	 { (char *)"delete_CvAvgComp", _wrap_delete_CvAvgComp, METH_VARARGS, NULL},
	 { (char *)"CvAvgComp_swigregister", CvAvgComp_swigregister, METH_VARARGS, NULL},
	 { (char *)"cvCopyMakeBorder", _wrap_cvCopyMakeBorder, METH_VARARGS, NULL},
	 { (char *)"cvSmooth", _wrap_cvSmooth, METH_VARARGS, NULL},
	 { (char *)"cvFilter2D", _wrap_cvFilter2D, METH_VARARGS, NULL},
	 { (char *)"cvIntegral", _wrap_cvIntegral, METH_VARARGS, NULL},
	 { (char *)"cvPyrDown", _wrap_cvPyrDown, METH_VARARGS, NULL},
	 { (char *)"cvPyrUp", _wrap_cvPyrUp, METH_VARARGS, NULL},
	 { (char *)"cvPyrSegmentation", _wrap_cvPyrSegmentation, METH_VARARGS, NULL},
	 { (char *)"cvSobel", _wrap_cvSobel, METH_VARARGS, NULL},
	 { (char *)"cvLaplace", _wrap_cvLaplace, METH_VARARGS, NULL},
	 { (char *)"cvCvtColor", _wrap_cvCvtColor, METH_VARARGS, NULL},
	 { (char *)"cvResize", _wrap_cvResize, METH_VARARGS, NULL},
	 { (char *)"cvWarpAffine", _wrap_cvWarpAffine, METH_VARARGS, NULL},
	 { (char *)"cv2DRotationMatrix", _wrap_cv2DRotationMatrix, METH_VARARGS, NULL},
	 { (char *)"cvWarpPerspective", _wrap_cvWarpPerspective, METH_VARARGS, NULL},
	 { (char *)"cvWarpPerspectiveQMatrix", _wrap_cvWarpPerspectiveQMatrix, METH_VARARGS, NULL},
	 { (char *)"cvRemap", _wrap_cvRemap, METH_VARARGS, NULL},
	 { (char *)"cvLogPolar", _wrap_cvLogPolar, METH_VARARGS, NULL},
	 { (char *)"cvCreateStructuringElementEx", _wrap_cvCreateStructuringElementEx, METH_VARARGS, NULL},
	 { (char *)"cvReleaseStructuringElement", _wrap_cvReleaseStructuringElement, METH_VARARGS, NULL},
	 { (char *)"cvErode", _wrap_cvErode, METH_VARARGS, NULL},
	 { (char *)"cvDilate", _wrap_cvDilate, METH_VARARGS, NULL},
	 { (char *)"cvMorphologyEx", _wrap_cvMorphologyEx, METH_VARARGS, NULL},
	 { (char *)"cvMoments", _wrap_cvMoments, METH_VARARGS, NULL},
	 { (char *)"cvGetSpatialMoment", _wrap_cvGetSpatialMoment, METH_VARARGS, NULL},
	 { (char *)"cvGetCentralMoment", _wrap_cvGetCentralMoment, METH_VARARGS, NULL},
	 { (char *)"cvGetNormalizedCentralMoment", _wrap_cvGetNormalizedCentralMoment, METH_VARARGS, NULL},
	 { (char *)"cvGetHuMoments", _wrap_cvGetHuMoments, METH_VARARGS, NULL},
	 { (char *)"cvInitLineIterator", _wrap_cvInitLineIterator, METH_VARARGS, NULL},
	 { (char *)"cvSampleLine", _wrap_cvSampleLine, METH_VARARGS, NULL},
	 { (char *)"cvGetRectSubPix", _wrap_cvGetRectSubPix, METH_VARARGS, NULL},
	 { (char *)"cvGetQuadrangleSubPix", _wrap_cvGetQuadrangleSubPix, METH_VARARGS, NULL},
	 { (char *)"cvMatchTemplate", _wrap_cvMatchTemplate, METH_VARARGS, NULL},
	 { (char *)"cvCalcEMD2", _wrap_cvCalcEMD2, METH_VARARGS, NULL},
	 { (char *)"cvFindContours", _wrap_cvFindContours, METH_VARARGS, NULL},
	 { (char *)"cvStartFindContours", _wrap_cvStartFindContours, METH_VARARGS, NULL},
	 { (char *)"cvFindNextContour", _wrap_cvFindNextContour, METH_VARARGS, NULL},
	 { (char *)"cvSubstituteContour", _wrap_cvSubstituteContour, METH_VARARGS, NULL},
	 { (char *)"cvEndFindContours", _wrap_cvEndFindContours, METH_VARARGS, NULL},
	 { (char *)"cvApproxChains", _wrap_cvApproxChains, METH_VARARGS, NULL},
	 { (char *)"cvStartReadChainPoints", _wrap_cvStartReadChainPoints, METH_VARARGS, NULL},
	 { (char *)"cvReadChainPoint", _wrap_cvReadChainPoint, METH_VARARGS, NULL},
	 { (char *)"cvCalcOpticalFlowLK", _wrap_cvCalcOpticalFlowLK, METH_VARARGS, NULL},
	 { (char *)"cvCalcOpticalFlowBM", _wrap_cvCalcOpticalFlowBM, METH_VARARGS, NULL},
	 { (char *)"cvCalcOpticalFlowHS", _wrap_cvCalcOpticalFlowHS, METH_VARARGS, NULL},
	 { (char *)"cvCalcOpticalFlowPyrLK", _wrap_cvCalcOpticalFlowPyrLK, METH_VARARGS, NULL},
	 { (char *)"cvUpdateMotionHistory", _wrap_cvUpdateMotionHistory, METH_VARARGS, NULL},
	 { (char *)"cvCalcMotionGradient", _wrap_cvCalcMotionGradient, METH_VARARGS, NULL},
	 { (char *)"cvCalcGlobalOrientation", _wrap_cvCalcGlobalOrientation, METH_VARARGS, NULL},
	 { (char *)"cvSegmentMotion", _wrap_cvSegmentMotion, METH_VARARGS, NULL},
	 { (char *)"cvAcc", _wrap_cvAcc, METH_VARARGS, NULL},
	 { (char *)"cvSquareAcc", _wrap_cvSquareAcc, METH_VARARGS, NULL},
	 { (char *)"cvMultiplyAcc", _wrap_cvMultiplyAcc, METH_VARARGS, NULL},
	 { (char *)"cvRunningAvg", _wrap_cvRunningAvg, METH_VARARGS, NULL},
	 { (char *)"cvCamShift", _wrap_cvCamShift, METH_VARARGS, NULL},
	 { (char *)"cvMeanShift", _wrap_cvMeanShift, METH_VARARGS, NULL},
	 { (char *)"cvCreateConDensation", _wrap_cvCreateConDensation, METH_VARARGS, NULL},
	 { (char *)"cvReleaseConDensation", _wrap_cvReleaseConDensation, METH_VARARGS, NULL},
	 { (char *)"cvConDensUpdateByTime", _wrap_cvConDensUpdateByTime, METH_VARARGS, NULL},
	 { (char *)"cvConDensInitSampleSet", _wrap_cvConDensInitSampleSet, METH_VARARGS, NULL},
	 { (char *)"cvCreateKalman", _wrap_cvCreateKalman, METH_VARARGS, NULL},
	 { (char *)"cvReleaseKalman", _wrap_cvReleaseKalman, METH_VARARGS, NULL},
	 { (char *)"cvKalmanPredict", _wrap_cvKalmanPredict, METH_VARARGS, NULL},
	 { (char *)"cvKalmanCorrect", _wrap_cvKalmanCorrect, METH_VARARGS, NULL},
	 { (char *)"cvInitSubdivDelaunay2D", _wrap_cvInitSubdivDelaunay2D, METH_VARARGS, NULL},
	 { (char *)"cvCreateSubdiv2D", _wrap_cvCreateSubdiv2D, METH_VARARGS, NULL},
	 { (char *)"cvCreateSubdivDelaunay2D", _wrap_cvCreateSubdivDelaunay2D, METH_VARARGS, NULL},
	 { (char *)"cvSubdivDelaunay2DInsert", _wrap_cvSubdivDelaunay2DInsert, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DLocate", _wrap_cvSubdiv2DLocate, METH_VARARGS, NULL},
	 { (char *)"cvCalcSubdivVoronoi2D", _wrap_cvCalcSubdivVoronoi2D, METH_VARARGS, NULL},
	 { (char *)"cvClearSubdivVoronoi2D", _wrap_cvClearSubdivVoronoi2D, METH_VARARGS, NULL},
	 { (char *)"cvFindNearestPoint2D", _wrap_cvFindNearestPoint2D, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DNextEdge", _wrap_cvSubdiv2DNextEdge, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DRotateEdge", _wrap_cvSubdiv2DRotateEdge, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DSymEdge", _wrap_cvSubdiv2DSymEdge, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DGetEdge", _wrap_cvSubdiv2DGetEdge, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DEdgeOrg", _wrap_cvSubdiv2DEdgeOrg, METH_VARARGS, NULL},
	 { (char *)"cvSubdiv2DEdgeDst", _wrap_cvSubdiv2DEdgeDst, METH_VARARGS, NULL},
	 { (char *)"cvTriangleArea", _wrap_cvTriangleArea, METH_VARARGS, NULL},
	 { (char *)"cvApproxPoly", _wrap_cvApproxPoly, METH_VARARGS, NULL},
	 { (char *)"cvFindDominantPoints", _wrap_cvFindDominantPoints, METH_VARARGS, NULL},
	 { (char *)"cvArcLength", _wrap_cvArcLength, METH_VARARGS, NULL},
	 { (char *)"cvBoundingRect", _wrap_cvBoundingRect, METH_VARARGS, NULL},
	 { (char *)"cvContourArea", _wrap_cvContourArea, METH_VARARGS, NULL},
	 { (char *)"cvMinAreaRect2", _wrap_cvMinAreaRect2, METH_VARARGS, NULL},
	 { (char *)"cvMinEnclosingCircle", _wrap_cvMinEnclosingCircle, METH_VARARGS, NULL},
	 { (char *)"cvMatchShapes", _wrap_cvMatchShapes, METH_VARARGS, NULL},
	 { (char *)"cvCreateContourTree", _wrap_cvCreateContourTree, METH_VARARGS, NULL},
	 { (char *)"cvContourFromContourTree", _wrap_cvContourFromContourTree, METH_VARARGS, NULL},
	 { (char *)"cvMatchContourTrees", _wrap_cvMatchContourTrees, METH_VARARGS, NULL},
	 { (char *)"cvCalcPGH", _wrap_cvCalcPGH, METH_VARARGS, NULL},
	 { (char *)"cvConvexHull2", _wrap_cvConvexHull2, METH_VARARGS, NULL},
	 { (char *)"cvCheckContourConvexity", _wrap_cvCheckContourConvexity, METH_VARARGS, NULL},
	 { (char *)"cvConvexityDefects", _wrap_cvConvexityDefects, METH_VARARGS, NULL},
	 { (char *)"cvFitEllipse2", _wrap_cvFitEllipse2, METH_VARARGS, NULL},
	 { (char *)"cvMaxRect", _wrap_cvMaxRect, METH_VARARGS, NULL},
	 { (char *)"cvBoxPoints", _wrap_cvBoxPoints, METH_VARARGS, NULL},
	 { (char *)"cvCreateHist", _wrap_cvCreateHist, METH_VARARGS, NULL},
	 { (char *)"cvSetHistBinRanges", _wrap_cvSetHistBinRanges, METH_VARARGS, NULL},
	 { (char *)"cvMakeHistHeaderForArray", _wrap_cvMakeHistHeaderForArray, METH_VARARGS, NULL},
	 { (char *)"cvReleaseHist", _wrap_cvReleaseHist, METH_VARARGS, NULL},
	 { (char *)"cvClearHist", _wrap_cvClearHist, METH_VARARGS, NULL},
	 { (char *)"cvGetMinMaxHistValue", _wrap_cvGetMinMaxHistValue, METH_VARARGS, NULL},
	 { (char *)"cvNormalizeHist", _wrap_cvNormalizeHist, METH_VARARGS, NULL},
	 { (char *)"cvThreshHist", _wrap_cvThreshHist, METH_VARARGS, NULL},
	 { (char *)"cvCompareHist", _wrap_cvCompareHist, METH_VARARGS, NULL},
	 { (char *)"cvCopyHist", _wrap_cvCopyHist, METH_VARARGS, NULL},
	 { (char *)"cvCalcBayesianProb", _wrap_cvCalcBayesianProb, METH_VARARGS, NULL},
	 { (char *)"cvCalcArrHist", _wrap_cvCalcArrHist, METH_VARARGS, NULL},
	 { (char *)"cvCalcHist", _wrap_cvCalcHist, METH_VARARGS, NULL},
	 { (char *)"cvCalcArrBackProject", _wrap_cvCalcArrBackProject, METH_VARARGS, NULL},
	 { (char *)"cvCalcArrBackProjectPatch", _wrap_cvCalcArrBackProjectPatch, METH_VARARGS, NULL},
	 { (char *)"cvCalcProbDensity", _wrap_cvCalcProbDensity, METH_VARARGS, NULL},
	 { (char *)"cvSnakeImage", _wrap_cvSnakeImage, METH_VARARGS, NULL},
	 { (char *)"cvCalcImageHomography", _wrap_cvCalcImageHomography, METH_VARARGS, NULL},
	 { (char *)"cvDistTransform", _wrap_cvDistTransform, METH_VARARGS, NULL},
	 { (char *)"cvThreshold", _wrap_cvThreshold, METH_VARARGS, NULL},
	 { (char *)"cvAdaptiveThreshold", _wrap_cvAdaptiveThreshold, METH_VARARGS, NULL},
	 { (char *)"cvFloodFill", _wrap_cvFloodFill, METH_VARARGS, NULL},
	 { (char *)"cvCanny", _wrap_cvCanny, METH_VARARGS, NULL},
	 { (char *)"cvPreCornerDetect", _wrap_cvPreCornerDetect, METH_VARARGS, NULL},
	 { (char *)"cvCornerEigenValsAndVecs", _wrap_cvCornerEigenValsAndVecs, METH_VARARGS, NULL},
	 { (char *)"cvCornerMinEigenVal", _wrap_cvCornerMinEigenVal, METH_VARARGS, NULL},
	 { (char *)"cvCornerHarris", _wrap_cvCornerHarris, METH_VARARGS, NULL},
	 { (char *)"cvFindCornerSubPix", _wrap_cvFindCornerSubPix, METH_VARARGS, NULL},
	 { (char *)"cvGoodFeaturesToTrack", _wrap_cvGoodFeaturesToTrack, METH_VARARGS, NULL},
	 { (char *)"cvHoughLines2", _wrap_cvHoughLines2, METH_VARARGS, NULL},
	 { (char *)"cvFitLine", _wrap_cvFitLine, METH_VARARGS, NULL},
	 { (char *)"cvLoadHaarClassifierCascade", _wrap_cvLoadHaarClassifierCascade, METH_VARARGS, NULL},
	 { (char *)"cvReleaseHaarClassifierCascade", _wrap_cvReleaseHaarClassifierCascade, METH_VARARGS, NULL},
	 { (char *)"cvHaarDetectObjects", _wrap_cvHaarDetectObjects, METH_VARARGS, NULL},
	 { (char *)"cvSetImagesForHaarClassifierCascade", _wrap_cvSetImagesForHaarClassifierCascade, METH_VARARGS, NULL},
	 { (char *)"cvRunHaarClassifierCascade", _wrap_cvRunHaarClassifierCascade, METH_VARARGS, NULL},
	 { (char *)"cvUndistort2", _wrap_cvUndistort2, METH_VARARGS, NULL},
	 { (char *)"cvInitUndistortMap", _wrap_cvInitUndistortMap, METH_VARARGS, NULL},
	 { (char *)"cvRodrigues2", _wrap_cvRodrigues2, METH_VARARGS, NULL},
	 { (char *)"cvFindHomography", _wrap_cvFindHomography, METH_VARARGS, NULL},
	 { (char *)"cvProjectPoints2", _wrap_cvProjectPoints2, METH_VARARGS, NULL},
	 { (char *)"cvFindExtrinsicCameraParams2", _wrap_cvFindExtrinsicCameraParams2, METH_VARARGS, NULL},
	 { (char *)"cvCalibrateCamera2", _wrap_cvCalibrateCamera2, METH_VARARGS, NULL},
	 { (char *)"cvFindChessBoardCornerGuesses", _wrap_cvFindChessBoardCornerGuesses, METH_VARARGS, NULL},
	 { (char *)"cvCreatePOSITObject", _wrap_cvCreatePOSITObject, METH_VARARGS, NULL},
	 { (char *)"cvPOSIT", _wrap_cvPOSIT, METH_VARARGS, NULL},
	 { (char *)"cvReleasePOSITObject", _wrap_cvReleasePOSITObject, METH_VARARGS, NULL},
	 { (char *)"cvConvertPointsHomogenious", _wrap_cvConvertPointsHomogenious, METH_VARARGS, NULL},
	 { (char *)"cvFindFundamentalMat", _wrap_cvFindFundamentalMat, METH_VARARGS, NULL},
	 { (char *)"cvComputeCorrespondEpilines", _wrap_cvComputeCorrespondEpilines, METH_VARARGS, NULL},
	 { (char *)"SendErrorToPython", _wrap_SendErrorToPython, METH_VARARGS, NULL},
	 { (char *)"function_ptr_generator", _wrap_function_ptr_generator, METH_VARARGS, NULL},
	 { (char *)"void_ptr_generator", _wrap_void_ptr_generator, METH_VARARGS, NULL},
	 { (char *)"void_ptrptr_generator", _wrap_void_ptrptr_generator, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_CvSparseMatIterator[] = {{"_p_CvSparseMatIterator", 0, "CvSparseMatIterator *", 0, 0, 0, 0},{"_p_CvSparseMatIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_q_const__void__int[] = {{"_p_f_p_q_const__void__int", 0, "int (*)(void const *)|CvIsInstanceFunc", 0, 0, 0, 0},{"_p_f_p_q_const__void__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvNArrayIterator[] = {{"_p_CvNArrayIterator", 0, "CvNArrayIterator *", 0, 0, 0, 0},{"_p_CvNArrayIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_q_const__void_p_q_const__void_p_void__int[] = {{"_p_f_p_q_const__void_p_q_const__void_p_void__int", 0, "int (*)(void const *,void const *,void *)|CvCmpFunc", 0, 0, 0, 0},{"_p_f_p_q_const__void_p_q_const__void_p_void__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvTreeNodeIterator[] = {{"_p_CvTreeNodeIterator", 0, "CvTreeNodeIterator *", 0, 0, 0, 0},{"_p_CvTreeNodeIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_void_p_void__int[] = {{"_p_f_p_void_p_void__int", 0, "int (*)(void *,void *)|CvFreeFunc", 0, 0, 0, 0},{"_p_f_p_void_p_void__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvLineIterator[] = {{"_p_CvLineIterator", 0, "CvLineIterator *", 0, 0, 0, 0},{"_p_CvLineIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_p_void__void[] = {{"_p_f_p_p_void__void", 0, "void (*)(void **)|CvReleaseFunc", 0, 0, 0, 0},{"_p_f_p_p_void__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p__IplImage_int_int__void[] = {{"_p_f_p__IplImage_int_int__void", 0, "void (*)(_IplImage *,int,int)|Cv_iplAllocateImageData", 0, 0, 0, 0},{"_p_f_p__IplImage_int_int__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p__IplImage_int__void[] = {{"_p_f_p__IplImage_int__void", 0, "void (*)(_IplImage *,int)|Cv_iplDeallocate", 0, 0, 0, 0},{"_p_f_p__IplImage_int__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFileNode[] = {{"_p_CvFileNode", 0, "CvFileNode *", 0, 0, 0, 0},{"_p_CvFileNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint3D64f[] = {{"_p_CvPoint3D64f", 0, "CvPoint3D64f *", 0, 0, 0, 0},{"_p_CvPoint3D64f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMat[] = {{"_p_CvMat", 0, "CvMat *", 0, 0, 0, 0},{"_p_CvMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplTileInfo[] = {{"_p__IplTileInfo", 0, "_IplTileInfo *|IplTileInfo *", 0, 0, 0, 0},{"_p__IplTileInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__size_t[] = {{"_std__size_t", 0, "std::size_t", 0, 0, 0, 0},{"_std__size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvModuleInfo[] = {{"_p_CvModuleInfo", 0, "CvModuleInfo *", 0, 0, 0, 0},{"_p_CvModuleInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvMat[] = {{"_p_p_CvMat", 0, "CvMat **", 0, 0, 0, 0},{"_p_p_CvMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *|CvSubdiv2DEdge *", 0, 0, 0, 0},{"_p_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvRect[] = {{"_p_CvRect", 0, "CvRect *", 0, 0, 0, 0},{"_p_CvRect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatND[] = {{"_p_CvMatND", 0, "CvMatND *", 0, 0, 0, 0},{"_p_CvMatND", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPluginFuncInfo[] = {{"_p_CvPluginFuncInfo", 0, "CvPluginFuncInfo *", 0, 0, 0, 0},{"_p_CvPluginFuncInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvMatND[] = {{"_p_p_CvMatND", 0, "CvMatND **", 0, 0, 0, 0},{"_p_p_CvMatND", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_short[] = {{"_p_unsigned_short", 0, "unsigned short *|ushort *", 0, 0, 0, 0},{"_p_unsigned_short", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_short[] = {{"_p_short", 0, "short *", 0, 0, 0, 0},{"_p_short", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplConvKernel[] = {{"_p__IplConvKernel", 0, "_IplConvKernel *|IplConvKernel *", 0, 0, 0, 0},{"_p__IplConvKernel", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p__IplConvKernel[] = {{"_p_p__IplConvKernel", 0, "_IplConvKernel **|IplConvKernel **", 0, 0, 0, 0},{"_p_p__IplConvKernel", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphVtx2D[] = {{"_p_CvGraphVtx2D", 0, "CvGraphVtx2D *", 0, 0, 0, 0},{"_p_CvGraphVtx2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSparseNode[] = {{"_p_CvSparseNode", 0, "CvSparseNode *", 0, 0, 0, 0},{"_p_CvSparseNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConnectedComp[] = {{"_p_CvConnectedComp", 0, "CvConnectedComp *", 0, 0, 0, 0},{"_p_CvConnectedComp", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint2D32f[] = {{"_p_CvPoint2D32f", 0, "CvPoint2D32f *", 0, 0, 0, 0},{"_p_CvPoint2D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_q_const__float_p_q_const__float_p_void__float[] = {{"_p_f_p_q_const__float_p_q_const__float_p_void__float", 0, "float (*)(float const *,float const *,void *)|CvDistanceFunction", 0, 0, 0, 0},{"_p_f_p_q_const__float_p_q_const__float_p_void__float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvAttrList[] = {{"_p_CvAttrList", 0, "CvAttrList *", 0, 0, 0, 0},{"_p_CvAttrList", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_a_2__float[] = {{"_p_a_2__float", 0, "float (*)[2]", 0, 0, 0, 0},{"_p_a_2__float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_a_3__float[] = {{"_p_a_3__float", 0, "float (*)[3]", 0, 0, 0, 0},{"_p_a_3__float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void[] = {{"_p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void", 0, "void (*)(CvFileStorage *,char const *,void const *,CvAttrList)|CvWriteFunc", 0, 0, 0, 0},{"_p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvScalar[] = {{"_p_CvScalar", 0, "CvScalar *", 0, 0, 0, 0},{"_p_CvScalar", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_a_2__char[] = {{"_p_a_2__char", 0, "char (*)[2]", 0, 0, 0, 0},{"_p_a_2__char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvRandState[] = {{"_p_CvRandState", 0, "CvRandState *", 0, 0, 0, 0},{"_p_CvRandState", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__std__ptrdiff_t[] = {{"_std__ptrdiff_t", 0, "std::ptrdiff_t", 0, 0, 0, 0},{"_std__ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvContourTree[] = {{"_p_CvContourTree", 0, "CvContourTree *", 0, 0, 0, 0},{"_p_CvContourTree", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_q_const__void__p_void[] = {{"_p_f_p_q_const__void__p_void", 0, "void *(*)(void const *)|CvCloneFunc", 0, 0, 0, 0},{"_p_f_p_q_const__void__p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_CvFileStorage_p_CvFileNode__p_void[] = {{"_p_f_p_CvFileStorage_p_CvFileNode__p_void", 0, "void *(*)(CvFileStorage *,CvFileNode *)|CvReadFunc", 0, 0, 0, 0},{"_p_f_p_CvFileStorage_p_CvFileNode__p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0, 0, 0, 0},{"_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_void[] = {{"_p_p_void", 0, "void **", 0, 0, 0, 0},{"_p_p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFileStorage[] = {{"_p_CvFileStorage", 0, "CvFileStorage *", 0, 0, 0, 0},{"_p_CvFileStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemStorage[] = {{"_p_CvMemStorage", 0, "CvMemStorage *", 0, 0, 0, 0},{"_p_CvMemStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvMemStorage[] = {{"_p_p_CvMemStorage", 0, "CvMemStorage **", 0, 0, 0, 0},{"_p_p_CvMemStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_size_t_p_void__p_void[] = {{"_p_f_size_t_p_void__p_void", 0, "void *(*)(size_t,void *)|CvAllocFunc", 0, 0, 0, 0},{"_p_f_size_t_p_void__p_void", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvFileStorage[] = {{"_p_p_CvFileStorage", 0, "CvFileStorage **", 0, 0, 0, 0},{"_p_p_CvFileStorage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint3D32f[] = {{"_p_CvPoint3D32f", 0, "CvPoint3D32f *", 0, 0, 0, 0},{"_p_CvPoint3D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0, 0, 0, 0},{"_p_double", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvTermCriteria[] = {{"_p_CvTermCriteria", 0, "CvTermCriteria *", 0, 0, 0, 0},{"_p_CvTermCriteria", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConDensation[] = {{"_p_CvConDensation", 0, "CvConDensation *", 0, 0, 0, 0},{"_p_CvConDensation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvConDensation[] = {{"_p_p_CvConDensation", 0, "CvConDensation **", 0, 0, 0, 0},{"_p_p_CvConDensation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvBox2D[] = {{"_p_CvBox2D", 0, "CvBox2D *", 0, 0, 0, 0},{"_p_CvBox2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2DPointLocation[] = {{"_p_CvSubdiv2DPointLocation", 0, "enum CvSubdiv2DPointLocation *|CvSubdiv2DPointLocation *", 0, 0, 0, 0},{"_p_CvSubdiv2DPointLocation", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_long_long[] = {{"_p_unsigned_long_long", 0, "unsigned long long *|CvRNG *", 0, 0, 0, 0},{"_p_unsigned_long_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_long_long[] = {{"_p_long_long", 0, "long long *|int64 *", 0, 0, 0, 0},{"_p_long_long", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatND_data[] = {{"_p_CvMatND_data", 0, "CvMatND_data *", 0, 0, 0, 0},{"_p_CvMatND_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeq[] = {{"_p_CvSeq", 0, "CvSeq *", 0, 0, 0, 0},{"_p_CvSeq", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvSeq[] = {{"_p_p_CvSeq", 0, "CvSeq **", 0, 0, 0, 0},{"_p_p_CvSeq", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatND_dim[] = {{"_p_CvMatND_dim", 0, "CvMatND_dim *", 0, 0, 0, 0},{"_p_CvMatND_dim", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvKalman[] = {{"_p_CvKalman", 0, "CvKalman *", 0, 0, 0, 0},{"_p_CvKalman", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvKalman[] = {{"_p_p_CvKalman", 0, "CvKalman **", 0, 0, 0, 0},{"_p_p_CvKalman", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint[] = {{"_p_CvPoint", 0, "CvPoint *", 0, 0, 0, 0},{"_p_CvPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqReader[] = {{"_p_CvSeqReader", 0, "CvSeqReader *", 0, 0, 0, 0},{"_p_CvSeqReader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGenericHash[] = {{"_p_CvGenericHash", 0, "CvGenericHash *|CvFileNodeHash *", 0, 0, 0, 0},{"_p_CvGenericHash", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvPoint[] = {{"_p_p_CvPoint", 0, "CvPoint **", 0, 0, 0, 0},{"_p_p_CvPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSet[] = {{"_p_CvSet", 0, "CvSet *", 0, 0, 0, 0},{"_p_CvSet", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqBlock[] = {{"_p_CvSeqBlock", 0, "CvSeqBlock *", 0, 0, 0, 0},{"_p_CvSeqBlock", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvSeqBlock[] = {{"_p_p_CvSeqBlock", 0, "CvSeqBlock **", 0, 0, 0, 0},{"_p_p_CvSeqBlock", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphScanner[] = {{"_p_CvGraphScanner", 0, "CvGraphScanner *", 0, 0, 0, 0},{"_p_CvGraphScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvGraphScanner[] = {{"_p_p_CvGraphScanner", 0, "CvGraphScanner **", 0, 0, 0, 0},{"_p_p_CvGraphScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__CvContourScanner[] = {{"_p__CvContourScanner", 0, "_CvContourScanner *|CvContourScanner", 0, 0, 0, 0},{"_p__CvContourScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p__CvContourScanner[] = {{"_p_p__CvContourScanner", 0, "_CvContourScanner **|CvContourScanner *", 0, 0, 0, 0},{"_p_p__CvContourScanner", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvGraphEdge[] = {{"_p_p_CvGraphEdge", 0, "CvGraphEdge **", 0, 0, 0, 0},{"_p_p_CvGraphEdge", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphEdge[] = {{"_p_CvGraphEdge", 0, "CvGraphEdge *", 0, 0, 0, 0},{"_p_CvGraphEdge", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvConvexityDefect[] = {{"_p_CvConvexityDefect", 0, "CvConvexityDefect *", 0, 0, 0, 0},{"_p_CvConvexityDefect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFilter[] = {{"_p_CvFilter", 0, "enum CvFilter *|CvFilter *", 0, 0, 0, 0},{"_p_CvFilter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHidHaarClassifierCascade[] = {{"_p_CvHidHaarClassifierCascade", 0, "CvHidHaarClassifierCascade *", 0, 0, 0, 0},{"_p_CvHidHaarClassifierCascade", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarClassifierCascade[] = {{"_p_CvHaarClassifierCascade", 0, "CvHaarClassifierCascade *", 0, 0, 0, 0},{"_p_CvHaarClassifierCascade", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvHaarClassifierCascade[] = {{"_p_p_CvHaarClassifierCascade", 0, "CvHaarClassifierCascade **", 0, 0, 0, 0},{"_p_p_CvHaarClassifierCascade", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSize2D32f[] = {{"_p_CvSize2D32f", 0, "CvSize2D32f *", 0, 0, 0, 0},{"_p_CvSize2D32f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplImage[] = {{"_p__IplImage", 0, "_IplImage *|IplImage *", 0, 0, 0, 0},{"_p__IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p__IplImage[] = {{"_p_p__IplImage", 0, "_IplImage **|IplImage **", 0, 0, 0, 0},{"_p_p__IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_p_q_const__IplImage__p__IplImage[] = {{"_p_f_p_q_const__IplImage__p__IplImage", 0, "_IplImage *(*)(IplImage const *)|Cv_iplCloneImage", 0, 0, 0, 0},{"_p_f_p_q_const__IplImage__p__IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMatrix3[] = {{"_p_CvMatrix3", 0, "CvMatrix3 *", 0, 0, 0, 0},{"_p_CvMatrix3", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int[] = {{"_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int", 0, "int (*)(int,char const *,char const *,char const *,int,void *)|CvErrorCallback", 0, 0, 0, 0},{"_p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_char[] = {{"_p_char", 0, "char *", 0, 0, 0, 0},{"_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMoments[] = {{"_p_CvMoments", 0, "CvMoments *", 0, 0, 0, 0},{"_p_CvMoments", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHuMoments[] = {{"_p_CvHuMoments", 0, "CvHuMoments *", 0, 0, 0, 0},{"_p_CvHuMoments", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarClassifier[] = {{"_p_CvHaarClassifier", 0, "CvHaarClassifier *", 0, 0, 0, 0},{"_p_CvHaarClassifier", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarStageClassifier[] = {{"_p_CvHaarStageClassifier", 0, "CvHaarStageClassifier *", 0, 0, 0, 0},{"_p_CvHaarStageClassifier", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvNextEdgeType[] = {{"_p_CvNextEdgeType", 0, "enum CvNextEdgeType *|CvNextEdgeType *", 0, 0, 0, 0},{"_p_CvNextEdgeType", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvTypeInfo[] = {{"_p_CvTypeInfo", 0, "CvTypeInfo *", 0, 0, 0, 0},{"_p_CvTypeInfo", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemStoragePos[] = {{"_p_CvMemStoragePos", 0, "CvMemStoragePos *", 0, 0, 0, 0},{"_p_CvMemStoragePos", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplConvKernelFP[] = {{"_p__IplConvKernelFP", 0, "_IplConvKernelFP *|IplConvKernelFP *", 0, 0, 0, 0},{"_p__IplConvKernelFP", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvChain[] = {{"_p_CvChain", 0, "CvChain *", 0, 0, 0, 0},{"_p_CvChain", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFileNode_data[] = {{"_p_CvFileNode_data", 0, "CvFileNode_data *", 0, 0, 0, 0},{"_p_CvFileNode_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2D[] = {{"_p_CvSubdiv2D", 0, "CvSubdiv2D *", 0, 0, 0, 0},{"_p_CvSubdiv2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHistogram[] = {{"_p_CvHistogram", 0, "CvHistogram *", 0, 0, 0, 0},{"_p_CvHistogram", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvQuadEdge2D[] = {{"_p_CvQuadEdge2D", 0, "CvQuadEdge2D *", 0, 0, 0, 0},{"_p_CvQuadEdge2D", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvHistogram[] = {{"_p_p_CvHistogram", 0, "CvHistogram **", 0, 0, 0, 0},{"_p_p_CvHistogram", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMat_data[] = {{"_p_CvMat_data", 0, "CvMat_data *", 0, 0, 0, 0},{"_p_CvMat_data", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraph[] = {{"_p_CvGraph", 0, "CvGraph *", 0, 0, 0, 0},{"_p_CvGraph", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPOSITObject[] = {{"_p_CvPOSITObject", 0, "CvPOSITObject *", 0, 0, 0, 0},{"_p_CvPOSITObject", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvPOSITObject[] = {{"_p_p_CvPOSITObject", 0, "CvPOSITObject **", 0, 0, 0, 0},{"_p_p_CvPOSITObject", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSetElem[] = {{"_p_CvSetElem", 0, "CvSetElem *", 0, 0, 0, 0},{"_p_CvSetElem", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvSetElem[] = {{"_p_p_CvSetElem", 0, "CvSetElem **", 0, 0, 0, 0},{"_p_p_CvSetElem", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvFont[] = {{"_p_CvFont", 0, "CvFont *", 0, 0, 0, 0},{"_p_CvFont", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p__IplROI[] = {{"_p__IplROI", 0, "_IplROI *|IplROI *", 0, 0, 0, 0},{"_p__IplROI", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_int_int_int_int_int__p__IplROI[] = {{"_p_f_int_int_int_int_int__p__IplROI", 0, "_IplROI *(*)(int,int,int,int,int)|Cv_iplCreateROI", 0, 0, 0, 0},{"_p_f_int_int_int_int_int__p__IplROI", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSlice[] = {{"_p_CvSlice", 0, "CvSlice *", 0, 0, 0, 0},{"_p_CvSlice", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvChainPtReader[] = {{"_p_CvChainPtReader", 0, "CvChainPtReader *", 0, 0, 0, 0},{"_p_CvChainPtReader", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvString[] = {{"_p_CvString", 0, "CvString *", 0, 0, 0, 0},{"_p_CvString", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSparseMat[] = {{"_p_CvSparseMat", 0, "CvSparseMat *", 0, 0, 0, 0},{"_p_CvSparseMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvSparseMat[] = {{"_p_p_CvSparseMat", 0, "CvSparseMat **", 0, 0, 0, 0},{"_p_p_CvSparseMat", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSeqWriter[] = {{"_p_CvSeqWriter", 0, "CvSeqWriter *", 0, 0, 0, 0},{"_p_CvSeqWriter", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage[] = {{"_p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage", 0, "_IplImage *(*)(int,int,int,char *,char *,int,int,int,int,int,IplROI *,IplImage *,void *,IplTileInfo *)|Cv_iplCreateImageHeader", 0, 0, 0, 0},{"_p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvSubdiv2DPoint[] = {{"_p_p_CvSubdiv2DPoint", 0, "CvSubdiv2DPoint **", 0, 0, 0, 0},{"_p_p_CvSubdiv2DPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSubdiv2DPoint[] = {{"_p_CvSubdiv2DPoint", 0, "CvSubdiv2DPoint *", 0, 0, 0, 0},{"_p_CvSubdiv2DPoint", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvContour[] = {{"_p_CvContour", 0, "CvContour *|CvPoint2DSeq *", 0, 0, 0, 0},{"_p_CvContour", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_int[] = {{"_p_unsigned_int", 0, "unsigned int *", 0, 0, 0, 0},{"_p_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvAvgComp[] = {{"_p_CvAvgComp", 0, "CvAvgComp *", 0, 0, 0, 0},{"_p_CvAvgComp", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvSize[] = {{"_p_CvSize", 0, "CvSize *", 0, 0, 0, 0},{"_p_CvSize", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_char[] = {{"_p_unsigned_char", 0, "unsigned char *|uchar *", 0, 0, 0, 0},{"_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_unsigned_char[] = {{"_p_p_unsigned_char", 0, "unsigned char **|uchar **", 0, 0, 0, 0},{"_p_p_unsigned_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvStringHashNode[] = {{"_p_CvStringHashNode", 0, "CvStringHashNode *", 0, 0, 0, 0},{"_p_CvStringHashNode", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvMemBlock[] = {{"_p_CvMemBlock", 0, "CvMemBlock *", 0, 0, 0, 0},{"_p_CvMemBlock", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarFeature_rect[] = {{"_p_CvHaarFeature_rect", 0, "CvHaarFeature_rect *", 0, 0, 0, 0},{"_p_CvHaarFeature_rect", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvGraphVtx[] = {{"_p_CvGraphVtx", 0, "CvGraphVtx *", 0, 0, 0, 0},{"_p_CvGraphVtx", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_CvGraphVtx[] = {{"_p_p_CvGraphVtx", 0, "CvGraphVtx **", 0, 0, 0, 0},{"_p_p_CvGraphVtx", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_float[] = {{"_p_float", 0, "float *|CvVect32f", 0, 0, 0, 0},{"_p_float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_float[] = {{"_p_p_float", 0, "float **", 0, 0, 0, 0},{"_p_p_float", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvPoint2D64f[] = {{"_p_CvPoint2D64f", 0, "CvPoint2D64f *", 0, 0, 0, 0},{"_p_CvPoint2D64f", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CvHaarFeature[] = {{"_p_CvHaarFeature", 0, "CvHaarFeature *", 0, 0, 0, 0},{"_p_CvHaarFeature", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_CvSparseMatIterator, 
_swigt__p_f_p_q_const__void__int, 
_swigt__p_CvNArrayIterator, 
_swigt__p_f_p_q_const__void_p_q_const__void_p_void__int, 
_swigt__p_CvTreeNodeIterator, 
_swigt__p_f_p_void_p_void__int, 
_swigt__p_CvLineIterator, 
_swigt__p_f_p_p_void__void, 
_swigt__p_f_p__IplImage_int_int__void, 
_swigt__p_f_p__IplImage_int__void, 
_swigt__p_CvFileNode, 
_swigt__p_CvPoint3D64f, 
_swigt__p_CvMat, 
_swigt__p__IplTileInfo, 
_swigt__std__size_t, 
_swigt__size_t, 
_swigt__p_CvModuleInfo, 
_swigt__p_p_CvMat, 
_swigt__p_size_t, 
_swigt__p_CvRect, 
_swigt__p_CvMatND, 
_swigt__p_CvPluginFuncInfo, 
_swigt__p_p_CvMatND, 
_swigt__p_unsigned_short, 
_swigt__p_short, 
_swigt__p__IplConvKernel, 
_swigt__p_p__IplConvKernel, 
_swigt__p_CvGraphVtx2D, 
_swigt__p_CvSparseNode, 
_swigt__p_CvConnectedComp, 
_swigt__p_CvPoint2D32f, 
_swigt__p_f_p_q_const__float_p_q_const__float_p_void__float, 
_swigt__p_CvAttrList, 
_swigt__p_a_2__float, 
_swigt__p_a_3__float, 
_swigt__p_f_p_CvFileStorage_p_q_const__char_p_q_const__void_CvAttrList__void, 
_swigt__p_CvScalar, 
_swigt__p_a_2__char, 
_swigt__p_CvRandState, 
_swigt__std__ptrdiff_t, 
_swigt__ptrdiff_t, 
_swigt__p_CvContourTree, 
_swigt__p_f_p_q_const__void__p_void, 
_swigt__p_f_p_CvFileStorage_p_CvFileNode__p_void, 
_swigt__p_void, 
_swigt__p_p_void, 
_swigt__p_CvFileStorage, 
_swigt__p_CvMemStorage, 
_swigt__p_p_CvMemStorage, 
_swigt__p_f_size_t_p_void__p_void, 
_swigt__p_p_CvFileStorage, 
_swigt__p_CvPoint3D32f, 
_swigt__p_double, 
_swigt__p_int, 
_swigt__p_CvTermCriteria, 
_swigt__p_CvConDensation, 
_swigt__p_p_CvConDensation, 
_swigt__p_CvBox2D, 
_swigt__p_CvSubdiv2DPointLocation, 
_swigt__p_unsigned_long_long, 
_swigt__p_long_long, 
_swigt__p_CvMatND_data, 
_swigt__p_CvSeq, 
_swigt__p_p_CvSeq, 
_swigt__p_CvMatND_dim, 
_swigt__p_CvKalman, 
_swigt__p_p_CvKalman, 
_swigt__p_CvPoint, 
_swigt__p_CvSeqReader, 
_swigt__p_CvGenericHash, 
_swigt__p_p_CvPoint, 
_swigt__p_CvSet, 
_swigt__p_CvSeqBlock, 
_swigt__p_p_CvSeqBlock, 
_swigt__p_CvGraphScanner, 
_swigt__p_p_CvGraphScanner, 
_swigt__p__CvContourScanner, 
_swigt__p_p__CvContourScanner, 
_swigt__p_p_CvGraphEdge, 
_swigt__p_CvGraphEdge, 
_swigt__p_CvConvexityDefect, 
_swigt__p_CvFilter, 
_swigt__p_CvHidHaarClassifierCascade, 
_swigt__p_CvHaarClassifierCascade, 
_swigt__p_p_CvHaarClassifierCascade, 
_swigt__p_CvSize2D32f, 
_swigt__p__IplImage, 
_swigt__p_p__IplImage, 
_swigt__p_f_p_q_const__IplImage__p__IplImage, 
_swigt__p_CvMatrix3, 
_swigt__p_f_int_p_q_const__char_p_q_const__char_p_q_const__char_int_p_void__int, 
_swigt__p_p_char, 
_swigt__p_char, 
_swigt__p_CvMoments, 
_swigt__p_CvHuMoments, 
_swigt__p_CvHaarClassifier, 
_swigt__p_CvHaarStageClassifier, 
_swigt__p_CvNextEdgeType, 
_swigt__p_CvTypeInfo, 
_swigt__p_CvMemStoragePos, 
_swigt__p__IplConvKernelFP, 
_swigt__p_CvChain, 
_swigt__p_CvFileNode_data, 
_swigt__p_CvSubdiv2D, 
_swigt__p_CvHistogram, 
_swigt__p_CvQuadEdge2D, 
_swigt__p_p_CvHistogram, 
_swigt__p_CvMat_data, 
_swigt__p_CvGraph, 
_swigt__p_CvPOSITObject, 
_swigt__p_p_CvPOSITObject, 
_swigt__p_CvSetElem, 
_swigt__p_p_CvSetElem, 
_swigt__p_CvFont, 
_swigt__p__IplROI, 
_swigt__p_f_int_int_int_int_int__p__IplROI, 
_swigt__p_CvSlice, 
_swigt__p_CvChainPtReader, 
_swigt__p_CvString, 
_swigt__p_CvSparseMat, 
_swigt__p_p_CvSparseMat, 
_swigt__p_CvSeqWriter, 
_swigt__p_f_int_int_int_p_char_p_char_int_int_int_int_int_p_IplROI_p_IplImage_p_void_p_IplTileInfo__p__IplImage, 
_swigt__p_p_CvSubdiv2DPoint, 
_swigt__p_CvSubdiv2DPoint, 
_swigt__p_CvContour, 
_swigt__p_unsigned_int, 
_swigt__p_CvAvgComp, 
_swigt__p_CvSize, 
_swigt__p_unsigned_char, 
_swigt__p_p_unsigned_char, 
_swigt__p_CvStringHashNode, 
_swigt__p_CvMemBlock, 
_swigt__p_CvHaarFeature_rect, 
_swigt__p_CvGraphVtx, 
_swigt__p_p_CvGraphVtx, 
_swigt__p_float, 
_swigt__p_p_float, 
_swigt__p_CvPoint2D64f, 
_swigt__p_CvHaarFeature, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_IMAGE", 0, 0, (void *)"opencv-image", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_MAT", 0, 0, (void *)"opencv-matrix", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_MATND", 0, 0, (void *)"opencv-nd-matrix", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_SPARSE_MAT", 0, 0, (void *)"opencv-sparse-matrix", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_SEQ", 0, 0, (void *)"opencv-sequence", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_SEQ_TREE", 0, 0, (void *)"opencv-sequence-tree", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_GRAPH", 0, 0, (void *)"opencv-graph", &SWIGTYPE_p_char},
{ SWIG_PY_POINTER, (char*)"CV_TYPE_NAME_HAAR", 0, 0, (void *)"opencv-haar-classifier", &SWIGTYPE_p_char},
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)();           /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    static PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    static int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    static PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    static int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    static PyTypeObject varlinktype = {
        PyObject_HEAD_INIT(0)              
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        0,                                  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        0,                                  /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        0,                                  /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
    
    /* Create a variable linking object for use later */
    static PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = 0;
        result = PyMem_NEW(swig_varlinkobject,1);
        varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
        result->ob_type = &varlinktype;
        result->vars = 0;
        result->ob_refcnt = 0;
        Py_XINCREF((PyObject *) result);
        return ((PyObject*) result);
    }
    
    static void
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v;
        swig_globalvar *gv;
        v= (swig_varlinkobject *) p;
        gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        gv->name = (char *) malloc(strlen(name)+1);
        strcpy(gv->name,name);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    static void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; i++) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    static void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; j++) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    char *buff = ndoc;
                    void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue: (void *)(ci->lvalue);
                    strncpy(buff, methods[i].ml_doc, ldoc);
                    buff += ldoc;
                    strncpy(buff, "swig_ptr: ", 10);
                    buff += 10;
                    SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                    methods[i].ml_doc = ndoc;
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    static int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
    static swig_type_info **
    SWIG_Python_SetTypeListHandle(swig_type_info **type_list_handle) {
        static PyMethodDef swig_empty_runtime_method_table[] = {
            {
                NULL, NULL, 0, NULL
            } 
        };/* Sentinel */
        
        PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
        swig_empty_runtime_method_table);
        PyObject *pointer = PyCObject_FromVoidPtr((void *) type_list_handle, NULL);
        if (pointer && module) {
            PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
        }
        return type_list_handle;
    } 
    
    static swig_type_info **
    SWIG_Python_LookupTypePointer(swig_type_info **type_list_handle) {
        swig_type_info **type_pointer;
        
        /* first check if module already created */
        type_pointer = SWIG_Python_GetTypeListHandle();
        if (type_pointer) {
            return type_pointer;
        } else {
            /* create a new module and variable */
            return SWIG_Python_SetTypeListHandle(type_list_handle);
        }
    }
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void *) SWIG_ReturnGlobalTypeList(void *);
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_types_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
#ifdef SWIG_LINK_RUNTIME
        swig_type_list_handle = (swig_type_info **) SWIG_ReturnGlobalTypeList(swig_type_list_handle);
#else
#  ifndef SWIG_STATIC_RUNTIME
        swig_type_list_handle = SWIG_Python_LookupTypePointer(swig_type_list_handle);
#  endif
#endif
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"CV_AUTOSTEP", SWIG_From_int((int)(0x7fffffff))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAX_ARR", SWIG_From_int((int)(10))); 
    }
    {
        PyDict_SetItemString(d,"CV_NO_DEPTH_CHECK", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_NO_CN_CHECK", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_NO_SIZE_CHECK", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_EQ", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_GT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_GE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_LT", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_LE", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_CMP_NE", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHECK_RANGE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHECK_QUIET", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_RAND_UNI", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_RAND_NORMAL", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GEMM_A_T", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GEMM_B_T", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_GEMM_C_T", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_SVD_MODIFY_A", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_SVD_U_T", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_SVD_V_T", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_LU", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SVD", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_SVD_SYM", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_COVAR_SCRAMBLED", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_COVAR_NORMAL", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_COVAR_USE_AVG", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_COVAR_SCALE", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_C", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_L1", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_L2", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_NORM_MASK", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_RELATIVE", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIFF", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIFF_C", SWIG_From_int((int)((16|1)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIFF_L1", SWIG_From_int((int)((16|2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIFF_L2", SWIG_From_int((int)((16|4)))); 
    }
    {
        PyDict_SetItemString(d,"CV_RELATIVE_C", SWIG_From_int((int)((8|1)))); 
    }
    {
        PyDict_SetItemString(d,"CV_RELATIVE_L1", SWIG_From_int((int)((8|2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_RELATIVE_L2", SWIG_From_int((int)((8|4)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_FORWARD", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_INVERSE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_SCALE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_INV_SCALE", SWIG_From_int((int)((1+2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_INVERSE_SCALE", SWIG_From_int((int)((1+2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_ROWS", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_DXT_MUL_CONJ", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_FRONT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_BACK", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_VERTEX", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_TREE_EDGE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_BACK_EDGE", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_FORWARD_EDGE", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_CROSS_EDGE", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_ANY_EDGE", SWIG_From_int((int)(30))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_NEW_TREE", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_BACKTRACKING", SWIG_From_int((int)(64))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_OVER", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_ALL_ITEMS", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_ITEM_VISITED_FLAG", SWIG_From_int((int)((1<<30)))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_SEARCH_TREE_NODE_FLAG", SWIG_From_int((int)((1<<29)))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_FORWARD_EDGE_FLAG", SWIG_From_int((int)((1<<28)))); 
    }
    {
        PyDict_SetItemString(d,"CV_FILLED", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_AA", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_SIMPLEX", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_PLAIN", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_DUPLEX", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_COMPLEX", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_TRIPLEX", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_COMPLEX_SMALL", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_SCRIPT_SIMPLEX", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_HERSHEY_SCRIPT_COMPLEX", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_ITALIC", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_FONT_VECTOR0", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_ErrModeLeaf", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_ErrModeParent", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_ErrModeSilent", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_PI", SWIG_From_double((double)(3.1415926535897932384626433832795))); 
    }
    {
        PyDict_SetItemString(d,"CV_LOG2", SWIG_From_double((double)(0.69314718055994530941723212145818))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_SIGN", SWIG_From_int((int)(0x80000000))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_1U", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_8U", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_16U", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_32F", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_8S", SWIG_From_int((int)((0x80000000|8)))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_16S", SWIG_From_int((int)((0x80000000|16)))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DEPTH_32S", SWIG_From_int((int)((0x80000000|32)))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DATA_ORDER_PIXEL", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"IPL_DATA_ORDER_PLANE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ORIGIN_TL", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ORIGIN_BL", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_4BYTES", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_8BYTES", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_16BYTES", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_32BYTES", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_DWORD", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"IPL_ALIGN_QWORD", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"IPL_BORDER_CONSTANT", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"IPL_BORDER_REPLICATE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"IPL_BORDER_REFLECT", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"IPL_BORDER_WRAP", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"IPL_IMAGE_HEADER", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"IPL_IMAGE_DATA", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"IPL_IMAGE_ROI", SWIG_From_int((int)(4))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_IMAGE", SWIG_FromCharPtr("opencv-image"));
    {
        PyDict_SetItemString(d,"IPL_DEPTH_64F", SWIG_From_int((int)(64))); 
    }
    {
        PyDict_SetItemString(d,"CV_CN_MAX", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_CN_SHIFT", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_DEPTH_MAX", SWIG_From_int((int)((1<<3)))); 
    }
    {
        PyDict_SetItemString(d,"CV_8U", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_8S", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_16U", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_16S", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_32S", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_32F", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_64F", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_USRTYPE1", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_AUTO_STEP", SWIG_From_int((int)(0x7fffffff))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_CN_MASK", SWIG_From_int((int)(((4-1)<<3)))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_DEPTH_MASK", SWIG_From_int((int)(((1<<3) -1)))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_TYPE_MASK", SWIG_From_int((int)(((1<<3)*4-1)))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_CONT_FLAG_SHIFT", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_CONT_FLAG", SWIG_From_int((int)((1<<9)))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_TEMP_FLAG_SHIFT", SWIG_From_int((int)(10))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_TEMP_FLAG", SWIG_From_int((int)((1<<10)))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAGIC_MASK", SWIG_From_int((int)(0xFFFF0000))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAT_MAGIC_VAL", SWIG_From_int((int)(0x42420000))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_MAT", SWIG_FromCharPtr("opencv-matrix"));
    {
        PyDict_SetItemString(d,"CV_MATND_MAGIC_VAL", SWIG_From_int((int)(0x42430000))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_MATND", SWIG_FromCharPtr("opencv-nd-matrix"));
    {
        PyDict_SetItemString(d,"CV_MAX_DIM", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"CV_MAX_DIM_HEAP", SWIG_From_int((int)((1<<16)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SPARSE_MAT_MAGIC_VAL", SWIG_From_int((int)(0x42440000))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_SPARSE_MAT", SWIG_FromCharPtr("opencv-sparse-matrix"));
    {
        PyDict_SetItemString(d,"CV_HIST_MAGIC_VAL", SWIG_From_int((int)(0x42450000))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_UNIFORM_FLAG", SWIG_From_int((int)((1<<10)))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_RANGES_FLAG", SWIG_From_int((int)((1<<11)))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_ARRAY", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_SPARSE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_TREE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_HIST_UNIFORM", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_TERMCRIT_ITER", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_TERMCRIT_NUMBER", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_TERMCRIT_EPS", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_WHOLE_SEQ_END_INDEX", SWIG_From_int((int)(0x3fffffff))); 
    }
    {
        PyDict_SetItemString(d,"CV_STORAGE_MAGIC_VAL", SWIG_From_int((int)(0x42890000))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_SEQ", SWIG_FromCharPtr("opencv-sequence"));
    PyDict_SetItemString(d,"CV_TYPE_NAME_SEQ_TREE", SWIG_FromCharPtr("opencv-sequence-tree"));
    {
        PyDict_SetItemString(d,"CV_SET_ELEM_IDX_MASK", SWIG_From_int((int)(((1<<24) -1)))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_GRAPH", SWIG_FromCharPtr("opencv-graph"));
    {
        PyDict_SetItemString(d,"CV_SEQ_MAGIC_VAL", SWIG_From_int((int)(0x42990000))); 
    }
    {
        PyDict_SetItemString(d,"CV_SET_MAGIC_VAL", SWIG_From_int((int)(0x42980000))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_BITS", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_MASK", SWIG_From_int((int)(((1<<5) -1)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_GENERIC", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_PTR", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_PPOINT", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_GRAPH_EDGE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_GRAPH_VERTEX", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_TRIAN_ATR", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_ELTYPE_CONNECTED_COMP", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_BITS", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_MASK", SWIG_From_int((int)((((1<<5) -1)<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_GENERIC", SWIG_From_int((int)((0<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_CURVE", SWIG_From_int((int)((1<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_BIN_TREE", SWIG_From_int((int)((2<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_GRAPH", SWIG_From_int((int)((3<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_KIND_SUBDIV2D", SWIG_From_int((int)((4<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_FLAG_SHIFT", SWIG_From_int((int)((5+5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_FLAG_CLOSED", SWIG_From_int((int)((1<<(5+5))))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_FLAG_SIMPLE", SWIG_From_int((int)((2<<(5+5))))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_FLAG_CONVEX", SWIG_From_int((int)((4<<(5+5))))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_FLAG_HOLE", SWIG_From_int((int)((8<<(5+5))))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH_FLAG_ORIENTED", SWIG_From_int((int)((1<<(5+5))))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAPH", SWIG_From_int((int)((3<<5)))); 
    }
    {
        PyDict_SetItemString(d,"CV_ORIENTED_GRAPH", SWIG_From_int((int)(((3<<5)|(1<<(5+5)))))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_POLYGON_TREE", SWIG_From_int((int)(((2<<5)|0)))); 
    }
    {
        PyDict_SetItemString(d,"CV_SEQ_CONNECTED_COMP", SWIG_From_int((int)(((0<<5)|0)))); 
    }
    {
        PyDict_SetItemString(d,"CV_STORAGE_READ", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_STORAGE_WRITE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_STORAGE_WRITE_TEXT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_STORAGE_WRITE_BINARY", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_NONE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_INT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_INTEGER", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_REAL", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_FLOAT", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_STR", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_STRING", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_REF", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_SEQ", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_MAP", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_TYPE_MASK", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_FLOW", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_USER", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_EMPTY", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_NAMED", SWIG_From_int((int)(64))); 
    }
    {
        PyDict_SetItemString(d,"CV_NODE_SEQ_SIMPLE", SWIG_From_int((int)(256))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsOk", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBackTrace", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsError", SWIG_From_int((int)(-2))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsInternal", SWIG_From_int((int)(-3))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsNoMem", SWIG_From_int((int)(-4))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadArg", SWIG_From_int((int)(-5))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadFunc", SWIG_From_int((int)(-6))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsNoConv", SWIG_From_int((int)(-7))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsAutoTrace", SWIG_From_int((int)(-8))); 
    }
    {
        PyDict_SetItemString(d,"CV_HeaderIsNull", SWIG_From_int((int)(-9))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadImageSize", SWIG_From_int((int)(-10))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadOffset", SWIG_From_int((int)(-11))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadDataPtr", SWIG_From_int((int)(-12))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadStep", SWIG_From_int((int)(-13))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadModelOrChSeq", SWIG_From_int((int)(-14))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadNumChannels", SWIG_From_int((int)(-15))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadNumChannel1U", SWIG_From_int((int)(-16))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadDepth", SWIG_From_int((int)(-17))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadAlphaChannel", SWIG_From_int((int)(-18))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadOrder", SWIG_From_int((int)(-19))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadOrigin", SWIG_From_int((int)(-20))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadAlign", SWIG_From_int((int)(-21))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadCallBack", SWIG_From_int((int)(-22))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadTileSize", SWIG_From_int((int)(-23))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadCOI", SWIG_From_int((int)(-24))); 
    }
    {
        PyDict_SetItemString(d,"CV_BadROISize", SWIG_From_int((int)(-25))); 
    }
    {
        PyDict_SetItemString(d,"CV_MaskIsTiled", SWIG_From_int((int)(-26))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsNullPtr", SWIG_From_int((int)(-27))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsVecLengthErr", SWIG_From_int((int)(-28))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsFilterStructContentErr", SWIG_From_int((int)(-29))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsKernelStructContentErr", SWIG_From_int((int)(-30))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsFilterOffsetErr", SWIG_From_int((int)(-31))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadSize", SWIG_From_int((int)(-201))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsDivByZero", SWIG_From_int((int)(-202))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsInplaceNotSupported", SWIG_From_int((int)(-203))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsObjectNotFound", SWIG_From_int((int)(-204))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsUnmatchedFormats", SWIG_From_int((int)(-205))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadFlag", SWIG_From_int((int)(-206))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadPoint", SWIG_From_int((int)(-207))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadMask", SWIG_From_int((int)(-208))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsUnmatchedSizes", SWIG_From_int((int)(-209))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsUnsupportedFormat", SWIG_From_int((int)(-210))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsOutOfRange", SWIG_From_int((int)(-211))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsParseError", SWIG_From_int((int)(-212))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsNotImplemented", SWIG_From_int((int)(-213))); 
    }
    {
        PyDict_SetItemString(d,"CV_StsBadMemBlock", SWIG_From_int((int)(-214))); 
    }
    {
        PyDict_SetItemString(d,"CV_BLUR_NO_SCALE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_BLUR", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_GAUSSIAN", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_MEDIAN", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_BILATERAL", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_SCHARR", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2BGRA", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2RGBA", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2BGR", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2RGB", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2RGBA", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2BGRA", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2BGR", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2RGB", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2RGB", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2BGR", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2RGBA", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2BGRA", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2GRAY", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2GRAY", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2BGR", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2RGB", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2BGRA", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2RGBA", SWIG_From_int((int)(9))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2GRAY", SWIG_From_int((int)(10))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2GRAY", SWIG_From_int((int)(11))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2BGR565", SWIG_From_int((int)(12))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2BGR565", SWIG_From_int((int)(13))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5652BGR", SWIG_From_int((int)(14))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5652RGB", SWIG_From_int((int)(15))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2BGR565", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2BGR565", SWIG_From_int((int)(17))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5652BGRA", SWIG_From_int((int)(18))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5652RGBA", SWIG_From_int((int)(19))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2BGR565", SWIG_From_int((int)(20))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5652GRAY", SWIG_From_int((int)(21))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2BGR555", SWIG_From_int((int)(22))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2BGR555", SWIG_From_int((int)(23))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5552BGR", SWIG_From_int((int)(24))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5552RGB", SWIG_From_int((int)(25))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGRA2BGR555", SWIG_From_int((int)(26))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGBA2BGR555", SWIG_From_int((int)(27))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5552BGRA", SWIG_From_int((int)(28))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5552RGBA", SWIG_From_int((int)(29))); 
    }
    {
        PyDict_SetItemString(d,"CV_GRAY2BGR555", SWIG_From_int((int)(30))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR5552GRAY", SWIG_From_int((int)(31))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2XYZ", SWIG_From_int((int)(32))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2XYZ", SWIG_From_int((int)(33))); 
    }
    {
        PyDict_SetItemString(d,"CV_XYZ2BGR", SWIG_From_int((int)(34))); 
    }
    {
        PyDict_SetItemString(d,"CV_XYZ2RGB", SWIG_From_int((int)(35))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2YCrCb", SWIG_From_int((int)(36))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2YCrCb", SWIG_From_int((int)(37))); 
    }
    {
        PyDict_SetItemString(d,"CV_YCrCb2BGR", SWIG_From_int((int)(38))); 
    }
    {
        PyDict_SetItemString(d,"CV_YCrCb2RGB", SWIG_From_int((int)(39))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2HSV", SWIG_From_int((int)(40))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2HSV", SWIG_From_int((int)(41))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2Lab", SWIG_From_int((int)(44))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2Lab", SWIG_From_int((int)(45))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerBG2BGR", SWIG_From_int((int)(46))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerGB2BGR", SWIG_From_int((int)(47))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerRG2BGR", SWIG_From_int((int)(48))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerGR2BGR", SWIG_From_int((int)(49))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerBG2RGB", SWIG_From_int((int)(48))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerGB2RGB", SWIG_From_int((int)(49))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerRG2RGB", SWIG_From_int((int)(46))); 
    }
    {
        PyDict_SetItemString(d,"CV_BayerGR2RGB", SWIG_From_int((int)(47))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2Luv", SWIG_From_int((int)(50))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2Luv", SWIG_From_int((int)(51))); 
    }
    {
        PyDict_SetItemString(d,"CV_BGR2HLS", SWIG_From_int((int)(52))); 
    }
    {
        PyDict_SetItemString(d,"CV_RGB2HLS", SWIG_From_int((int)(53))); 
    }
    {
        PyDict_SetItemString(d,"CV_HSV2BGR", SWIG_From_int((int)(54))); 
    }
    {
        PyDict_SetItemString(d,"CV_HSV2RGB", SWIG_From_int((int)(55))); 
    }
    {
        PyDict_SetItemString(d,"CV_Lab2BGR", SWIG_From_int((int)(56))); 
    }
    {
        PyDict_SetItemString(d,"CV_Lab2RGB", SWIG_From_int((int)(57))); 
    }
    {
        PyDict_SetItemString(d,"CV_Luv2BGR", SWIG_From_int((int)(58))); 
    }
    {
        PyDict_SetItemString(d,"CV_Luv2RGB", SWIG_From_int((int)(59))); 
    }
    {
        PyDict_SetItemString(d,"CV_HLS2BGR", SWIG_From_int((int)(60))); 
    }
    {
        PyDict_SetItemString(d,"CV_HLS2RGB", SWIG_From_int((int)(61))); 
    }
    {
        PyDict_SetItemString(d,"CV_COLORCVT_MAX", SWIG_From_int((int)(100))); 
    }
    {
        PyDict_SetItemString(d,"CV_INTER_NN", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_INTER_LINEAR", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_INTER_CUBIC", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_INTER_AREA", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_WARP_FILL_OUTLIERS", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_WARP_INVERSE_MAP", SWIG_From_int((int)(16))); 
    }
    {
        PyDict_SetItemString(d,"CV_SHAPE_RECT", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_SHAPE_CROSS", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_SHAPE_ELLIPSE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_SHAPE_CUSTOM", SWIG_From_int((int)(100))); 
    }
    {
        PyDict_SetItemString(d,"CV_MOP_OPEN", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_MOP_CLOSE", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_MOP_GRADIENT", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_MOP_TOPHAT", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_MOP_BLACKHAT", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_SQDIFF", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_SQDIFF_NORMED", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_CCORR", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_CCORR_NORMED", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_CCOEFF", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_TM_CCOEFF_NORMED", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_LKFLOW_PYR_A_READY", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_LKFLOW_PYR_B_READY", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_LKFLOW_INITIAL_GUESSES", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_POLY_APPROX_DP", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_DOMINANT_IPAN", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CONTOURS_MATCH_I1", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CONTOURS_MATCH_I2", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CONTOURS_MATCH_I3", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_CONTOUR_TREES_MATCH_I1", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CLOCKWISE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_COUNTER_CLOCKWISE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_COMP_CORREL", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_COMP_CHISQR", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_COMP_INTERSECT", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_VALUE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_ARRAY", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_MASK_3", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_MASK_5", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_THRESH_BINARY", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_THRESH_BINARY_INV", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_THRESH_TRUNC", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_THRESH_TOZERO", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_THRESH_TOZERO_INV", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_ADAPTIVE_THRESH_MEAN_C", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_ADAPTIVE_THRESH_GAUSSIAN_C", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_FLOODFILL_FIXED_RANGE", SWIG_From_int((int)((1<<16)))); 
    }
    {
        PyDict_SetItemString(d,"CV_FLOODFILL_MASK_ONLY", SWIG_From_int((int)((1<<17)))); 
    }
    {
        PyDict_SetItemString(d,"CV_HOUGH_STANDARD", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_HOUGH_PROBABILISTIC", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_HOUGH_MULTI_SCALE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_HAAR_DO_CANNY_PRUNING", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CALIB_USE_INTRINSIC_GUESS", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CALIB_FIX_ASPECT_RATIO", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CALIB_FIX_PRINCIPAL_POINT", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_CALIB_ZERO_TANGENT_DIST", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_7POINT", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_8POINT", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_LMEDS_ONLY", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_RANSAC_ONLY", SWIG_From_int((int)(8))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_LMEDS", SWIG_From_int((int)((4+2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_FM_RANSAC", SWIG_From_int((int)((8+2)))); 
    }
    {
        PyDict_SetItemString(d,"CV_RETR_EXTERNAL", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_RETR_LIST", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_RETR_CCOMP", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_RETR_TREE", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHAIN_CODE", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHAIN_APPROX_NONE", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHAIN_APPROX_SIMPLE", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHAIN_APPROX_TC89_L1", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_CHAIN_APPROX_TC89_KCOS", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_LINK_RUNS", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_SUBDIV2D_VIRTUAL_POINT_FLAG", SWIG_From_int((int)((1<<30)))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_USER", SWIG_From_int((int)(-1))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_L1", SWIG_From_int((int)(1))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_L2", SWIG_From_int((int)(2))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_C", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_L12", SWIG_From_int((int)(4))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_FAIR", SWIG_From_int((int)(5))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_WELSCH", SWIG_From_int((int)(6))); 
    }
    {
        PyDict_SetItemString(d,"CV_DIST_HUBER", SWIG_From_int((int)(7))); 
    }
    {
        PyDict_SetItemString(d,"CV_HAAR_MAGIC_VAL", SWIG_From_int((int)(0x42500000))); 
    }
    PyDict_SetItemString(d,"CV_TYPE_NAME_HAAR", SWIG_FromCharPtr("opencv-haar-classifier"));
    {
        PyDict_SetItemString(d,"CV_HAAR_FEATURE_MAX", SWIG_From_int((int)(3))); 
    }
    {
        PyDict_SetItemString(d,"CV_PTLOC_ERROR", SWIG_From_int((int)(CV_PTLOC_ERROR))); 
    }
    {
        PyDict_SetItemString(d,"CV_PTLOC_OUTSIDE_RECT", SWIG_From_int((int)(CV_PTLOC_OUTSIDE_RECT))); 
    }
    {
        PyDict_SetItemString(d,"CV_PTLOC_INSIDE", SWIG_From_int((int)(CV_PTLOC_INSIDE))); 
    }
    {
        PyDict_SetItemString(d,"CV_PTLOC_VERTEX", SWIG_From_int((int)(CV_PTLOC_VERTEX))); 
    }
    {
        PyDict_SetItemString(d,"CV_PTLOC_ON_EDGE", SWIG_From_int((int)(CV_PTLOC_ON_EDGE))); 
    }
    {
        PyDict_SetItemString(d,"CV_NEXT_AROUND_ORG", SWIG_From_int((int)(CV_NEXT_AROUND_ORG))); 
    }
    {
        PyDict_SetItemString(d,"CV_NEXT_AROUND_DST", SWIG_From_int((int)(CV_NEXT_AROUND_DST))); 
    }
    {
        PyDict_SetItemString(d,"CV_PREV_AROUND_ORG", SWIG_From_int((int)(CV_PREV_AROUND_ORG))); 
    }
    {
        PyDict_SetItemString(d,"CV_PREV_AROUND_DST", SWIG_From_int((int)(CV_PREV_AROUND_DST))); 
    }
    {
        PyDict_SetItemString(d,"CV_NEXT_AROUND_LEFT", SWIG_From_int((int)(CV_NEXT_AROUND_LEFT))); 
    }
    {
        PyDict_SetItemString(d,"CV_NEXT_AROUND_RIGHT", SWIG_From_int((int)(CV_NEXT_AROUND_RIGHT))); 
    }
    {
        PyDict_SetItemString(d,"CV_PREV_AROUND_LEFT", SWIG_From_int((int)(CV_PREV_AROUND_LEFT))); 
    }
    {
        PyDict_SetItemString(d,"CV_PREV_AROUND_RIGHT", SWIG_From_int((int)(CV_PREV_AROUND_RIGHT))); 
    }
    {
        PyDict_SetItemString(d,"CV_GAUSSIAN_5x5", SWIG_From_int((int)(CV_GAUSSIAN_5x5))); 
    }
}

