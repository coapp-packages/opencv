/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.opencv.jni;

/** a class for doing the native rendering of images
this class renders using GL2 es, the native ndk version
This class is used by the GL2CameraViewer to do the rendering,
and is inspired by the gl2 example in the ndk samples
*/
public class glcamera {
  private long swigCPtr;
  protected boolean swigCMemOwn;
  public glcamera(long cPtr, boolean cMemoryOwn) {
	swigCMemOwn = cMemoryOwn;
	swigCPtr = cPtr;
  }
  public static long getCPtr(glcamera obj) {
	return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opencvJNI.delete_glcamera(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  
  /**  should be called onSurfaceChanged by the GLSurfaceView that is using this
  	*  as the drawing engine
  	* @param width the width of the surface view that this will be drawing to
    * @param width the height of the surface view that this will be drawing to
  	*
    */
  public void init(int width, int height) {
    opencvJNI.glcamera_init(swigCPtr, this, width, height);
  }

  
  /**  should be called by GLSurfaceView.Renderer in the onDrawFrame method, as it
  handles the rendering of the opengl scene, and requires that the opengl context be
  valid.
 
  	*
    */
  public void step() {
    opencvJNI.glcamera_step(swigCPtr, this);
  }

  
  /** copies an image from a pool and queues it for drawing in opengl.
  	*  this does transformation into power of two texture sizes
  	* @param idx the image index to copy
    * @param pool the image_pool to look up the image from
  	*
    */
  public void drawMatToGL(int idx, image_pool pool) {
    opencvJNI.glcamera_drawMatToGL(swigCPtr, this, idx, image_pool.getCPtr(pool), pool);
  }

  public glcamera() {
    this(opencvJNI.new_glcamera(), true);
  }

}
